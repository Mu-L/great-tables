[
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "This release contains fairly comprehensive implementations of a top-level GT object, with…\n\nReasonably featureful fmt_* methods\nMethods for titles, subtitles, and table notes\nInternal work for implementing spanners, and row and group columns (in a future release)."
  },
  {
    "objectID": "changelog.html#great_tables-v0.0.2",
    "href": "changelog.html#great_tables-v0.0.2",
    "title": "Changelog",
    "section": "",
    "text": "This release contains fairly comprehensive implementations of a top-level GT object, with…\n\nReasonably featureful fmt_* methods\nMethods for titles, subtitles, and table notes\nInternal work for implementing spanners, and row and group columns (in a future release)."
  },
  {
    "objectID": "examples-qmd/fmt-number.html",
    "href": "examples-qmd/fmt-number.html",
    "title": "fmt_number",
    "section": "",
    "text": "import great_tables as gt\nfrom great_tables.data import exibble, countrypops\n\nUse the exibble dataset to create a gt table. With the fmt_number() method, we’ll format the num column to have three decimal places (with decimals=3) and omit the use of digit separators (with use_seps=False).\n\ngt.GT(exibble).fmt_number(columns='num', decimals=3).cols_label(char = \"character\")\n\n\n\n\n\n\nnum\ncharacter\nfctr\ndate\ntime\ndatetime\ncurrency\nrow\ngroup\n\n\n  0.111\n  apricot\n  one\n  2015-01-15\n  13:35\n  2018-01-01 02:22\n  49.95\n  row_1\n  grp_a\n\n\n  2.222\n  banana\n  two\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  17.95\n  row_2\n  grp_a\n\n\n  33.330\n  coconut\n  three\n  2015-03-15\n  15:45\n  2018-03-03 03:44\n  1.39\n  row_3\n  grp_a\n\n\n  444.400\n  durian\n  four\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  65100.0\n  row_4\n  grp_a\n\n\n  5,550.000\n  \n  five\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  1325.81\n  row_5\n  grp_b\n\n\n  nan\n  fig\n  six\n  2015-06-15\n  \n  2018-06-06 16:11\n  13.255\n  row_6\n  grp_b\n\n\n  777,000.000\n  grapefruit\n  seven\n  \n  19:10\n  2018-07-07 05:22\n  \n  row_7\n  grp_b\n\n\n  8,880,000.000\n  honeydew\n  eight\n  2015-08-15\n  20:20\n  \n  0.44\n  row_8\n  grp_b\n\n\n\n\n\n\n\n        \n\n\nUse a modified version of the countrypops dataset to create a gt table with row labels. Format all columns to use large-number suffixing (e.g., where '10,000,000' becomes '10M') with the suffixing=True option.\n\nfrom siuba import *\nres = (countrypops\n   &gt;&gt; select(_.country_code_3, _.year, _.population)\n   &gt;&gt; filter(_.country_code_3.isin(['CHN', 'IND', 'USA', 'PAK', 'IDN']))\n   &gt;&gt; filter(_.year &gt; 1975, _.year % 5 == 0)\n   &gt;&gt; spread(_.year, _.population)\n   &gt;&gt; arrange(-_[2015])\n)\n\n# TODO: implement `suffixing`\n(gt.GT(res)\n   .fmt_integer(columns=1980, scale_by=1/10000)\n   .fmt_number(columns=1985)\n)\n\nAttributeError: 'int' object has no attribute 'text'\n\n\nGT(_tbl_data=  country_code_3       1980        1985        1990        1995        2000  \\\n0            CHN  981235000  1051040000  1135185000  1204855000  1262645000   \n2            IND  696828385   780242084   870452165   964279129  1059633675   \n4            USA  227225000   237924000   249623000   266278000   282162411   \n1            IDN  148177096   165791694   182159874   198140162   214072421   \n3            PAK   80624057    97121552   115414069   133117476   154369924   \n\n         2005        2010        2015        2020  \n0  1303720000  1337705000  1379860000  1411100000  \n2  1154638713  1240613620  1322866505  1396387127  \n4   295516599   309327143   320738994   331511512  \n1   228805144   244016173   259091970   271857970  \n3   174372098   194454498   210969298   227196741  , _body=&lt;great_tables._gt_data.Body object at 0x7fc346d56860&gt;, _boxhead=Boxhead([ColInfo(var='country_code_3', type=&lt;ColInfoTypeEnum.default: 1&gt;, column_label='country_code_3', column_align='left', column_width=None), ColInfo(var=1980, type=&lt;ColInfoTypeEnum.default: 1&gt;, column_label=1980, column_align='right', column_width=None), ColInfo(var=1985, type=&lt;ColInfoTypeEnum.default: 1&gt;, column_label=1985, column_align='right', column_width=None), ColInfo(var=1990, type=&lt;ColInfoTypeEnum.default: 1&gt;, column_label=1990, column_align='right', column_width=None), ColInfo(var=1995, type=&lt;ColInfoTypeEnum.default: 1&gt;, column_label=1995, column_align='right', column_width=None), ColInfo(var=2000, type=&lt;ColInfoTypeEnum.default: 1&gt;, column_label=2000, column_align='right', column_width=None), ColInfo(var=2005, type=&lt;ColInfoTypeEnum.default: 1&gt;, column_label=2005, column_align='right', column_width=None), ColInfo(var=2010, type=&lt;ColInfoTypeEnum.default: 1&gt;, column_label=2010, column_align='right', column_width=None), ColInfo(var=2015, type=&lt;ColInfoTypeEnum.default: 1&gt;, column_label=2015, column_align='right', column_width=None), ColInfo(var=2020, type=&lt;ColInfoTypeEnum.default: 1&gt;, column_label=2020, column_align='right', column_width=None)]), _stub=Stub([RowInfo(rownum_i=0, group_id=None, rowname=None, group_label=None, built=False), RowInfo(rownum_i=1, group_id=None, rowname=None, group_label=None, built=False), RowInfo(rownum_i=2, group_id=None, rowname=None, group_label=None, built=False), RowInfo(rownum_i=3, group_id=None, rowname=None, group_label=None, built=False), RowInfo(rownum_i=4, group_id=None, rowname=None, group_label=None, built=False)]), _row_groups=[], _group_rows=GroupRows([]), _spanners=Spanners([]), _heading=Heading(title=None, subtitle=None, preheader=None), _stubhead=None, _source_notes=[], _footnotes=[], _styles=[], _locale=&lt;great_tables._gt_data.Locale object at 0x7fc346604e50&gt;, _formats=[&lt;great_tables._gt_data.FormatInfo object at 0x7fc346606410&gt;, &lt;great_tables._gt_data.FormatInfo object at 0x7fc346606590&gt;], _options=Options(table_id=OptionsInfo(scss=False, category='table', type='value', value=None), table_caption=OptionsInfo(scss=False, category='table', type='value', value=None), table_width=OptionsInfo(scss=True, category='table', type='px', value='auto'), table_layout=OptionsInfo(scss=True, category='table', type='value', value='fixed'), table_margin_left=OptionsInfo(scss=True, category='table', type='px', value='auto'), table_margin_right=OptionsInfo(scss=True, category='table', type='px', value='auto'), table_background_color=OptionsInfo(scss=True, category='table', type='value', value='#FFFFFF'), table_additional_css=OptionsInfo(scss=False, category='table', type='values', value=None), table_font_names=OptionsInfo(scss=False, category='table', type='values', value=['-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Helvetica Neue', 'Fira Sans', 'Droid Sans', 'Arial', 'sans-serif']), table_font_size=OptionsInfo(scss=True, category='table', type='px', value='16px'), table_font_weight=OptionsInfo(scss=True, category='table', type='value', value='normal'), table_font_style=OptionsInfo(scss=True, category='table', type='value', value='normal'), table_font_color=OptionsInfo(scss=True, category='table', type='value', value='#333333'), table_font_color_light=OptionsInfo(scss=True, category='table', type='value', value='#FFFFFF'), table_border_top_include=OptionsInfo(scss=False, category='table', type='boolean', value=True), table_border_top_style=OptionsInfo(scss=True, category='table', type='value', value='solid'), table_border_top_width=OptionsInfo(scss=True, category='table', type='px', value='2px'), table_border_top_color=OptionsInfo(scss=True, category='table', type='value', value='#A8A8A8'), table_border_right_style=OptionsInfo(scss=True, category='table', type='value', value='none'), table_border_right_width=OptionsInfo(scss=True, category='table', type='px', value='2px'), table_border_right_color=OptionsInfo(scss=True, category='table', type='value', value='#D3D3D3'), table_border_bottom_include=OptionsInfo(scss=False, category='table', type='boolean', value=True), table_border_bottom_style=OptionsInfo(scss=True, category='table', type='value', value='solid'), table_border_bottom_width=OptionsInfo(scss=True, category='table', type='px', value='2px'), table_border_bottom_color=OptionsInfo(scss=True, category='table', type='value', value='#A8A8A8'), table_border_left_style=OptionsInfo(scss=True, category='table', type='value', value='none'), table_border_left_width=OptionsInfo(scss=True, category='table', type='px', value='2px'), table_border_left_color=OptionsInfo(scss=True, category='table', type='value', value='#D3D3D3'), heading_background_color=OptionsInfo(scss=True, category='heading', type='value', value=None), heading_align=OptionsInfo(scss=True, category='heading', type='value', value='center'), heading_title_font_size=OptionsInfo(scss=True, category='heading', type='px', value='125%'), heading_title_font_weight=OptionsInfo(scss=True, category='heading', type='value', value='initial'), heading_subtitle_font_size=OptionsInfo(scss=True, category='heading', type='px', value='85%'), heading_subtitle_font_weight=OptionsInfo(scss=True, category='heading', type='value', value='initial'), heading_padding=OptionsInfo(scss=True, category='heading', type='px', value='4px'), heading_padding_horizontal=OptionsInfo(scss=True, category='heading', type='px', value='5px'), heading_border_bottom_style=OptionsInfo(scss=True, category='heading', type='value', value='solid'), heading_border_bottom_width=OptionsInfo(scss=True, category='heading', type='px', value='2px'), heading_border_bottom_color=OptionsInfo(scss=True, category='heading', type='value', value='#D3D3D3'), heading_border_lr_style=OptionsInfo(scss=True, category='heading', type='value', value='none'), heading_border_lr_width=OptionsInfo(scss=True, category='heading', type='px', value='1px'), heading_border_lr_color=OptionsInfo(scss=True, category='heading', type='value', value='#D3D3D3'), column_labels_background_color=OptionsInfo(scss=True, category='column_labels', type='value', value=None), column_labels_font_size=OptionsInfo(scss=True, category='column_labels', type='px', value='100%'), column_labels_font_weight=OptionsInfo(scss=True, category='column_labels', type='value', value='normal'), column_labels_text_transform=OptionsInfo(scss=True, category='column_labels', type='value', value='inherit'), column_labels_padding=OptionsInfo(scss=True, category='column_labels', type='px', value='5px'), column_labels_padding_horizontal=OptionsInfo(scss=True, category='column_labels', type='px', value='5px'), column_labels_vlines_style=OptionsInfo(scss=True, category='table_body', type='value', value='none'), column_labels_vlines_width=OptionsInfo(scss=True, category='table_body', type='px', value='1px'), column_labels_vlines_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), column_labels_border_top_style=OptionsInfo(scss=True, category='column_labels', type='value', value='solid'), column_labels_border_top_width=OptionsInfo(scss=True, category='column_labels', type='px', value='2px'), column_labels_border_top_color=OptionsInfo(scss=True, category='column_labels', type='value', value='#D3D3D3'), column_labels_border_bottom_style=OptionsInfo(scss=True, category='column_labels', type='value', value='solid'), column_labels_border_bottom_width=OptionsInfo(scss=True, category='column_labels', type='px', value='2px'), column_labels_border_bottom_color=OptionsInfo(scss=True, category='column_labels', type='value', value='#D3D3D3'), column_labels_border_lr_style=OptionsInfo(scss=True, category='column_labels', type='value', value='none'), column_labels_border_lr_width=OptionsInfo(scss=True, category='column_labels', type='px', value='1px'), column_labels_border_lr_color=OptionsInfo(scss=True, category='column_labels', type='value', value='#D3D3D3'), column_labels_hidden=OptionsInfo(scss=False, category='column_labels', type='boolean', value=False), row_group_background_color=OptionsInfo(scss=True, category='row_group', type='value', value=None), row_group_font_size=OptionsInfo(scss=True, category='row_group', type='px', value='100%'), row_group_font_weight=OptionsInfo(scss=True, category='row_group', type='value', value='initial'), row_group_text_transform=OptionsInfo(scss=True, category='row_group', type='value', value='inherit'), row_group_padding=OptionsInfo(scss=True, category='row_group', type='px', value='8px'), row_group_padding_horizontal=OptionsInfo(scss=True, category='row_group', type='px', value='5px'), row_group_border_top_style=OptionsInfo(scss=True, category='row_group', type='value', value='solid'), row_group_border_top_width=OptionsInfo(scss=True, category='row_group', type='px', value='2px'), row_group_border_top_color=OptionsInfo(scss=True, category='row_group', type='value', value='#D3D3D3'), row_group_border_right_style=OptionsInfo(scss=True, category='row_group', type='value', value='none'), row_group_border_right_width=OptionsInfo(scss=True, category='row_group', type='px', value='1px'), row_group_border_right_color=OptionsInfo(scss=True, category='row_group', type='value', value='#D3D3D3'), row_group_border_bottom_style=OptionsInfo(scss=True, category='row_group', type='value', value='solid'), row_group_border_bottom_width=OptionsInfo(scss=True, category='row_group', type='px', value='2px'), row_group_border_bottom_color=OptionsInfo(scss=True, category='row_group', type='value', value='#D3D3D3'), row_group_border_left_style=OptionsInfo(scss=True, category='row_group', type='value', value='none'), row_group_border_left_width=OptionsInfo(scss=True, category='row_group', type='px', value='1px'), row_group_border_left_color=OptionsInfo(scss=True, category='row_group', type='value', value='#D3D3D3'), row_group_default_label=OptionsInfo(scss=False, category='row_group', type='value', value=None), row_group_as_column=OptionsInfo(scss=False, category='row_group', type='boolean', value=False), table_body_hlines_style=OptionsInfo(scss=True, category='table_body', type='value', value='solid'), table_body_hlines_width=OptionsInfo(scss=True, category='table_body', type='px', value='1px'), table_body_hlines_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), table_body_vlines_style=OptionsInfo(scss=True, category='table_body', type='value', value='none'), table_body_vlines_width=OptionsInfo(scss=True, category='table_body', type='px', value='1px'), table_body_vlines_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), table_body_border_top_style=OptionsInfo(scss=True, category='table_body', type='value', value='solid'), table_body_border_top_width=OptionsInfo(scss=True, category='table_body', type='px', value='2px'), table_body_border_top_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), table_body_border_bottom_style=OptionsInfo(scss=True, category='table_body', type='value', value='solid'), table_body_border_bottom_width=OptionsInfo(scss=True, category='table_body', type='px', value='2px'), table_body_border_bottom_color=OptionsInfo(scss=True, category='table_body', type='value', value='#D3D3D3'), data_row_padding=OptionsInfo(scss=True, category='data_row', type='px', value='8px'), data_row_padding_horizontal=OptionsInfo(scss=True, category='data_row', type='px', value='5px'), stub_background_color=OptionsInfo(scss=True, category='stub', type='value', value=None), stub_font_size=OptionsInfo(scss=True, category='stub', type='px', value='100%'), stub_font_weight=OptionsInfo(scss=True, category='stub', type='value', value='initial'), stub_text_transform=OptionsInfo(scss=True, category='stub', type='value', value='inherit'), stub_border_style=OptionsInfo(scss=True, category='stub', type='value', value='solid'), stub_border_width=OptionsInfo(scss=True, category='stub', type='px', value='2px'), stub_border_color=OptionsInfo(scss=True, category='stub', type='value', value='#D3D3D3'), stub_row_group_background_color=OptionsInfo(scss=True, category='stub', type='value', value=None), stub_row_group_font_size=OptionsInfo(scss=True, category='stub', type='px', value='100%'), stub_row_group_font_weight=OptionsInfo(scss=True, category='stub', type='value', value='initial'), stub_row_group_text_transform=OptionsInfo(scss=True, category='stub', type='value', value='inherit'), stub_row_group_border_style=OptionsInfo(scss=True, category='stub', type='value', value='solid'), stub_row_group_border_width=OptionsInfo(scss=True, category='stub', type='px', value='2px'), stub_row_group_border_color=OptionsInfo(scss=True, category='stub', type='value', value='#D3D3D3'), summary_row_padding=OptionsInfo(scss=True, category='summary_row', type='px', value='8px'), summary_row_padding_horizontal=OptionsInfo(scss=True, category='summary_row', type='px', value='5px'), summary_row_background_color=OptionsInfo(scss=True, category='summary_row', type='value', value=None), summary_row_text_transform=OptionsInfo(scss=True, category='summary_row', type='value', value='inherit'), summary_row_border_style=OptionsInfo(scss=True, category='summary_row', type='value', value='solid'), summary_row_border_width=OptionsInfo(scss=True, category='summary_row', type='px', value='2px'), summary_row_border_color=OptionsInfo(scss=True, category='summary_row', type='value', value='#D3D3D3'), grand_summary_row_padding=OptionsInfo(scss=True, category='grand_summary_row', type='px', value='8px'), grand_summary_row_padding_horizontal=OptionsInfo(scss=True, category='grand_summary_row', type='px', value='5px'), grand_summary_row_background_color=OptionsInfo(scss=True, category='grand_summary_row', type='value', value=None), grand_summary_row_text_transform=OptionsInfo(scss=True, category='grand_summary_row', type='value', value='inherit'), grand_summary_row_border_style=OptionsInfo(scss=True, category='grand_summary_row', type='value', value='double'), grand_summary_row_border_width=OptionsInfo(scss=True, category='grand_summary_row', type='px', value='6px'), grand_summary_row_border_color=OptionsInfo(scss=True, category='grand_summary_row', type='value', value='#D3D3D3'), footnotes_font_size=OptionsInfo(scss=True, category='footnotes', type='px', value='90%'), footnotes_padding=OptionsInfo(scss=True, category='footnotes', type='px', value='4px'), footnotes_padding_horizontal=OptionsInfo(scss=True, category='footnotes', type='px', value='5px'), footnotes_background_color=OptionsInfo(scss=True, category='footnotes', type='value', value=None), footnotes_margin=OptionsInfo(scss=True, category='footnotes', type='px', value='0px'), footnotes_border_bottom_style=OptionsInfo(scss=True, category='footnotes', type='value', value='none'), footnotes_border_bottom_width=OptionsInfo(scss=True, category='footnotes', type='px', value='2px'), footnotes_border_bottom_color=OptionsInfo(scss=True, category='footnotes', type='value', value='#D3D3D3'), footnotes_border_lr_style=OptionsInfo(scss=True, category='footnotes', type='value', value='none'), footnotes_border_lr_width=OptionsInfo(scss=True, category='footnotes', type='px', value='2px'), footnotes_border_lr_color=OptionsInfo(scss=True, category='footnotes', type='value', value='#D3D3D3'), footnotes_marks=OptionsInfo(scss=False, category='footnotes', type='values', value='numbers'), footnotes_multiline=OptionsInfo(scss=False, category='footnotes', type='boolean', value=True), footnotes_sep=OptionsInfo(scss=False, category='footnotes', type='value', value=' '), source_notes_padding=OptionsInfo(scss=True, category='source_notes', type='px', value='4px'), source_notes_padding_horizontal=OptionsInfo(scss=True, category='source_notes', type='px', value='5px'), source_notes_background_color=OptionsInfo(scss=True, category='source_notes', type='value', value=None), source_notes_font_size=OptionsInfo(scss=True, category='source_notes', type='px', value='90%'), source_notes_border_bottom_style=OptionsInfo(scss=True, category='source_notes', type='value', value='none'), source_notes_border_bottom_width=OptionsInfo(scss=True, category='source_notes', type='px', value='2px'), source_notes_border_bottom_color=OptionsInfo(scss=True, category='source_notes', type='value', value='#D3D3D3'), source_notes_border_lr_style=OptionsInfo(scss=True, category='source_notes', type='value', value='none'), source_notes_border_lr_width=OptionsInfo(scss=True, category='source_notes', type='px', value='2px'), source_notes_border_lr_color=OptionsInfo(scss=True, category='source_notes', type='value', value='#D3D3D3'), source_notes_multiline=OptionsInfo(scss=False, category='source_notes', type='boolean', value=True), source_notes_sep=OptionsInfo(scss=False, category='source_notes', type='value', value=' '), row_striping_background_color=OptionsInfo(scss=True, category='row', type='value', value='rgba(128,128,128,0.05)'), row_striping_include_stub=OptionsInfo(scss=False, category='row', type='boolean', value=False), row_striping_include_table_body=OptionsInfo(scss=False, category='row', type='boolean', value=False), container_width=OptionsInfo(scss=False, category='container', type='px', value='auto'), container_height=OptionsInfo(scss=False, category='container', type='px', value='auto'), container_padding_x=OptionsInfo(scss=False, category='container', type='px', value='0px'), container_padding_y=OptionsInfo(scss=False, category='container', type='px', value='10px'), container_overflow_x=OptionsInfo(scss=False, category='container', type='overflow', value='auto'), container_overflow_y=OptionsInfo(scss=False, category='container', type='overflow', value='auto'), page_orientation=OptionsInfo(scss=False, category='page', type='value', value='portrait'), page_numbering=OptionsInfo(scss=False, category='page', type='boolean', value=False), page_header_use_tbl_headings=OptionsInfo(scss=False, category='page', type='boolean', value=False), page_footer_use_tbl_notes=OptionsInfo(scss=False, category='page', type='boolean', value=False), page_width=OptionsInfo(scss=False, category='page', type='value', value='8.5in'), page_height=OptionsInfo(scss=False, category='page', type='value', value='11.0in'), page_margin_left=OptionsInfo(scss=False, category='page', type='value', value='1.0in'), page_margin_right=OptionsInfo(scss=False, category='page', type='value', value='1.0in'), page_margin_top=OptionsInfo(scss=False, category='page', type='value', value='1.0in'), page_margin_bottom=OptionsInfo(scss=False, category='page', type='value', value='1.0in'), page_header_height=OptionsInfo(scss=False, category='page', type='value', value='0.5in'), page_footer_height=OptionsInfo(scss=False, category='page', type='value', value='0.5in'), quarto_disable_processing=OptionsInfo(scss=False, category='quarto', type='logical', value=False), quarto_use_bootstrap=OptionsInfo(scss=False, category='quarto', type='logical', value=False)), _has_built=False)\n\n\nIn a variation of the previous table, we can combine large-number suffixing with a declaration of the number of significant digits to use. With things like population figures, n_sigfig=3 is a very good option.\n\n#countrypops |&gt;\n#  dplyr::select(country_code_3, year, population) |&gt;\n#  dplyr::filter(country_code_3 %in% c('CHN', 'IND', 'USA', 'PAK', 'IDN')) |&gt;\n#  dplyr::filter(year &gt; 1975 & year %% 5 == 0) |&gt;\n#  tidyr::spread(year, population) |&gt;\n#  dplyr::arrange(desc(`2015`)) |&gt;\n#  gt(rowname_col='country_code_3') |&gt;\n#  fmt_number(suffixing=True, n_sigfig=3)\n\nThere can be cases where you want to show numbers to a large number of decimal places but also drop the unnecessary trailing zeros for low-precision values. Let’s take a portion of the towny dataset and format the latitude and longitude columns with fmt_number(). We’ll have up to 5 digits displayed as decimal values, but we’ll also unconditionally drop any runs of trailing zeros in the decimal part with drop_trailing_zeros=True.\n\ntowny |&gt;\n  dplyr::select(name, latitude, longitude) |&gt;\n  dplyr::slice_head(n=10) |&gt;\n  gt() |&gt;\n  fmt_number(decimals=5, drop_trailing_zeros=True) |&gt;\n  # replace -name with [latitude, longitude]\n  ## cols_merge(columns=-name, pattern='{1}, {2}') |&gt;\n  cols_label(\n    name~'Municipality',\n    latitude='Location'\n  )"
  },
  {
    "objectID": "examples-qmd/table-manipulation.html",
    "href": "examples-qmd/table-manipulation.html",
    "title": "table manipulation",
    "section": "",
    "text": "import great_tables as gt\nfrom great_tables.data import exibble, countrypops, gtcars  # , md, html\n\nfrom siuba import *\n\n\nres = gtcars &gt;&gt; select(_.mfr, _.model, _.msrp) &gt;&gt; _.head(5)\n# TODO: Make `md()` work\ngt.GT(res).tab_header(\n    title=\"Data listing from **gtcars**\", subtitle=\"`gtcars` is an R dataset\"\n).fmt_number(columns=\"msrp\", decimals=2, scale_by=1 / 10000)\n\n\n\n\n\n  \n    Data listing from **gtcars**\n  \n  \n    `gtcars` is an R dataset\n  \nmfr\nmodel\nmsrp\n\n\n  Ford\n  GT\n  44.70\n\n\n  Ferrari\n  458 Speciale\n  29.17\n\n\n  Ferrari\n  458 Spider\n  26.36\n\n\n  Ferrari\n  458 Italia\n  23.35\n\n\n  Ferrari\n  488 GTB\n  24.54\n\n\n\n\n\n\n\n        \n\n\n\ngt.GT(exibble.iloc[[4, 3, 7, 1],], groupname_col=\"group\")\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\nrow\n\n\n  5550.0\n  \n  five\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  1325.81\n  row_5\n\n\n  8880000.0\n  honeydew\n  eight\n  2015-08-15\n  20:20\n  \n  0.44\n  row_8\n\n\n  444.4\n  durian\n  four\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  65100.0\n  row_4\n\n\n  2.222\n  banana\n  two\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  17.95\n  row_2\n\n\n\n\n\n\n\n        \n\n\n\nres = gtcars &gt;&gt; select(_.mfr, _.model, _.msrp) &gt;&gt; _.head(5)\n\n# TODO: Make `html()` work\ngt.GT(res).tab_header(\n    title=html(\"Data listing from &lt;strong&gt;gtcars&lt;/strong&gt;\"),\n    subtitle=html(\"From &lt;span style='color:red;'&gt;gtcars&lt;/span&gt;\"),\n)"
  },
  {
    "objectID": "reference/data.sza.html",
    "href": "reference/data.sza.html",
    "title": "data.sza",
    "section": "",
    "text": "data.sza\nTwice hourly solar zenith angles by month & latitude.\nThis dataset contains solar zenith angles (in degrees, with the range of 0-90) every half hour from 04:00 to 12:00, true solar time. This set of values is calculated on the first of every month for 4 different northern hemisphere latitudes. For determination of afternoon values, the presented tabulated values are symmetric about noon.\nThe solar zenith angle (SZA) is one measure that helps to describe the sun’s path across the sky. It’s defined as the angle of the sun relative to a line perpendicular to the earth’s surface. It is useful to calculate the SZA in relation to the true solar time. True solar time relates to the position of the sun with respect to the observer, which is different depending on the exact longitude. For example, two hours before the sun crosses the meridian (the highest point it would reach that day) corresponds to a true solar time of 10 a.m. The SZA has a strong dependence on the observer’s latitude. For example, at a latitude of 50 degrees N at the start of January, the noontime SZA is 73.0 but a different observer at 20 degrees N would measure the noontime SZA to be 43.0 degrees.\n\n\nThis is a dataset with 816 rows and 4 columns.\n\nlatitude: The latitude in decimal degrees for the observations.\n`month: The measurement month. All calculations where conducted for the first day of each month.\ntst: The true solar time at the givenlatitudeand date (first ofmonth`) for which the solar zenith angle is calculated.\nsza: The solar zenith angle in degrees, whereNAs indicate that sunrise hadn't yet occurred by thetst` value.\n\n\n\n\nCalculated Actinic Fluxes (290 - 700 nm) for Air Pollution Photochemistry Applications (Peterson, 1976), available at: https://nepis.epa.gov/Exe/ZyPURL.cgi?Dockey=9100JA26.txt."
  },
  {
    "objectID": "reference/data.sza.html#details",
    "href": "reference/data.sza.html#details",
    "title": "data.sza",
    "section": "",
    "text": "This is a dataset with 816 rows and 4 columns.\n\nlatitude: The latitude in decimal degrees for the observations.\n`month: The measurement month. All calculations where conducted for the first day of each month.\ntst: The true solar time at the givenlatitudeand date (first ofmonth`) for which the solar zenith angle is calculated.\nsza: The solar zenith angle in degrees, whereNAs indicate that sunrise hadn't yet occurred by thetst` value."
  },
  {
    "objectID": "reference/data.sza.html#source",
    "href": "reference/data.sza.html#source",
    "title": "data.sza",
    "section": "",
    "text": "Calculated Actinic Fluxes (290 - 700 nm) for Air Pollution Photochemistry Applications (Peterson, 1976), available at: https://nepis.epa.gov/Exe/ZyPURL.cgi?Dockey=9100JA26.txt."
  },
  {
    "objectID": "reference/GT.cols_align.html",
    "href": "reference/GT.cols_align.html",
    "title": "GT.cols_align",
    "section": "",
    "text": "GT.cols_align(self, align='left', columns=None)\nSet the alignment of one or more columns.\nThe cols_align() method sets the alignment of one or more columns. The align argument can be set to one of \"left\", \"center\", or \"right\" and the columns argument can be used to specify which columns to apply the alignment to. If columns is not specified, the alignment is applied to all columns."
  },
  {
    "objectID": "reference/GT.cols_align.html#parameters",
    "href": "reference/GT.cols_align.html#parameters",
    "title": "GT.cols_align",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nalign\nstr\nThe alignment to apply. Must be one of \"left\", \"center\", or \"right\".\n'left'\n\n\ncolumns\nUnion[str, List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list. If None, the alignment is applied to all columns.\nNone"
  },
  {
    "objectID": "reference/GT.cols_align.html#returns",
    "href": "reference/GT.cols_align.html#returns",
    "title": "GT.cols_align",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.cols_align.html#examples",
    "href": "reference/GT.cols_align.html#examples",
    "title": "GT.cols_align",
    "section": "Examples",
    "text": "Examples\nLet’s use the countrypops to create a small table. We can change the alignment of the population column with cols_align(). In this example, the column label and body cells of population will be aligned to the left.\n\nimport great_tables as gt\nfrom great_tables.data import countrypops\n\ncountrypops_mini = countrypops.loc[countrypops[\"country_name\"] == \"San Marino\"][\n    [\"country_name\", \"year\", \"population\"]\n].tail(5)\n\n(\n    gt.GT(countrypops_mini, rowname_col=\"year\", groupname_col=\"country_name\")\n    .cols_align(align=\"left\", columns=\"population\")\n)\n\n\n\n\n\n\n\npopulation\n\n\n  San Marino\n  2018\n  34156\n\n\n  2019\n  34178\n\n\n  2020\n  34007\n\n\n  2021\n  33745\n\n\n  2022\n  33660"
  },
  {
    "objectID": "reference/data.countrypops.html",
    "href": "reference/data.countrypops.html",
    "title": "data.countrypops",
    "section": "",
    "text": "data.countrypops\nYearly populations of countries from 1960 to 2022.\nA dataset that presents yearly, total populations of countries. Total population is based on counts of all residents regardless of legal status or citizenship. Country identifiers include the English-language country names, and the 2- and 3-letter ISO 3166-1 country codes. Each row contains a population value for a given year (from 1960 to 2022). Any missing values for populations indicate the non-existence of the entity during that year.\n\n\nThis is a dataset with 13,545 rows and 5 columns.\n\ncountry_name: The name of the country.\ncountry_code_2, country_code_3: The 2- and 3-letter ISO 3166-1 country codes.\nyear: The year for the population estimate.\npopulation: The population estimate, midway through the year.\n\n\n\n\nhttps://data.worldbank.org/indicator/SP.POP.TOTL"
  },
  {
    "objectID": "reference/data.countrypops.html#details",
    "href": "reference/data.countrypops.html#details",
    "title": "data.countrypops",
    "section": "",
    "text": "This is a dataset with 13,545 rows and 5 columns.\n\ncountry_name: The name of the country.\ncountry_code_2, country_code_3: The 2- and 3-letter ISO 3166-1 country codes.\nyear: The year for the population estimate.\npopulation: The population estimate, midway through the year."
  },
  {
    "objectID": "reference/data.countrypops.html#source",
    "href": "reference/data.countrypops.html#source",
    "title": "data.countrypops",
    "section": "",
    "text": "https://data.worldbank.org/indicator/SP.POP.TOTL"
  },
  {
    "objectID": "reference/GT.html",
    "href": "reference/GT.html",
    "title": "GT",
    "section": "",
    "text": "GT(self, data, rowname_col=None, groupname_col=None, auto_align=True, locale=None)\nCreate a Great Tables object.\nThe GT() class creates the GT object when provided with tabular data. Using this class is the the first step in a typical Great Tables workflow. Once we have this object, we can take advantage of numerous methods to get the desired display table for publication.\nThere are a few table structuring options we can consider at this stage. We can choose to create a table stub containing row labels through the use of the rowname_col argument. Further to this, row groups can be created with the groupname_col argument. Both arguments take the name of a column in the input table data. Typically, the data in the groupname_col column will consist of categorical text whereas the data in the rowname_col column will often contain unique labels (perhaps being unique across the entire table or unique only within the different row groups)."
  },
  {
    "objectID": "reference/GT.html#parameters",
    "href": "reference/GT.html#parameters",
    "title": "GT",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\ntyping.Any\nA DataFrame object.\nrequired\n\n\nrowname_col\nstr | None\nThe column name in the input data table to use as row labels to be placed in the table stub.\nNone\n\n\ngroupname_col\nstr | None\nThe column name in the input data table to use as group labels for generation of row groups.\nNone\n\n\nauto_align\nbool\nOptionally have column data be aligned depending on the content contained in each column of the input data.\nTrue\n\n\nlocale\nstr\nAn optional locale identifier that can be set as the default locale for all functions that take a locale argument. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/GT.html#returns",
    "href": "reference/GT.html#returns",
    "title": "GT",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nA GT object is returned."
  },
  {
    "objectID": "reference/GT.html#examples",
    "href": "reference/GT.html#examples",
    "title": "GT",
    "section": "Examples",
    "text": "Examples\nLet’s use the exibble dataset for the next few examples, we’ll learn how to make simple output tables with the GT() class. The most basic thing to do is to just use GT() with the dataset as the input.\n\nimport great_tables as gt\n\ngt.GT(gt.exibble)\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\nrow\ngroup\n\n\n  0.1111\n  apricot\n  one\n  2015-01-15\n  13:35\n  2018-01-01 02:22\n  49.95\n  row_1\n  grp_a\n\n\n  2.222\n  banana\n  two\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  17.95\n  row_2\n  grp_a\n\n\n  33.33\n  coconut\n  three\n  2015-03-15\n  15:45\n  2018-03-03 03:44\n  1.39\n  row_3\n  grp_a\n\n\n  444.4\n  durian\n  four\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  65100.0\n  row_4\n  grp_a\n\n\n  5550.0\n  \n  five\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  1325.81\n  row_5\n  grp_b\n\n\n  \n  fig\n  six\n  2015-06-15\n  \n  2018-06-06 16:11\n  13.255\n  row_6\n  grp_b\n\n\n  777000.0\n  grapefruit\n  seven\n  \n  19:10\n  2018-07-07 05:22\n  \n  row_7\n  grp_b\n\n\n  8880000.0\n  honeydew\n  eight\n  2015-08-15\n  20:20\n  \n  0.44\n  row_8\n  grp_b\n\n\n\n\n\n\n\n        \n\n\nThis dataset has the row and group columns. The former contains unique values that are ideal for labeling rows, and this often happens in what is called the ‘stub’ (a reserved area that serves to label rows). With the GT() class, we can immediately place the contents of the row column into the stub column. To do this, we use the rowname_col argument with the appropriate column name.\n\ngt.GT(gt.exibble, rowname_col=\"row\")\n\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\ngroup\n\n\n  row_1\n  0.1111\n  apricot\n  one\n  2015-01-15\n  13:35\n  2018-01-01 02:22\n  49.95\n  grp_a\n\n\n  row_2\n  2.222\n  banana\n  two\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  17.95\n  grp_a\n\n\n  row_3\n  33.33\n  coconut\n  three\n  2015-03-15\n  15:45\n  2018-03-03 03:44\n  1.39\n  grp_a\n\n\n  row_4\n  444.4\n  durian\n  four\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  65100.0\n  grp_a\n\n\n  row_5\n  5550.0\n  \n  five\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  1325.81\n  grp_b\n\n\n  row_6\n  \n  fig\n  six\n  2015-06-15\n  \n  2018-06-06 16:11\n  13.255\n  grp_b\n\n\n  row_7\n  777000.0\n  grapefruit\n  seven\n  \n  19:10\n  2018-07-07 05:22\n  \n  grp_b\n\n\n  row_8\n  8880000.0\n  honeydew\n  eight\n  2015-08-15\n  20:20\n  \n  0.44\n  grp_b\n\n\n\n\n\n\n\n        \n\n\nThis sets up a table with a stub, the row labels are placed within the stub column, and a vertical dividing line has been placed on the right-hand side.\nThe group column contains categorical values that are ideal for grouping rows. We can use the groupname_col argument to place these values into row groups.\n\ngt.GT(gt.exibble, rowname_col=\"row\", groupname_col=\"group\")\n\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\n\n\n  grp_a\n  row_1\n  0.1111\n  apricot\n  one\n  2015-01-15\n  13:35\n  2018-01-01 02:22\n  49.95\n\n\n  row_2\n  2.222\n  banana\n  two\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  17.95\n\n\n  row_3\n  33.33\n  coconut\n  three\n  2015-03-15\n  15:45\n  2018-03-03 03:44\n  1.39\n\n\n  row_4\n  444.4\n  durian\n  four\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  65100.0\n\n\n  grp_b\n  row_5\n  5550.0\n  \n  five\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  1325.81\n\n\n  row_6\n  \n  fig\n  six\n  2015-06-15\n  \n  2018-06-06 16:11\n  13.255\n\n\n  row_7\n  777000.0\n  grapefruit\n  seven\n  \n  19:10\n  2018-07-07 05:22\n  \n\n\n  row_8\n  8880000.0\n  honeydew\n  eight\n  2015-08-15\n  20:20\n  \n  0.44\n\n\n\n\n\n\n\n        \n\n\nBy default, values in the body of a table (and their column labels) are automatically aligned. The alignment is governed by the types of values in a column. If you’d like to disable this form of auto-alignment, the auto_align=False option can be taken.\n\ngt.GT(gt.exibble, rowname_col=\"row\", auto_align=False)\n\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\ngroup\n\n\n  row_1\n  0.1111\n  apricot\n  one\n  2015-01-15\n  13:35\n  2018-01-01 02:22\n  49.95\n  grp_a\n\n\n  row_2\n  2.222\n  banana\n  two\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  17.95\n  grp_a\n\n\n  row_3\n  33.33\n  coconut\n  three\n  2015-03-15\n  15:45\n  2018-03-03 03:44\n  1.39\n  grp_a\n\n\n  row_4\n  444.4\n  durian\n  four\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  65100.0\n  grp_a\n\n\n  row_5\n  5550.0\n  \n  five\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  1325.81\n  grp_b\n\n\n  row_6\n  \n  fig\n  six\n  2015-06-15\n  \n  2018-06-06 16:11\n  13.255\n  grp_b\n\n\n  row_7\n  777000.0\n  grapefruit\n  seven\n  \n  19:10\n  2018-07-07 05:22\n  \n  grp_b\n\n\n  row_8\n  8880000.0\n  honeydew\n  eight\n  2015-08-15\n  20:20\n  \n  0.44\n  grp_b\n\n\n\n\n\n\n\n        \n\n\nWhat you’ll get from that is center-alignment of all table body values and all column labels. Note that row labels in the the stub are still left-aligned; and auto_align has no effect on alignment within the table stub.\nHowever which way you generate the initial table object, you can modify it with a huge variety of methods to further customize the presentation. Formatting body cells is commonly done with the family of formatting methods (e.g., fmt_number(), fmt_date(), etc.). The package supports formatting with internationalization (‘i18n’ features) and so locale-aware methods all come with a locale argument. To avoid having to use that argument repeatedly, the GT() class has its own locale argument. Setting a locale in that will make it available globally. Here’s an example of how that works in practice when setting locale = \"fr\" in GT() prior to using formatting methods:\n\n(\n    gt.GT(gt.exibble, rowname_col=\"row\", locale=\"fr\")\n      .fmt_currency(columns=\"currency\")\n      .fmt_scientific(columns=\"num\")\n      .fmt_date(columns=\"date\", date_style=\"day_month_year\")\n)\n\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\ngroup\n\n\n  row_1\n  1.11 × 10−1\n  apricot\n  one\n  15 January 2015\n  13:35\n  2018-01-01 02:22\n  $49.95\n  grp_a\n\n\n  row_2\n  2.22\n  banana\n  two\n  15 February 2015\n  14:40\n  2018-02-02 14:33\n  $17.95\n  grp_a\n\n\n  row_3\n  3.33 × 101\n  coconut\n  three\n  15 March 2015\n  15:45\n  2018-03-03 03:44\n  $1.39\n  grp_a\n\n\n  row_4\n  4.44 × 102\n  durian\n  four\n  15 April 2015\n  16:50\n  2018-04-04 15:55\n  $65,100.00\n  grp_a\n\n\n  row_5\n  5.55 × 103\n  \n  five\n  15 May 2015\n  17:55\n  2018-05-05 04:00\n  $1,325.81\n  grp_b\n\n\n  row_6\n  \n  fig\n  six\n  15 June 2015\n  \n  2018-06-06 16:11\n  $13.26\n  grp_b\n\n\n  row_7\n  7.77 × 105\n  grapefruit\n  seven\n  \n  19:10\n  2018-07-07 05:22\n  \n  grp_b\n\n\n  row_8\n  8.88 × 106\n  honeydew\n  eight\n  15 August 2015\n  20:20\n  \n  $0.44\n  grp_b\n\n\n\n\n\n\n\n        \n\n\nIn this example, the fmt_currency(), fmt_scientific(), and fmt_date() methods understand that the locale for this table is \"fr\" (French), so the appropriate formatting for that locale is apparent in the currency, num, and date columns."
  },
  {
    "objectID": "reference/GT.cols_move_to_end.html",
    "href": "reference/GT.cols_move_to_end.html",
    "title": "GT.cols_move_to_end",
    "section": "",
    "text": "GT.cols_move_to_end(data, columns)\nMove one or more columns to the end.\nWe can easily move set of columns to the beginning of the column series and we only need to specify which columns. It’s possible to do this upstream of gt_tables, however, it is easier with this function and it presents less possibility for error. The ordering of the columns that are moved to the end is preserved (same with the ordering of all other columns in the table)."
  },
  {
    "objectID": "reference/GT.cols_move_to_end.html#parameters",
    "href": "reference/GT.cols_move_to_end.html#parameters",
    "title": "GT.cols_move_to_end",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[typing.List[str]]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nrequired"
  },
  {
    "objectID": "reference/GT.cols_move_to_end.html#returns",
    "href": "reference/GT.cols_move_to_end.html#returns",
    "title": "GT.cols_move_to_end",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.cols_move_to_end.html#examples",
    "href": "reference/GT.cols_move_to_end.html#examples",
    "title": "GT.cols_move_to_end",
    "section": "Examples",
    "text": "Examples\nFor this example, we’ll use a portion of the countrypops dataset to create a simple table. Let’s move the year column, which is the middle column, to the end of the column series with the cols_move_to_end() method.\n\nimport great_tables as gt\nfrom great_tables.data import countrypops\n\ncountrypops_mini = countrypops.loc[countrypops[\"country_name\"] == \"Benin\"][\n    [\"country_name\", \"year\", \"population\"]\n].tail(5)\n\ngt.GT(countrypops_mini).cols_move_to_end(columns=\"year\")\n\n\n\n\n\n\ncountry_name\npopulation\nyear\n\n\n  Benin\n  11940683\n  2018\n\n\n  Benin\n  12290444\n  2019\n\n\n  Benin\n  12643123\n  2020\n\n\n  Benin\n  12996895\n  2021\n\n\n  Benin\n  13352864\n  2022\n\n\n\n\n\n\n\n        \n\n\nWe can also move multiple columns at a time. With the same countrypops-based table, let’s move both the year and country_name columns to the end of the column series.\ngt.GT(countrypops_mini).cols_move_to_end(columns=[“year”, “country_name”])"
  },
  {
    "objectID": "reference/GT.fmt_roman.html",
    "href": "reference/GT.fmt_roman.html",
    "title": "GT.fmt_roman",
    "section": "",
    "text": "GT.fmt_roman(self, columns=None, rows=None, case='upper', pattern='{x}')\nFormat values as Roman numerals.\nWith numeric values in a gt table we can transform those to Roman numerals, rounding values as necessary."
  },
  {
    "objectID": "reference/GT.fmt_roman.html#parameters",
    "href": "reference/GT.fmt_roman.html#parameters",
    "title": "GT.fmt_roman",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone\n\n\ncase\nstr\nShould Roman numerals should be rendered as uppercase (\"upper\") or lowercase (\"lower\") letters? By default, this is set to \"upper\".\n'upper'\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'"
  },
  {
    "objectID": "reference/GT.fmt_roman.html#returns",
    "href": "reference/GT.fmt_roman.html#returns",
    "title": "GT.fmt_roman",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.fmt_roman.html#examples",
    "href": "reference/GT.fmt_roman.html#examples",
    "title": "GT.fmt_roman",
    "section": "Examples",
    "text": "Examples\nLet’s first create a DataFrame containing small numeric values and then introduce that to GT(). We’ll then format the roman column to appear as Roman numerals with the fmt_roman() method.\n\nimport pandas as pd\nimport great_tables as gt\n\nnumbers_tbl = pd.DataFrame({\"arabic\": [1, 8, 24, 85], \"roman\": [1, 8, 24, 85]})\n\ngt.GT(numbers_tbl, rowname_col=\"arabic\").fmt_roman(columns=\"roman\")\n\n\n\n\n\n\n\nroman\n\n\n  1\n  I\n\n\n  8\n  VIII\n\n\n  24\n  XXIV\n\n\n  85\n  LXXXV"
  },
  {
    "objectID": "reference/GT.fmt_roman.html#see-also",
    "href": "reference/GT.fmt_roman.html#see-also",
    "title": "GT.fmt_roman",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_roman(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/GT.fmt_number.html",
    "href": "reference/GT.fmt_number.html",
    "title": "GT.fmt_number",
    "section": "",
    "text": "GT.fmt_number(self, columns=None, rows=None, decimals=2, n_sigfig=None, drop_trailing_zeros=False, drop_trailing_dec_mark=True, use_seps=True, scale_by=1, compact=False, pattern='{x}', sep_mark=',', dec_mark='.', force_sign=False, locale=None)\nFormat numeric values.\nWith numeric values in a gt table, we can perform number-based formatting so that the targeted values are rendered with a higher consideration for tabular presentation. Furthermore, there is finer control over numeric formatting with the following options:"
  },
  {
    "objectID": "reference/GT.fmt_number.html#parameters",
    "href": "reference/GT.fmt_number.html#parameters",
    "title": "GT.fmt_number",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone\n\n\ndecimals\nint\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True. If you always need decimals = 0, the fmt_integer() method should be considered.\n2\n\n\nn_sigfig\ntyping.Optional[int]\nA option to format numbers to n significant figures. By default, this is None and thus number values will be formatted according to the number of decimal places set via decimals. If opting to format according to the rules of significant figures, n_sigfig must be a number greater than or equal to 1. Any values passed to the decimals and drop_trailing_zeros arguments will be ignored.\nNone\n\n\ndrop_trailing_zeros\nbool\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\nFalse\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\nscale_by\nfloat\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n1\n\n\ncompact\nbool\nA boolean value that allows for compact formatting of numeric values. Values will be scaled and decorated with the appropriate suffixes (e.g., 1230 becomes 1.23K, and 1230000 becomes 1.23M). The compact option is False by default.\nFalse\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/GT.fmt_number.html#returns",
    "href": "reference/GT.fmt_number.html#returns",
    "title": "GT.fmt_number",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.fmt_number.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_number.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_number",
    "section": "Adapting Output To A Specific Locale",
    "text": "Adapting Output To A Specific Locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). The use of a valid locale ID here means separator and decimal marks will be correct for the given locale. Should any values be provided in sep_mark or dec_mark, they will be overridden by the locale’s preferred values.\nNote that a locale value provided here will override any global locale setting performed in GT()’s own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_number.html#examples",
    "href": "reference/GT.fmt_number.html#examples",
    "title": "GT.fmt_number",
    "section": "Examples",
    "text": "Examples\nLet’s use the exibble dataset to create a table. With the fmt_number() method, we’ll format the num column to have three decimal places (with decimals=3) and omit the use of digit separators (with use_seps=False).\n\nimport great_tables as gt\n\ngt.GT(gt.data.exibble).fmt_number(columns=\"num\", decimals=3, use_seps=False)\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\nrow\ngroup\n\n\n  0.111\n  apricot\n  one\n  2015-01-15\n  13:35\n  2018-01-01 02:22\n  49.95\n  row_1\n  grp_a\n\n\n  2.222\n  banana\n  two\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  17.95\n  row_2\n  grp_a\n\n\n  33.330\n  coconut\n  three\n  2015-03-15\n  15:45\n  2018-03-03 03:44\n  1.39\n  row_3\n  grp_a\n\n\n  444.400\n  durian\n  four\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  65100.0\n  row_4\n  grp_a\n\n\n  5550.000\n  \n  five\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  1325.81\n  row_5\n  grp_b\n\n\n  nan\n  fig\n  six\n  2015-06-15\n  \n  2018-06-06 16:11\n  13.255\n  row_6\n  grp_b\n\n\n  777000.000\n  grapefruit\n  seven\n  \n  19:10\n  2018-07-07 05:22\n  \n  row_7\n  grp_b\n\n\n  8880000.000\n  honeydew\n  eight\n  2015-08-15\n  20:20\n  \n  0.44\n  row_8\n  grp_b"
  },
  {
    "objectID": "reference/GT.fmt_number.html#see-also",
    "href": "reference/GT.fmt_number.html#see-also",
    "title": "GT.fmt_number",
    "section": "See Also",
    "text": "See Also\nThe fmt_integer() method might be more useful if you really need to format numeric values to appear as integers (i.e., no decimals will be shown and input values are rounded as necessary). Need to do numeric formatting on a value or list of values? Take a look at the functional version of this method: val_fmt_number()."
  },
  {
    "objectID": "reference/vals.fmt_markdown.html",
    "href": "reference/vals.fmt_markdown.html",
    "title": "vals.fmt_markdown",
    "section": "",
    "text": "vals.fmt_markdown(x)\nFormat Markdown text.\nAny Markdown-formatted text can be transformed to HTML when using the fmt_markdown() function.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_markdown.html#parameters",
    "href": "reference/vals.fmt_markdown.html#parameters",
    "title": "vals.fmt_markdown",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired"
  },
  {
    "objectID": "reference/vals.fmt_markdown.html#returns",
    "href": "reference/vals.fmt_markdown.html#returns",
    "title": "vals.fmt_markdown",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/data.metro.html",
    "href": "reference/data.metro.html",
    "title": "data.metro",
    "section": "",
    "text": "data.metro\nThe stations of the Paris Metro.\nA dataset with information on all 308 Paris Metro stations as of February 2023. Each record represents a station, describing which Metro lines are serviced by the station, which other connections are available, and annual passenger volumes. Basic location information is provided for each station in terms where they reside on a municipal level, and, through latitude/longitude coordinates.\nThe system has 16 lines (numbered from 1 to 14, with two additional lines: 3bis and 7bis) and covers over 200 kilometers of track. The Metro runs on standard gauge tracks (1,435 mm) and operates using a variety of rolling stock, including rubber-tired trains and steel-wheeled trains (which are far more common).\nThe Metro is operated by the RATP, which also operates other transit systems in the region, including buses, trams, and the RER. The RER is an important component of the region’s transit infrastructure, and several RER stations have connectivity with the Metro. This integration allows passengers to transfer between those two systems seamlessly. The Metro also has connections to the Transilien rail network, tramway stations, several major train stations (e.g., Gare du Nord, Gare de l’Est, etc.), and many bus lines.\n\n\nThis is a dataset with 308 rows and 11 columns.\n\nname: The name of the station.\ncaption: In some cases, a station will have a caption that might describe a nearby place of interest. This is missing if there isn’t a caption for the station name.\nlines: All Metro lines associated with the station. This is a character-based, comma-separated series of line names.\nconnect_rer: Station connections with the RER. The RER system has five lines (A, B, C, D, and E) with 257 stations and several interchanges with the Metro.\nconnect_tram: Connections with tramway lines. This system has twelve lines in operation (T1, T2, T3a, T3b, T4, T5, T6, T7, T8, T9, T11, and T13) with 235 stations.\nconnect_transilien: Connections with Transilien lines. This system has eight lines in operation (H, J, K, L, N, P, R, and U).\nconnect_other: Other connections with transportation infrastructure such as regional, intercity, night, and high-speed trains (typically at railway stations).\nlatitude, longitude: The location of the station, given as latitude and longitude values in decimal degrees.\nlocation: The arrondissement of Paris or municipality in which the station resides. For some stations located at borders, the grouping of locations will be presented as a comma-separated series.\npassengers: The total number of Metro station entries during 2021. Some of the newest stations in the Metro system do not have this data, thus they show as missing values."
  },
  {
    "objectID": "reference/data.metro.html#details",
    "href": "reference/data.metro.html#details",
    "title": "data.metro",
    "section": "",
    "text": "This is a dataset with 308 rows and 11 columns.\n\nname: The name of the station.\ncaption: In some cases, a station will have a caption that might describe a nearby place of interest. This is missing if there isn’t a caption for the station name.\nlines: All Metro lines associated with the station. This is a character-based, comma-separated series of line names.\nconnect_rer: Station connections with the RER. The RER system has five lines (A, B, C, D, and E) with 257 stations and several interchanges with the Metro.\nconnect_tram: Connections with tramway lines. This system has twelve lines in operation (T1, T2, T3a, T3b, T4, T5, T6, T7, T8, T9, T11, and T13) with 235 stations.\nconnect_transilien: Connections with Transilien lines. This system has eight lines in operation (H, J, K, L, N, P, R, and U).\nconnect_other: Other connections with transportation infrastructure such as regional, intercity, night, and high-speed trains (typically at railway stations).\nlatitude, longitude: The location of the station, given as latitude and longitude values in decimal degrees.\nlocation: The arrondissement of Paris or municipality in which the station resides. For some stations located at borders, the grouping of locations will be presented as a comma-separated series.\npassengers: The total number of Metro station entries during 2021. Some of the newest stations in the Metro system do not have this data, thus they show as missing values."
  },
  {
    "objectID": "reference/data.illness.html",
    "href": "reference/data.illness.html",
    "title": "data.illness",
    "section": "",
    "text": "data.illness\nLab tests for one suffering from an illness.\nA dataset with artificial daily lab data for a patient with Yellow Fever (YF). The table comprises laboratory findings for the patient from day 3 of illness onset until day 9 (after which the patient died). YF viral DNA was found in serum samples from day 3, where the viral load reached 14,000 copies per mL. Several medical interventions were taken to help the patient, including the administration of fresh frozen plasma, platelets, red cells, and coagulation factor VIII. The patient also received advanced support treatment in the form of mechanical ventilation and plasmapheresis. Though the patient’s temperature remained stable during their illness, unfortunately, the patient’s condition did not improve. On days 7 and 8, the patient’s health declined further, with symptoms such as nosebleeds, gastrointestinal bleeding, and hematoma.\nThe various tests are identified in the test column. The following listing provides the full names of any abbreviations seen in that column.\n\n\"WBC\": white blood cells.\n\"RBC\": red blood cells.\n\"Hb\": hemoglobin.\n\"PLT\": platelets.\n\"ALT\": alanine aminotransferase.\n\"AST\": aspartate aminotransferase.\n\"TBIL\": total bilirubin.\n\"DBIL\": direct bilirubin.\n\"NH3\": hydrogen nitride.\n\"PT\": prothrombin time.\n\"APTT\": activated partial thromboplastin time.\n\"PTA\": prothrombin time activity.\n\"DD\": D-dimer.\n\"FDP\": fibrinogen degradation products.\n\"LDH\": lactate dehydrogenase.\n\"HBDH\": hydroxybutyrate dehydrogenase.\n\"CK\": creatine kinase.\n\"CKMB\": the MB fraction of creatine kinase.\n\"BNP\": B-type natriuetic peptide.\n\"MYO\": myohemoglobin.\n\"TnI\": troponin inhibitory.\n\"CREA\": creatinine.\n\"BUN\": blood urea nitrogen.\n\"AMY\": amylase.\n\"LPS\": lipase.\n\"K\": kalium.\n\"Na\": sodium.\n\"Cl\": chlorine.\n\"Ca\": calcium.\n\"P\": phosphorus.\n\"Lac\": lactate, blood.\n\"CRP\": c-reactive protein.\n\"PCT\": procalcitonin.\n\"IL-6\": interleukin-6.\n\"CD3+CD4+\": CD4+T lymphocytes.\n\"CD3+CD8+\": CD8+T lymphocytes.\n\n\n\nThis is a dataset with 39 rows and 11 columns.\n\ntest: The name of the test.\nunits: The measurement units for the test.\nday_3, day_4, day_5, day_6, day_7, day_8, day_9: Measurement values associated with each test administered from days 3 to 9. A missing value indicates that the test could not be performed that day.\nnorm_l, norm_u: Lower and upper bounds for the normal range associated with the test."
  },
  {
    "objectID": "reference/data.illness.html#details",
    "href": "reference/data.illness.html#details",
    "title": "data.illness",
    "section": "",
    "text": "This is a dataset with 39 rows and 11 columns.\n\ntest: The name of the test.\nunits: The measurement units for the test.\nday_3, day_4, day_5, day_6, day_7, day_8, day_9: Measurement values associated with each test administered from days 3 to 9. A missing value indicates that the test could not be performed that day.\nnorm_l, norm_u: Lower and upper bounds for the normal range associated with the test."
  },
  {
    "objectID": "reference/data.gtcars.html",
    "href": "reference/data.gtcars.html",
    "title": "data.gtcars",
    "section": "",
    "text": "data.gtcars\nDeluxe automobiles from the 2014-2017 period.\nExpensive and fast cars. Each row describes a car of a certain make, model, year, and trim. Basic specifications such as horsepower, torque, EPA MPG ratings, type of drivetrain, and transmission characteristics are provided. The country of origin for the car manufacturer is also given.\nAll of the gtcars have something else in common (aside from the high asking prices): they are all grand tourer vehicles. These are proper GT cars that blend pure driving thrills with a level of comfort that is more expected from a fine limousine (e.g., a Rolls-Royce Phantom EWB). You’ll find that, with these cars, comfort is emphasized over all-out performance. Nevertheless, the driving experience should also mean motoring at speed, doing so in style and safety.\n\n\nThis is a dataset with 47 rows and 15 columns.\n\nmfr: `The name of the car manufacturer.\nmodel: The car’s model name.\nyear: The car’s model year.\ntrim: A short description of the car model’s trim.\nbdy_style: An identifier of the car’s body style, which is either \"coupe\", \"convertible\", \"sedan\", or \"hatchback\".\nhp, hp_rpm: The car’s horsepower and the associated RPM level.\ntrq, trq_rpm: The car’s torque and the associated RPM level.\nmpg_c, mpg_h: The miles per gallon fuel efficiency rating for city and highway driving.\ndrivetrain: The car’s drivetrain which, for this dataset, is either \"rwd\" (Rear Wheel Drive) or \"awd\" (All Wheel Drive).\ntrsmn: An encoding of the transmission type, where the number part is the number of gears. The car could have automatic transmission (\"a\"), manual transmission (\"m\"), an option to switch between both types (\"am\"), or, direct drive (\"dd\")\nctry_origin: The country name for where the vehicle manufacturer is headquartered.\nmsrp: Manufacturer’s suggested retail price in U.S. dollars (USD)."
  },
  {
    "objectID": "reference/data.gtcars.html#details",
    "href": "reference/data.gtcars.html#details",
    "title": "data.gtcars",
    "section": "",
    "text": "This is a dataset with 47 rows and 15 columns.\n\nmfr: `The name of the car manufacturer.\nmodel: The car’s model name.\nyear: The car’s model year.\ntrim: A short description of the car model’s trim.\nbdy_style: An identifier of the car’s body style, which is either \"coupe\", \"convertible\", \"sedan\", or \"hatchback\".\nhp, hp_rpm: The car’s horsepower and the associated RPM level.\ntrq, trq_rpm: The car’s torque and the associated RPM level.\nmpg_c, mpg_h: The miles per gallon fuel efficiency rating for city and highway driving.\ndrivetrain: The car’s drivetrain which, for this dataset, is either \"rwd\" (Rear Wheel Drive) or \"awd\" (All Wheel Drive).\ntrsmn: An encoding of the transmission type, where the number part is the number of gears. The car could have automatic transmission (\"a\"), manual transmission (\"m\"), an option to switch between both types (\"am\"), or, direct drive (\"dd\")\nctry_origin: The country name for where the vehicle manufacturer is headquartered.\nmsrp: Manufacturer’s suggested retail price in U.S. dollars (USD)."
  },
  {
    "objectID": "reference/GT.fmt_time.html",
    "href": "reference/GT.fmt_time.html",
    "title": "GT.fmt_time",
    "section": "",
    "text": "GT.fmt_time(self, columns=None, rows=None, time_style='iso', pattern='{x}', locale=None)\nFormat values as times.\nFormat input values to time values using one of 5 preset time styles. Input can be in the form of time values, or strings in the ISO 8601 forms of HH:MM:SS or YYYY-MM-DD HH:MM:SS."
  },
  {
    "objectID": "reference/GT.fmt_time.html#parameters",
    "href": "reference/GT.fmt_time.html#parameters",
    "title": "GT.fmt_time",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone\n\n\ntime_style\ngreat_tables._formats.TimeStyle\nThe time style to use. By default this is the short name \"iso\" which corresponds to how times are formatted within ISO 8601 datetime values. There are 5 time styles in total and their short names can be viewed using info_time_style().\n'iso'\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/GT.fmt_time.html#formatting-with-the-time_style-argument",
    "href": "reference/GT.fmt_time.html#formatting-with-the-time_style-argument",
    "title": "GT.fmt_time",
    "section": "Formatting With The Time_Style Argument",
    "text": "Formatting With The Time_Style Argument\nWe need to supply a preset time style to the time_style argument. The time styles are numerous and can handle localization to any supported locale. The following table provides a listing of all time styles and their output values (corresponding to an input time of 14:35:00).\n\n\n\n\nTime Style\nOutput\nNotes\n\n\n\n\n1\n\"iso\"\n\"14:35:00\"\nISO 8601, 24h\n\n\n2\n\"iso-short\"\n\"14:35\"\nISO 8601, 24h\n\n\n3\n\"h_m_s_p\"\n\"2:35:00 PM\"\n12h\n\n\n4\n\"h_m_p\"\n\"2:35 PM\"\n12h\n\n\n5\n\"h_p\"\n\"2 PM\"\n12h\n\n\n\nWe can use the info_time_style() function within the console to view a similar table of time styles with example output."
  },
  {
    "objectID": "reference/GT.fmt_time.html#returns",
    "href": "reference/GT.fmt_time.html#returns",
    "title": "GT.fmt_time",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.fmt_time.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_time.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_time",
    "section": "Adapting Output To A Specific Locale",
    "text": "Adapting Output To A Specific Locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). Note that a locale value provided here will override any global locale setting performed in GT()’s own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_time.html#examples",
    "href": "reference/GT.fmt_time.html#examples",
    "title": "GT.fmt_time",
    "section": "Examples",
    "text": "Examples\nLet’s use the exibble dataset to create a simple, two-column table (keeping only the date and time columns). With the fmt_time() method, we’ll format the time column to display times formatted with the \"h_m_s_p\" time style.\n\nimport great_tables as gt\n\nexibble_mini = gt.data.exibble[[\"date\", \"time\"]]\n\ngt.GT(exibble_mini).fmt_time(columns=\"time\", time_style=\"h_m_s_p\")\n\n\n\n\n\n\ndate\ntime\n\n\n  2015-01-15\n  1:35:00 PM\n\n\n  2015-02-15\n  2:40:00 PM\n\n\n  2015-03-15\n  3:45:00 PM\n\n\n  2015-04-15\n  4:50:00 PM\n\n\n  2015-05-15\n  5:55:00 PM\n\n\n  2015-06-15\n  \n\n\n  \n  7:10:00 PM\n\n\n  2015-08-15\n  8:20:00 PM"
  },
  {
    "objectID": "reference/GT.fmt_time.html#see-also",
    "href": "reference/GT.fmt_time.html#see-also",
    "title": "GT.fmt_time",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_time(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/vals.fmt_currency.html",
    "href": "reference/vals.fmt_currency.html",
    "title": "vals.fmt_currency",
    "section": "",
    "text": "vals.fmt_currency(x, currency=None, use_subunits=True, decimals=None, drop_trailing_dec_mark=True, use_seps=True, scale_by=1, pattern='{x}', sep_mark=',', dec_mark='.', force_sign=False, placement='left', incl_space=False, locale=None)\nFormat values as currencies.\nWith numeric values, we can perform currency-based formatting with the val_fmt_currency() function. This supports both automatic formatting with a three-letter currency code. We have fine control over the conversion from numeric values to currency values, where we could take advantage of the following options:\n\nthe currency: providing a currency code or common currency name will procure the correct currency symbol and number of currency subunits\ncurrency symbol placement: the currency symbol can be placed before or after the values\ndecimals/subunits: choice of the number of decimal places, and a choice of the decimal symbol, and an option on whether to include or exclude the currency subunits (the decimal portion)\ndigit grouping separators: options to enable/disable digit separators and provide a choice of separator symbol\nscaling: we can choose to scale targeted values by a multiplier value\npattern: option to use a text pattern for decoration of the formatted currency values\nlocale-based formatting: providing a locale ID will result in currency formatting specific to the chosen locale; it will also retrieve the locale’s currency if none is explicitly given\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ncurrency\ntyping.Union[str, None]\nThe currency to use for the numeric value. This input can be supplied as a 3-letter currency code (e.g., \"USD\" for U.S. Dollars, \"EUR\" for the Euro currency).\nNone\n\n\nuse_subunits\nbool\nAn option for whether the subunits portion of a currency value should be displayed. For example, with an input value of 273.81, the default formatting will produce \"$273.81\". Removing the subunits (with use_subunits = False) will give us \"$273\".\nTrue\n\n\ndecimals\nint\nThe decimals values corresponds to the exact number of decimal places to use. This value is optional as a currency has an intrinsic number of decimal places (i.e., the subunits). A value such as 2.34 can, for example, be formatted with 0 decimal places and if the currency used is \"USD\" it would result in \"$2\". With 4 decimal places, the formatted value becomes \"$2.3400\".\nNone\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\nscale_by\nfloat\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n1\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nplacement\nstr\nThe placement of the currency symbol. This can be either be \"left\" (as in \"$450\") or \"right\" (which yields \"450$\").\n'left'\n\n\nincl_space\nbool\nAn option for whether to include a space between the value and the currency symbol. The default is to not introduce a space character.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_currency.html#parameters",
    "href": "reference/vals.fmt_currency.html#parameters",
    "title": "vals.fmt_currency",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ncurrency\ntyping.Union[str, None]\nThe currency to use for the numeric value. This input can be supplied as a 3-letter currency code (e.g., \"USD\" for U.S. Dollars, \"EUR\" for the Euro currency).\nNone\n\n\nuse_subunits\nbool\nAn option for whether the subunits portion of a currency value should be displayed. For example, with an input value of 273.81, the default formatting will produce \"$273.81\". Removing the subunits (with use_subunits = False) will give us \"$273\".\nTrue\n\n\ndecimals\nint\nThe decimals values corresponds to the exact number of decimal places to use. This value is optional as a currency has an intrinsic number of decimal places (i.e., the subunits). A value such as 2.34 can, for example, be formatted with 0 decimal places and if the currency used is \"USD\" it would result in \"$2\". With 4 decimal places, the formatted value becomes \"$2.3400\".\nNone\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\nscale_by\nfloat\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n1\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nplacement\nstr\nThe placement of the currency symbol. This can be either be \"left\" (as in \"$450\") or \"right\" (which yields \"450$\").\n'left'\n\n\nincl_space\nbool\nAn option for whether to include a space between the value and the currency symbol. The default is to not introduce a space character.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/vals.fmt_currency.html#returns",
    "href": "reference/vals.fmt_currency.html#returns",
    "title": "vals.fmt_currency",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_number.html",
    "href": "reference/vals.fmt_number.html",
    "title": "vals.fmt_number",
    "section": "",
    "text": "vals.fmt_number(x, decimals=2, n_sigfig=None, drop_trailing_zeros=False, drop_trailing_dec_mark=True, use_seps=True, scale_by=1, compact=False, pattern='{x}', sep_mark=',', dec_mark='.', force_sign=False, locale=None)\nFormat numeric values.\nWith numeric values in a list, we can perform number-based formatting so that the values are rendered with some level of precision. The following major options are available:\n\ndecimals: choice of the number of decimal places, option to drop trailing zeros, and a choice of the decimal symbol\ndigit grouping separators: options to enable/disable digit separators and provide a choice of separator symbol\nscaling: we can choose to scale targeted values by a multiplier value\nlarge-number suffixing: larger figures (thousands, millions, etc.) can be autoscaled and decorated with the appropriate suffixes\npattern: option to use a text pattern for decoration of the formatted values\nlocale-based formatting: providing a locale ID will result in number formatting specific to the chosen locale\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ndecimals\nint\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True. If you always need decimals = 0, the fmt_integer() method should be considered.\n2\n\n\nn_sigfig\ntyping.Optional[int]\nA option to format numbers to n significant figures. By default, this is None and thus number values will be formatted according to the number of decimal places set via decimals. If opting to format according to the rules of significant figures, n_sigfig must be a number greater than or equal to 1. Any values passed to the decimals and drop_trailing_zeros arguments will be ignored.\nNone\n\n\ndrop_trailing_zeros\nbool\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\nFalse\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\nscale_by\nfloat\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n1\n\n\ncompact\nbool\nA boolean value that allows for compact formatting of numeric values. Values will be scaled and decorated with the appropriate suffixes (e.g., 1230 becomes 1.23K, and 1230000 becomes 1.23M). The compact option is False by default.\nFalse\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_number.html#parameters",
    "href": "reference/vals.fmt_number.html#parameters",
    "title": "vals.fmt_number",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ndecimals\nint\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True. If you always need decimals = 0, the fmt_integer() method should be considered.\n2\n\n\nn_sigfig\ntyping.Optional[int]\nA option to format numbers to n significant figures. By default, this is None and thus number values will be formatted according to the number of decimal places set via decimals. If opting to format according to the rules of significant figures, n_sigfig must be a number greater than or equal to 1. Any values passed to the decimals and drop_trailing_zeros arguments will be ignored.\nNone\n\n\ndrop_trailing_zeros\nbool\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\nFalse\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\nscale_by\nfloat\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n1\n\n\ncompact\nbool\nA boolean value that allows for compact formatting of numeric values. Values will be scaled and decorated with the appropriate suffixes (e.g., 1230 becomes 1.23K, and 1230000 becomes 1.23M). The compact option is False by default.\nFalse\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/vals.fmt_number.html#returns",
    "href": "reference/vals.fmt_number.html#returns",
    "title": "vals.fmt_number",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/style.fill.html",
    "href": "reference/style.fill.html",
    "title": "style.fill",
    "section": "",
    "text": "style.fill(color)\nA style specification for the background fill of targeted cells.\nThe style.fill() class is to be used with the tab_style() method, which itself allows for the setting of custom styles to one or more cells. Specifically, the call to style.fill() should be bound to the styles argument of tab_style().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolor\nstr\nThe color to use for the cell background fill. This can be any valid CSS color value, such as a hex code, a named color, or an RGB value.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables._styles.CellStyleFill\nA CellStyleFill object, which is used for a styles argument if specifying a cell fill value."
  },
  {
    "objectID": "reference/style.fill.html#parameters",
    "href": "reference/style.fill.html#parameters",
    "title": "style.fill",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ncolor\nstr\nThe color to use for the cell background fill. This can be any valid CSS color value, such as a hex code, a named color, or an RGB value.\nrequired"
  },
  {
    "objectID": "reference/style.fill.html#returns",
    "href": "reference/style.fill.html#returns",
    "title": "style.fill",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ngreat_tables._styles.CellStyleFill\nA CellStyleFill object, which is used for a styles argument if specifying a cell fill value."
  },
  {
    "objectID": "reference/vals.fmt_roman.html",
    "href": "reference/vals.fmt_roman.html",
    "title": "vals.fmt_roman",
    "section": "",
    "text": "vals.fmt_roman(x, case='upper', pattern='{x}')\nFormat values as Roman numerals.\nWith numeric values we can transform those to Roman numerals, rounding values as necessary.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ncase\nstr\nShould Roman numerals should be rendered as uppercase (\"upper\") or lowercase (\"lower\") letters? By default, this is set to \"upper\".\n'upper'\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_roman.html#parameters",
    "href": "reference/vals.fmt_roman.html#parameters",
    "title": "vals.fmt_roman",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ncase\nstr\nShould Roman numerals should be rendered as uppercase (\"upper\") or lowercase (\"lower\") letters? By default, this is set to \"upper\".\n'upper'\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'"
  },
  {
    "objectID": "reference/vals.fmt_roman.html#returns",
    "href": "reference/vals.fmt_roman.html#returns",
    "title": "vals.fmt_roman",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/data.sp500.html",
    "href": "reference/data.sp500.html",
    "title": "data.sp500",
    "section": "",
    "text": "data.sp500\nDaily S&P 500 Index data from 1950 to 2015.\nThis dataset provides daily price indicators for the S&P 500 index from the beginning of 1950 to the end of 2015. The index includes 500 leading companies and captures about 80 percent coverage of available market capitalization.\n\n\nThis is a dataset with 16,607 rows and 7 columns.\ndate: The date expressed as Date values. open, high, low, close: The day’s opening, high, low, and closing prices in USD. The close price is adjusted for splits. volume: The number of trades for the given date. adj_close: The close price adjusted for both dividends and splits."
  },
  {
    "objectID": "reference/data.sp500.html#details",
    "href": "reference/data.sp500.html#details",
    "title": "data.sp500",
    "section": "",
    "text": "This is a dataset with 16,607 rows and 7 columns.\ndate: The date expressed as Date values. open, high, low, close: The day’s opening, high, low, and closing prices in USD. The close price is adjusted for splits. volume: The number of trades for the given date. adj_close: The close price adjusted for both dividends and splits."
  },
  {
    "objectID": "reference/vals.fmt_bytes.html",
    "href": "reference/vals.fmt_bytes.html",
    "title": "vals.fmt_bytes",
    "section": "",
    "text": "vals.fmt_bytes(x, standard='decimal', decimals=1, n_sigfig=None, drop_trailing_zeros=True, drop_trailing_dec_mark=True, use_seps=True, pattern='{x}', sep_mark=',', dec_mark='.', force_sign=False, incl_space=True, locale=None)\nFormat values as bytes.\nWith numeric values in a list, we can transform those to values of bytes with human readable units. The val_fmt_bytes() function allows for the formatting of byte sizes to either of two common representations: (1) with decimal units (powers of 1000, examples being \"kB\" and \"MB\"), and (2) with binary units (powers of 1024, examples being \"KiB\" and \"MiB\"). It is assumed the input numeric values represent the number of bytes and automatic truncation of values will occur. The numeric values will be scaled to be in the range of 1 to &lt;1000 and then decorated with the correct unit symbol according to the standard chosen. For more control over the formatting of byte sizes, we can use the following options:\n\ndecimals: choice of the number of decimal places, option to drop trailing zeros, and a choice of the decimal symbol\ndigit grouping separators: options to enable/disable digit separators and provide a choice of separator symbol\npattern: option to use a text pattern for decoration of the formatted values\nlocale-based formatting: providing a locale ID will result in number formatting specific to the chosen locale\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\nstandard\nstr\nThe form of expressing large byte sizes is divided between: (1) decimal units (powers of 1000; e.g., \"kB\" and \"MB\"), and (2) binary units (powers of 1024; e.g., \"KiB\" and \"MiB\"). The default is to use decimal units with the \"decimal\" option. The alternative is to use binary units with the \"binary\" option.\n'decimal'\n\n\ndecimals\nint\nThis corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True.\n1\n\n\ndrop_trailing_zeros\nbool\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\nTrue\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nincl_space\nbool\nAn option for whether to include a space between the value and the currency symbol. The default is to not introduce a space character.\nTrue\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_bytes.html#parameters",
    "href": "reference/vals.fmt_bytes.html#parameters",
    "title": "vals.fmt_bytes",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\nstandard\nstr\nThe form of expressing large byte sizes is divided between: (1) decimal units (powers of 1000; e.g., \"kB\" and \"MB\"), and (2) binary units (powers of 1024; e.g., \"KiB\" and \"MiB\"). The default is to use decimal units with the \"decimal\" option. The alternative is to use binary units with the \"binary\" option.\n'decimal'\n\n\ndecimals\nint\nThis corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True.\n1\n\n\ndrop_trailing_zeros\nbool\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\nTrue\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nincl_space\nbool\nAn option for whether to include a space between the value and the currency symbol. The default is to not introduce a space character.\nTrue\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/vals.fmt_bytes.html#returns",
    "href": "reference/vals.fmt_bytes.html#returns",
    "title": "vals.fmt_bytes",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/GT.tab_spanner.html",
    "href": "reference/GT.tab_spanner.html",
    "title": "GT.tab_spanner",
    "section": "",
    "text": "GT.tab_spanner(data, label, columns=None, spanners=None, level=None, id=None, gather=True, replace=False)\nInsert a spanner in the column labels part of a gt table.\nThis part of the table contains, at a minimum, column labels and, optionally, an unlimited number of levels for spanners. A spanner will occupy space over any number of contiguous column labels and it will have an associated label and ID value. This function allows for mapping to be defined by column names, existing spanner ID values, or a mixture of both.\nThe spanners are placed in the order of calling tab_spanner() so if a later call uses the same columns in its definition (or even a subset) as the first invocation, the second spanner will be overlaid atop the first. Options exist for forcibly inserting a spanner underneath others (with level as space permits) and with replace, which allows for full or partial spanner replacement."
  },
  {
    "objectID": "reference/GT.tab_spanner.html#parameters",
    "href": "reference/GT.tab_spanner.html#parameters",
    "title": "GT.tab_spanner",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlabel\nstr\nThe text to use for the spanner label. We can optionally use the [md()] and [html()] helpers to style the text as Markdown or to retain HTML elements in the text.\nrequired\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nspanners\ntyping.Union[list[str], str, None]\nThe spanners that should be spanned over, should they already be defined. One or more spanner ID values (in quotes) can be supplied here. This argument works in tandem with the columns argument.\nNone\n\n\nlevel\ntyping.Optional[int]\nAn explicit level to which the spanner should be placed. If not provided, great_tables will choose the level based on the inputs provided within columns and spanners, placing the spanner label where it will fit. The first spanner level (right above the column labels) is 0.\nNone\n\n\nid\ntyping.Optional[str]\nThe ID for the spanner. When accessing a spanner through the spanners argument of tab_spanner() or cells_column_spanners() (when using tab_style() or tab_footnote()) the id value is used as the reference (and not the label). If an id is not explicitly provided here, it will be taken from the label value. It is advisable to set an explicit id value if you plan to access this cell in a later function call and the label text is complicated (e.g., contains markup, is lengthy, or both). Finally, when providing an id value you must ensure that it is unique across all ID values set for spanner labels (the function will stop if id isn’t unique).\nNone\n\n\ngather\nbool\nAn option to move the specified columns such that they are unified under the spanner. Ordering of the moved-into-place columns will be preserved in all cases. By default, this is set to True.\nTrue\n\n\nreplace\nbool\nShould new spanners be allowed to partially or fully replace existing spanners? (This is a possibility if setting spanners at an already populated level.) By default, this is set to False and an error will occur if some replacement is attempted.\nFalse"
  },
  {
    "objectID": "reference/GT.tab_spanner.html#returns",
    "href": "reference/GT.tab_spanner.html#returns",
    "title": "GT.tab_spanner",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.tab_spanner.html#examples",
    "href": "reference/GT.tab_spanner.html#examples",
    "title": "GT.tab_spanner",
    "section": "Examples",
    "text": "Examples\nLet’s create a table using a small portion of the gtcars dataset. Over several columns (hp, hp_rpm, trq, trq_rpm, mpg_c, mpg_h) we’ll use tab_spanner() to add a spanner with the label \"performance\". This effectively groups together several columns related to car performance under a unifying label.\n\nimport great_tables as gt\n\ncolnames = [\"model\", \"hp\", \"hp_rpm\", \"trq\", \"trq_rpm\", \"mpg_c\", \"mpg_h\"]\ngtcars_mini = gt.data.gtcars[colnames].head(10)\n\n(\n    gt.GT(gtcars_mini)\n    .tab_spanner(\n        label=\"performance\",\n        columns=[\"hp\", \"hp_rpm\", \"trq\", \"trq_rpm\", \"mpg_c\", \"mpg_h\"]\n    )\n)\n\n\n\n\n\n\n\n  model\n  \n    performance\n  \n\n\n  hp\n  hp_rpm\n  trq\n  trq_rpm\n  mpg_c\n  mpg_h\n\n\n\n  GT\n  647.0\n  6250.0\n  550.0\n  5900.0\n  11.0\n  18.0\n\n\n  458 Speciale\n  597.0\n  9000.0\n  398.0\n  6000.0\n  13.0\n  17.0\n\n\n  458 Spider\n  562.0\n  9000.0\n  398.0\n  6000.0\n  13.0\n  17.0\n\n\n  458 Italia\n  562.0\n  9000.0\n  398.0\n  6000.0\n  13.0\n  17.0\n\n\n  488 GTB\n  661.0\n  8000.0\n  561.0\n  3000.0\n  15.0\n  22.0\n\n\n  California\n  553.0\n  7500.0\n  557.0\n  4750.0\n  16.0\n  23.0\n\n\n  GTC4Lusso\n  680.0\n  8250.0\n  514.0\n  5750.0\n  12.0\n  17.0\n\n\n  FF\n  652.0\n  8000.0\n  504.0\n  6000.0\n  11.0\n  16.0\n\n\n  F12Berlinetta\n  731.0\n  8250.0\n  509.0\n  6000.0\n  11.0\n  16.0\n\n\n  LaFerrari\n  949.0\n  9000.0\n  664.0\n  6750.0\n  12.0\n  16.0\n\n\n\n\n\n\n\n        \n\n\nWe can also use Markdown formatting for the spanner label. In this example, we’ll use gt.md(\"*Performance*\") to make the label italicized.\n\n(\n    gt.GT(gtcars_mini)\n    .tab_spanner(\n        label=gt.md(\"*Performance*\"),\n        columns=[\"hp\", \"hp_rpm\", \"trq\", \"trq_rpm\", \"mpg_c\", \"mpg_h\"]\n    )\n)\n\n\n\n\n\n\n\n  model\n  \n    Performance\n  \n\n\n  hp\n  hp_rpm\n  trq\n  trq_rpm\n  mpg_c\n  mpg_h\n\n\n\n  GT\n  647.0\n  6250.0\n  550.0\n  5900.0\n  11.0\n  18.0\n\n\n  458 Speciale\n  597.0\n  9000.0\n  398.0\n  6000.0\n  13.0\n  17.0\n\n\n  458 Spider\n  562.0\n  9000.0\n  398.0\n  6000.0\n  13.0\n  17.0\n\n\n  458 Italia\n  562.0\n  9000.0\n  398.0\n  6000.0\n  13.0\n  17.0\n\n\n  488 GTB\n  661.0\n  8000.0\n  561.0\n  3000.0\n  15.0\n  22.0\n\n\n  California\n  553.0\n  7500.0\n  557.0\n  4750.0\n  16.0\n  23.0\n\n\n  GTC4Lusso\n  680.0\n  8250.0\n  514.0\n  5750.0\n  12.0\n  17.0\n\n\n  FF\n  652.0\n  8000.0\n  504.0\n  6000.0\n  11.0\n  16.0\n\n\n  F12Berlinetta\n  731.0\n  8250.0\n  509.0\n  6000.0\n  11.0\n  16.0\n\n\n  LaFerrari\n  949.0\n  9000.0\n  664.0\n  6750.0\n  12.0\n  16.0"
  },
  {
    "objectID": "reference/GT.fmt_scientific.html",
    "href": "reference/GT.fmt_scientific.html",
    "title": "GT.fmt_scientific",
    "section": "",
    "text": "GT.fmt_scientific(self, columns=None, rows=None, decimals=2, n_sigfig=None, drop_trailing_zeros=False, drop_trailing_dec_mark=True, scale_by=1, exp_style='x10n', pattern='{x}', sep_mark=',', dec_mark='.', force_sign_m=False, force_sign_n=False, locale=None)\nFormat values to scientific notation.\nWith numeric values in a gt table, we can perform formatting so that the targeted values are rendered in scientific notation, where extremely large or very small numbers can be expressed in a more practical fashion. Here, numbers are written in the form of a mantissa (m) and an exponent (n) with the construction m x 10^n or mEn. The mantissa component is a number between 1 and 10. For instance, 2.5 x 10^9 can be used to represent the value 2,500,000,000 in scientific notation. In a similar way, 0.00000012 can be expressed as 1.2 x 10^-7. Due to its ability to describe numbers more succinctly and its ease of calculation, scientific notation is widely employed in scientific and technical domains.\nWe have fine control over the formatting task, with the following options:"
  },
  {
    "objectID": "reference/GT.fmt_scientific.html#parameters",
    "href": "reference/GT.fmt_scientific.html#parameters",
    "title": "GT.fmt_scientific",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone\n\n\ndecimals\nint\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True. If you always need decimals = 0, the fmt_integer() method should be considered.\n2\n\n\nn_sigfig\ntyping.Optional[int]\nA option to format numbers to n significant figures. By default, this is None and thus number values will be formatted according to the number of decimal places set via decimals. If opting to format according to the rules of significant figures, n_sigfig must be a number greater than or equal to 1. Any values passed to the decimals and drop_trailing_zeros arguments will be ignored.\nNone\n\n\ndrop_trailing_zeros\nbool\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\nFalse\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nscale_by\nfloat\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n1\n\n\nexp_style\nstr\nStyle of formatting to use for the scientific notation formatting. By default this is \"x10n\" but other options include using a single letter (e.g., \"e\", \"E\", etc.), a letter followed by a \"1\" to signal a minimum digit width of one, or \"low-ten\" for using a stylized \"10\" marker.\n'x10n'\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign_m\nbool\nShould the plus sign be shown for positive values of the mantissa (first component)? This would effectively show a sign for all values except zero on the first numeric component of the notation. If so, use True (the default for this is False), where only negative numbers will display a sign.\nFalse\n\n\nforce_sign_n\nbool\nShould the plus sign be shown for positive values of the exponent (second component)? This would effectively show a sign for all values except zero on the second numeric component of the notation. If so, use True (the default for this is False), where only negative numbers will display a sign.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/GT.fmt_scientific.html#returns",
    "href": "reference/GT.fmt_scientific.html#returns",
    "title": "GT.fmt_scientific",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.fmt_scientific.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_scientific.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_scientific",
    "section": "Adapting Output To A Specific Locale",
    "text": "Adapting Output To A Specific Locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). The use of a valid locale ID here means separator and decimal marks will be correct for the given locale. Should any values be provided in sep_mark or dec_mark, they will be overridden by the locale’s preferred values.\nNote that a locale value provided here will override any global locale setting performed in GT()’s own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_scientific.html#examples",
    "href": "reference/GT.fmt_scientific.html#examples",
    "title": "GT.fmt_scientific",
    "section": "Examples",
    "text": "Examples\nFor this example, we’ll use the exibble dataset as the input table. With the fmt_scientific() method, we’ll format the num column to contain values in scientific formatting.\n\nimport great_tables as gt\n\ngt.GT(gt.data.exibble).fmt_scientific(columns=\"num\")\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\nrow\ngroup\n\n\n  1.11 × 10−1\n  apricot\n  one\n  2015-01-15\n  13:35\n  2018-01-01 02:22\n  49.95\n  row_1\n  grp_a\n\n\n  2.22\n  banana\n  two\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  17.95\n  row_2\n  grp_a\n\n\n  3.33 × 101\n  coconut\n  three\n  2015-03-15\n  15:45\n  2018-03-03 03:44\n  1.39\n  row_3\n  grp_a\n\n\n  4.44 × 102\n  durian\n  four\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  65100.0\n  row_4\n  grp_a\n\n\n  5.55 × 103\n  \n  five\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  1325.81\n  row_5\n  grp_b\n\n\n  \n  fig\n  six\n  2015-06-15\n  \n  2018-06-06 16:11\n  13.255\n  row_6\n  grp_b\n\n\n  7.77 × 105\n  grapefruit\n  seven\n  \n  19:10\n  2018-07-07 05:22\n  \n  row_7\n  grp_b\n\n\n  8.88 × 106\n  honeydew\n  eight\n  2015-08-15\n  20:20\n  \n  0.44\n  row_8\n  grp_b"
  },
  {
    "objectID": "reference/GT.fmt_scientific.html#see-also",
    "href": "reference/GT.fmt_scientific.html#see-also",
    "title": "GT.fmt_scientific",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_scientific(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/GT.fmt_date.html",
    "href": "reference/GT.fmt_date.html",
    "title": "GT.fmt_date",
    "section": "",
    "text": "GT.fmt_date(self, columns=None, rows=None, date_style='iso', pattern='{x}', locale=None)\nFormat values as dates.\nFormat input values to time values using one of 17 preset date styles. Input can be in the form of date type or as a ISO-8601 string (in the form of YYYY-MM-DD HH:MM:SS or YYYY-MM-DD)."
  },
  {
    "objectID": "reference/GT.fmt_date.html#parameters",
    "href": "reference/GT.fmt_date.html#parameters",
    "title": "GT.fmt_date",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone\n\n\ndate_style\ngreat_tables._formats.DateStyle\nThe date style to use. By default this is the short name \"iso\" which corresponds to ISO 8601 date formatting. There are 41 date styles in total and their short names can be viewed using info_date_style().\n'iso'\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/GT.fmt_date.html#formatting-with-the-date_style-argument",
    "href": "reference/GT.fmt_date.html#formatting-with-the-date_style-argument",
    "title": "GT.fmt_date",
    "section": "Formatting With The Date_Style Argument",
    "text": "Formatting With The Date_Style Argument\nWe need to supply a preset date style to the date_style argument. The date styles are numerous and can handle localization to any supported locale. The following table provides a listing of all date styles and their output values (corresponding to an input date of 2000-02-29).\n\n\n\n\nDate Style\nOutput\n\n\n\n\n1\n\"iso\"\n\"2000-02-29\"\n\n\n2\n\"wday_month_day_year\"\n\"Tuesday, February 29, 2000\"\n\n\n3\n\"wd_m_day_year\"\n\"Tue, Feb 29, 2000\"\n\n\n4\n\"wday_day_month_year\"\n\"Tuesday 29 February 2000\"\n\n\n5\n\"month_day_year\"\n\"February 29, 2000\"\n\n\n6\n\"m_day_year\"\n\"Feb 29, 2000\"\n\n\n7\n\"day_m_year\"\n\"29 Feb 2000\"\n\n\n8\n\"day_month_year\"\n\"29 February 2000\"\n\n\n9\n\"day_month\"\n\"29 February\"\n\n\n10\n\"day_m\"\n\"29 Feb\"\n\n\n11\n\"year\"\n\"2000\"\n\n\n12\n\"month\"\n\"February\"\n\n\n13\n\"day\"\n\"29\"\n\n\n14\n\"year.mn.day\"\n\"2000/02/29\"\n\n\n15\n\"y.mn.day\"\n\"00/02/29\"\n\n\n16\n\"year_week\"\n\"2000-W09\"\n\n\n17\n\"year_quarter\"\n\"2000-Q1\"\n\n\n\nWe can use the info_date_style() function within the console to view a similar table of date styles with example output."
  },
  {
    "objectID": "reference/GT.fmt_date.html#returns",
    "href": "reference/GT.fmt_date.html#returns",
    "title": "GT.fmt_date",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.fmt_date.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_date.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_date",
    "section": "Adapting Output To A Specific Locale",
    "text": "Adapting Output To A Specific Locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). Note that a locale value provided here will override any global locale setting performed in GT()’s own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_date.html#examples",
    "href": "reference/GT.fmt_date.html#examples",
    "title": "GT.fmt_date",
    "section": "Examples",
    "text": "Examples\nLet’s use the exibble dataset to create a simple, two-column table (keeping only the date and time columns). With the fmt_date() method, we’ll format the date column to display dates formatted with the \"month_day_year\" date style.\n\nimport great_tables as gt\n\nexibble_mini = gt.data.exibble[[\"date\", \"time\"]]\n\ngt.GT(exibble_mini).fmt_date(columns=\"date\", date_style=\"month_day_year\")\n\n\n\n\n\n\ndate\ntime\n\n\n  January 15, 2015\n  13:35\n\n\n  February 15, 2015\n  14:40\n\n\n  March 15, 2015\n  15:45\n\n\n  April 15, 2015\n  16:50\n\n\n  May 15, 2015\n  17:55\n\n\n  June 15, 2015\n  \n\n\n  \n  19:10\n\n\n  August 15, 2015\n  20:20"
  },
  {
    "objectID": "reference/GT.fmt_date.html#see-also",
    "href": "reference/GT.fmt_date.html#see-also",
    "title": "GT.fmt_date",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_date(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/GT.cols_move.html",
    "href": "reference/GT.cols_move.html",
    "title": "GT.cols_move",
    "section": "",
    "text": "GT.cols_move(data, columns, after)\nMove one or more columns.\nOn those occasions where you need to move columns this way or that way, we can make use of the cols_move() method. While it’s true that the movement of columns can be done upstream of great_tables, it is much easier and less error prone to use the function provided here. The movement procedure here takes one or more specified columns (in the columns argument) and places them to the right of a different column (the after argument). The ordering of the columns to be moved is preserved, as is the ordering of all other columns in the table.\nThe columns supplied in columns must all exist in the table and none of them can be in the after argument. The after column must also exist and only one column should be provided here. If you need to place one more or columns at the beginning of the column series, the cols_move_to_start() method should be used. Similarly, if those columns to move should be placed at the end of the column series then use cols_move_to_end()."
  },
  {
    "objectID": "reference/GT.cols_move.html#parameters",
    "href": "reference/GT.cols_move.html#parameters",
    "title": "GT.cols_move",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[typing.List[str]]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nrequired\n\n\nafter\nstr\nThe column after which the columns should be placed. This can be any column name that exists in the table.\nrequired"
  },
  {
    "objectID": "reference/GT.cols_move.html#returns",
    "href": "reference/GT.cols_move.html#returns",
    "title": "GT.cols_move",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.cols_move.html#examples",
    "href": "reference/GT.cols_move.html#examples",
    "title": "GT.cols_move",
    "section": "Examples",
    "text": "Examples\nLet’s use the countrypops dataset to create a table. We’ll choose to position the population column after the country_name column by using the cols_move() method.\n\nimport great_tables as gt\nfrom great_tables.data import countrypops\n\ncountrypops_mini = countrypops.loc[countrypops[\"country_name\"] == \"Japan\"][\n    [\"country_name\", \"year\", \"population\"]\n].tail(5)\n\n(\n    gt.GT(countrypops_mini)\n    .cols_move(\n        columns=\"population\",\n        after=\"country_name\"\n    )\n)\n\n\n\n\n\n\ncountry_name\npopulation\nyear\n\n\n  Japan\n  126811000\n  2018\n\n\n  Japan\n  126633000\n  2019\n\n\n  Japan\n  126261000\n  2020\n\n\n  Japan\n  125681593\n  2021\n\n\n  Japan\n  125124989\n  2022"
  },
  {
    "objectID": "reference/GT.fmt.html",
    "href": "reference/GT.fmt.html",
    "title": "GT.fmt",
    "section": "",
    "text": "GT.fmt(self, fns, columns=None, rows=None)\nSet a column format with a formatter function.\nThe fmt() method provides a way to execute custom formatting functionality with raw data values in a way that can consider all output contexts.\nAlong with the columns and rows arguments that provide some precision in targeting data cells, the fns argument allows you to define one or more functions for manipulating the raw data.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfns\ntyping.Union[great_tables._gt_data.FormatFn, great_tables._gt_data.FormatFns]\nEither a single formatting function or a named list of functions.\nrequired\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.fmt.html#parameters",
    "href": "reference/GT.fmt.html#parameters",
    "title": "GT.fmt",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nfns\ntyping.Union[great_tables._gt_data.FormatFn, great_tables._gt_data.FormatFns]\nEither a single formatting function or a named list of functions.\nrequired\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone"
  },
  {
    "objectID": "reference/GT.fmt.html#returns",
    "href": "reference/GT.fmt.html#returns",
    "title": "GT.fmt",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.fmt_bytes.html",
    "href": "reference/GT.fmt_bytes.html",
    "title": "GT.fmt_bytes",
    "section": "",
    "text": "GT.fmt_bytes(self, columns=None, rows=None, standard='decimal', decimals=1, n_sigfig=None, drop_trailing_zeros=True, drop_trailing_dec_mark=True, use_seps=True, pattern='{x}', sep_mark=',', dec_mark='.', force_sign=False, incl_space=True, locale=None)\nFormat values as bytes.\nWith numeric values in a table, we can transform those to values of bytes with human readable units. The fmt_bytes() method allows for the formatting of byte sizes to either of two common representations: (1) with decimal units (powers of 1000, examples being \"kB\" and \"MB\"), and (2) with binary units (powers of 1024, examples being \"KiB\" and \"MiB\"). It is assumed the input numeric values represent the number of bytes and automatic truncation of values will occur. The numeric values will be scaled to be in the range of 1 to &lt;1000 and then decorated with the correct unit symbol according to the standard chosen. For more control over the formatting of byte sizes, we can use the following options:"
  },
  {
    "objectID": "reference/GT.fmt_bytes.html#parameters",
    "href": "reference/GT.fmt_bytes.html#parameters",
    "title": "GT.fmt_bytes",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone\n\n\nstandard\nstr\nThe form of expressing large byte sizes is divided between: (1) decimal units (powers of 1000; e.g., \"kB\" and \"MB\"), and (2) binary units (powers of 1024; e.g., \"KiB\" and \"MiB\"). The default is to use decimal units with the \"decimal\" option. The alternative is to use binary units with the \"binary\" option.\n'decimal'\n\n\ndecimals\nint\nThis corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True.\n1\n\n\ndrop_trailing_zeros\nbool\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\nTrue\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nincl_space\nbool\nAn option for whether to include a space between the value and the currency symbol. The default is to not introduce a space character.\nTrue\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/GT.fmt_bytes.html#returns",
    "href": "reference/GT.fmt_bytes.html#returns",
    "title": "GT.fmt_bytes",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.fmt_bytes.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_bytes.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_bytes",
    "section": "Adapting Output To A Specific Locale",
    "text": "Adapting Output To A Specific Locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). The use of a valid locale ID here means separator and decimal marks will be correct for the given locale. Should any values be provided in sep_mark or dec_mark, they will be overridden by the locale’s preferred values.\nNote that a locale value provided here will override any global locale setting performed in GT()’s own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_bytes.html#examples",
    "href": "reference/GT.fmt_bytes.html#examples",
    "title": "GT.fmt_bytes",
    "section": "Examples",
    "text": "Examples\nLet’s use a single column from the exibble dataset and create a new table. We’ll format the num column to display as byte sizes in the decimal standard through use of the fmt_bytes() method.\n\nimport great_tables as gt\n\ngt.GT(gt.data.exibble[[\"num\"]]).fmt_bytes(columns=\"num\", standard=\"decimal\")\n\n\n\n\n\n\nnum\n\n\n  0 B\n\n\n  2 B\n\n\n  33 B\n\n\n  444 B\n\n\n  5.5 kB\n\n\n  \n\n\n  777 kB\n\n\n  8.9 MB"
  },
  {
    "objectID": "reference/GT.fmt_bytes.html#see-also",
    "href": "reference/GT.fmt_bytes.html#see-also",
    "title": "GT.fmt_bytes",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_bytes(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "get-started/basic-header.html",
    "href": "get-started/basic-header.html",
    "title": "Header and Footer",
    "section": "",
    "text": "The way that we add parts like the Table Header and footnotes in the Table Footer is to use the tab_*() family of methods. A Table Header is easy to add so let’s see how the previous table looks with a title and a subtitle. We can add this part using the tab_header() method:\n\nfrom great_tables import GT, md, html\nfrom great_tables.data import islands\n\nislands_mini = islands.head(10)\n\n# Make a display table with the `islands_tbl`\n# table; put a heading just above the column labels\n(GT(islands_mini)\n    .tab_header(\ntitle = \"Large Landmasses of the World\",\nsubtitle = \"The top ten largest are presented\"\n    )\n)\n\n\n\n\n\n  \n    Large Landmasses of the World\n  \n  \n    The top ten largest are presented\n  \nname\nsize\n\n\n  Africa\n  11506\n\n\n  Antarctica\n  5500\n\n\n  Asia\n  16988\n\n\n  Australia\n  2968\n\n\n  Axel Heiberg\n  16\n\n\n  Baffin\n  184\n\n\n  Banks\n  23\n\n\n  Borneo\n  280\n\n\n  Britain\n  84\n\n\n  Celebes\n  73\n\n\n\n\n\n\n\n        \n\n\nThe Header table part provides an opportunity to describe the data that’s presented. The subtitle, which functions as a subtitle, is an optional part of the Header. We may also style the title and subtitle using Markdown! We do this by wrapping the values passed to title or subtitle with the md() function. Here is an example with the table data truncated for brevity:\n\n# Make a display table with the `islands_tbl`\n# table; put a heading just above the column labels\ngt_tbl = (GT(islands.head(2))\n    .tab_header(\ntitle = md(\"Large Landmasses of the World\"),\nsubtitle = md(\"The top ten largest are presented\")\n    )\n)\n\ngt_tbl\n\n\n\n\n\n  \n    Large Landmasses of the World\n  \n  \n    The top ten largest are presented\n  \nname\nsize\n\n\n  Africa\n  11506\n\n\n  Antarctica\n  5500\n\n\n\n\n\n\n\n        \n\n\nA source note can be added to the table’s footer through use of the tab_source_note() method. It works in the same way as tab_header() (it also allows for Markdown inputs) except it can be called multiple times—each invocation results in the addition of a source note.\n\n# Display the `islands_tbl` data with a heading and\n# two source notes\n(gt_tbl\n    .tab_source_note(\n        source_note = \"Source: The World Almanac and Book of Facts, 1975, page 406.\"\n    )\n    .tab_source_note(\n        source_note = md(\"Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.\")\n    )\n\n)\n\n\n\n\n\n  \n    Large Landmasses of the World\n  \n  \n    The top ten largest are presented\n  \nname\nsize\n\n\n  Africa\n  11506\n\n\n  Antarctica\n  5500\n\n\n  \n  \n  \n    Source: The World Almanac and Book of Facts, 1975, page 406.\n  \n\n\n  \n    Reference: McNeil, D. R. (1977) Interactive Data Analysis. Wiley.\n  \n\n\n\n\n\n\n        \n\n\n\n🚧 Footnotes are not yet implemented, but footnotes might go here."
  },
  {
    "objectID": "get-started/column-selection.html",
    "href": "get-started/column-selection.html",
    "title": "Column selection",
    "section": "",
    "text": "The columns= argument for functions like .tab_spanner() and .cols_move() can accept a range of arguments. In the above examples, we just passed a list of strings with the exact column names.\nHowever, we can specify columns using any of the following:\nfrom great_tables import GT\nfrom great_tables.data import exibble\n\ngt_ex = GT(exibble)\n\ngt_ex\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\nrow\ngroup\n\n\n  0.1111\n  apricot\n  one\n  2015-01-15\n  13:35\n  2018-01-01 02:22\n  49.95\n  row_1\n  grp_a\n\n\n  2.222\n  banana\n  two\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  17.95\n  row_2\n  grp_a\n\n\n  33.33\n  coconut\n  three\n  2015-03-15\n  15:45\n  2018-03-03 03:44\n  1.39\n  row_3\n  grp_a\n\n\n  444.4\n  durian\n  four\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  65100.0\n  row_4\n  grp_a\n\n\n  5550.0\n  \n  five\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  1325.81\n  row_5\n  grp_b\n\n\n  \n  fig\n  six\n  2015-06-15\n  \n  2018-06-06 16:11\n  13.255\n  row_6\n  grp_b\n\n\n  777000.0\n  grapefruit\n  seven\n  \n  19:10\n  2018-07-07 05:22\n  \n  row_7\n  grp_b\n\n\n  8880000.0\n  honeydew\n  eight\n  2015-08-15\n  20:20\n  \n  0.44\n  row_8\n  grp_b"
  },
  {
    "objectID": "get-started/column-selection.html#string-and-integer-selectors",
    "href": "get-started/column-selection.html#string-and-integer-selectors",
    "title": "Column selection",
    "section": "String and integer selectors",
    "text": "String and integer selectors\nUse a list of strings or integers to select columns by name or position, respectively.\n\ngt_ex.cols_move_to_start([\"date\", 1, -1])\n\n\n\n\n\n\ndate\nchar\ngroup\nnum\nfctr\ntime\ndatetime\ncurrency\nrow\n\n\n  2015-01-15\n  apricot\n  grp_a\n  0.1111\n  one\n  13:35\n  2018-01-01 02:22\n  49.95\n  row_1\n\n\n  2015-02-15\n  banana\n  grp_a\n  2.222\n  two\n  14:40\n  2018-02-02 14:33\n  17.95\n  row_2\n\n\n  2015-03-15\n  coconut\n  grp_a\n  33.33\n  three\n  15:45\n  2018-03-03 03:44\n  1.39\n  row_3\n\n\n  2015-04-15\n  durian\n  grp_a\n  444.4\n  four\n  16:50\n  2018-04-04 15:55\n  65100.0\n  row_4\n\n\n  2015-05-15\n  \n  grp_b\n  5550.0\n  five\n  17:55\n  2018-05-05 04:00\n  1325.81\n  row_5\n\n\n  2015-06-15\n  fig\n  grp_b\n  \n  six\n  \n  2018-06-06 16:11\n  13.255\n  row_6\n\n\n  \n  grapefruit\n  grp_b\n  777000.0\n  seven\n  19:10\n  2018-07-07 05:22\n  \n  row_7\n\n\n  2015-08-15\n  honeydew\n  grp_b\n  8880000.0\n  eight\n  20:20\n  \n  0.44\n  row_8\n\n\n\n\n\n\n\n        \n\n\nNote the code above moved the following columns:\n\nThe string \"date\" matched the column of the same name.\nThe integer 1 matched the second column (similar to list indexing).\nThe integer -1 matched the last column.\n\nMoreover, the order of the list defines the order of selected columns. In this case, \"data\" was the first entry, so it’s the very first column in the new table."
  },
  {
    "objectID": "get-started/column-selection.html#function-selectors",
    "href": "get-started/column-selection.html#function-selectors",
    "title": "Column selection",
    "section": "Function selectors",
    "text": "Function selectors\nA function can be used to select columns. It should take a string and returns True or False.\n\ngt_ex.cols_move_to_start(lambda x: \"c\" in x)\n\n\n\n\n\n\nchar\nfctr\ncurrency\nnum\ndate\ntime\ndatetime\nrow\ngroup\n\n\n  apricot\n  one\n  49.95\n  0.1111\n  2015-01-15\n  13:35\n  2018-01-01 02:22\n  row_1\n  grp_a\n\n\n  banana\n  two\n  17.95\n  2.222\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  row_2\n  grp_a\n\n\n  coconut\n  three\n  1.39\n  33.33\n  2015-03-15\n  15:45\n  2018-03-03 03:44\n  row_3\n  grp_a\n\n\n  durian\n  four\n  65100.0\n  444.4\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  row_4\n  grp_a\n\n\n  \n  five\n  1325.81\n  5550.0\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  row_5\n  grp_b\n\n\n  fig\n  six\n  13.255\n  \n  2015-06-15\n  \n  2018-06-06 16:11\n  row_6\n  grp_b\n\n\n  grapefruit\n  seven\n  \n  777000.0\n  \n  19:10\n  2018-07-07 05:22\n  row_7\n  grp_b\n\n\n  honeydew\n  eight\n  0.44\n  8880000.0\n  2015-08-15\n  20:20\n  \n  row_8\n  grp_b"
  },
  {
    "objectID": "get-started/column-selection.html#polars-selectors",
    "href": "get-started/column-selection.html#polars-selectors",
    "title": "Column selection",
    "section": "Polars selectors",
    "text": "Polars selectors\nWhen using a polars DataFrame, you can select columns using polars selectors.\nThe example below uses polars selectors to move all columns that start with \"c\" or \"f\" to the start of the table.\n\nimport polars as pl\nimport polars.selectors as cs\n\npl_df = pl.from_pandas(exibble)\n\nGT(pl_df).cols_move_to_start(cs.starts_with(\"c\") | cs.starts_with(\"f\"))\n\n\n\n\n\n\nchar\ncurrency\nfctr\nnum\ndate\ntime\ndatetime\nrow\ngroup\n\n\n  apricot\n  49.95\n  one\n  0.1111\n  2015-01-15\n  13:35\n  2018-01-01 02:22\n  row_1\n  grp_a\n\n\n  banana\n  17.95\n  two\n  2.222\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  row_2\n  grp_a\n\n\n  coconut\n  1.39\n  three\n  33.33\n  2015-03-15\n  15:45\n  2018-03-03 03:44\n  row_3\n  grp_a\n\n\n  durian\n  65100.0\n  four\n  444.4\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  row_4\n  grp_a\n\n\n  None\n  1325.81\n  five\n  5550.0\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  row_5\n  grp_b\n\n\n  fig\n  13.255\n  six\n  None\n  2015-06-15\n  None\n  2018-06-06 16:11\n  row_6\n  grp_b\n\n\n  grapefruit\n  None\n  seven\n  777000.0\n  None\n  19:10\n  2018-07-07 05:22\n  row_7\n  grp_b\n\n\n  honeydew\n  0.44\n  eight\n  8880000.0\n  2015-08-15\n  20:20\n  None\n  row_8\n  grp_b\n\n\n\n\n\n\n\n        \n\n\nIn general, selection should match the behaviors of the polars DataFrame.select() method.\n\npl_df.select(cs.starts_with(\"c\") | cs.starts_with(\"f\")).columns\n\n['char', 'currency', 'fctr']\n\n\nSee the Selectors page in the polars docs for more information."
  },
  {
    "objectID": "get-started/basic-column-labels.html",
    "href": "get-started/basic-column-labels.html",
    "title": "Column labels",
    "section": "",
    "text": "The table’s Column Labels part contains, at a minimum, columns and their column labels. The last example had a single column: size. Just as in the Stub, we can create groupings called spanner columns that encompass one or more columns.\nTo better demonstrate how Column Labels work and are displayed, let’s use an input data table with more columns. In this case, that input table will be airquality. It has the following columns:\nWe know that all measurements took place in 1973, so a year column will be added to the dataset before it is passed to gt().\nfrom great_tables import GT, html\nfrom great_tables.data import airquality\n\nairquality_m = airquality.head(10).assign(Year = 1973)\n\nairquality_m\n\n\n\n\n\n\n\n\nOzone\nSolar_R\nWind\nTemp\nMonth\nDay\nYear\n\n\n\n\n0\n41.0\n190.0\n7.4\n67\n5\n1\n1973\n\n\n1\n36.0\n118.0\n8.0\n72\n5\n2\n1973\n\n\n2\n12.0\n149.0\n12.6\n74\n5\n3\n1973\n\n\n3\n18.0\n313.0\n11.5\n62\n5\n4\n1973\n\n\n4\nNaN\nNaN\n14.3\n56\n5\n5\n1973\n\n\n5\n28.0\nNaN\n14.9\n66\n5\n6\n1973\n\n\n6\n23.0\n299.0\n8.6\n65\n5\n7\n1973\n\n\n7\n19.0\n99.0\n13.8\n59\n5\n8\n1973\n\n\n8\n8.0\n19.0\n20.1\n61\n5\n9\n1973\n\n\n9\nNaN\n194.0\n8.6\n69\n5\n10\n1973"
  },
  {
    "objectID": "get-started/basic-column-labels.html#column-spanners",
    "href": "get-started/basic-column-labels.html#column-spanners",
    "title": "Column labels",
    "section": "Column spanners",
    "text": "Column spanners\nLet’s organize the time information under a Time spanner column label, and put the other columns under a Measurement spanner column label. We can do this with the tab_spanner() method.\n\ngt_airquality = (\n    GT(airquality_m)\n\n    .tab_header(\n        title = \"New York Air Quality Measurements\",\n        subtitle = \"Daily measurements in New York City (May 1-10, 1973)\"\n    )\n    .tab_spanner(\n        label = \"Time\",\n        columns = [\"Year\", \"Month\", \"Day\"]\n    )\n    .tab_spanner(\n        label = \"Measurement\",\n        columns = [\"Ozone\", \"Solar.R\", \"Wind\", \"Temp\"]\n    )\n)\n\ngt_airquality\n\n\n\n\n\n  \n    New York Air Quality Measurements\n  \n  \n    Daily measurements in New York City (May 1-10, 1973)\n  \n\n  \n    Measurement\n  \n  Solar_R\n  \n    Time\n  \n\n\n  Ozone\n  Wind\n  Temp\n  Year\n  Month\n  Day\n\n\n\n  41.0\n  7.4\n  67\n  190.0\n  1973\n  5\n  1\n\n\n  36.0\n  8.0\n  72\n  118.0\n  1973\n  5\n  2\n\n\n  12.0\n  12.6\n  74\n  149.0\n  1973\n  5\n  3\n\n\n  18.0\n  11.5\n  62\n  313.0\n  1973\n  5\n  4\n\n\n  \n  14.3\n  56\n  \n  1973\n  5\n  5\n\n\n  28.0\n  14.9\n  66\n  \n  1973\n  5\n  6\n\n\n  23.0\n  8.6\n  65\n  299.0\n  1973\n  5\n  7\n\n\n  19.0\n  13.8\n  59\n  99.0\n  1973\n  5\n  8\n\n\n  8.0\n  20.1\n  61\n  19.0\n  1973\n  5\n  9\n\n\n  \n  8.6\n  69\n  194.0\n  1973\n  5\n  10"
  },
  {
    "objectID": "get-started/basic-column-labels.html#move-and-label-columns",
    "href": "get-started/basic-column-labels.html#move-and-label-columns",
    "title": "Column labels",
    "section": "Move and label columns",
    "text": "Move and label columns\nWe can do two more things to make this presentable:\n\nmove the Time columns to the beginning of the series (using cols_move_to_start())\ncustomize the column labels so that they are more descriptive (using cols_label())\n\nLet’s do both of these things in the next example.\n\n(\n    gt_airquality\n    .cols_move_to_start(columns = [\"Year\", \"Month\", \"Day\"])\n    .cols_label(\n        Ozone = html(\"Ozone,&lt;br&gt;ppbV\"),\n        Solar_R = html(\"Solar R.,&lt;br&gt;cal/m&lt;sup&gt;2&lt;/sup&gt;\"),\n        Wind = html(\"Wind,&lt;br&gt;mph\"),\n        Temp = html(\"Temp,&lt;br&gt;&deg;F\")\n    )\n)\n\n\n\n\n\n  \n    New York Air Quality Measurements\n  \n  \n    Daily measurements in New York City (May 1-10, 1973)\n  \n\n  \n    Time\n  \n  \n    Measurement\n  \n  Solar R.,cal/m2\n\n\n  Year\n  Month\n  Day\n  Ozone,ppbV\n  Wind,mph\n  Temp,°F\n\n\n\n  1973\n  5\n  1\n  41.0\n  7.4\n  67\n  190.0\n\n\n  1973\n  5\n  2\n  36.0\n  8.0\n  72\n  118.0\n\n\n  1973\n  5\n  3\n  12.0\n  12.6\n  74\n  149.0\n\n\n  1973\n  5\n  4\n  18.0\n  11.5\n  62\n  313.0\n\n\n  1973\n  5\n  5\n  \n  14.3\n  56\n  \n\n\n  1973\n  5\n  6\n  28.0\n  14.9\n  66\n  \n\n\n  1973\n  5\n  7\n  23.0\n  8.6\n  65\n  299.0\n\n\n  1973\n  5\n  8\n  19.0\n  13.8\n  59\n  99.0\n\n\n  1973\n  5\n  9\n  8.0\n  20.1\n  61\n  19.0\n\n\n  1973\n  5\n  10\n  \n  8.6\n  69\n  194.0\n\n\n\n\n\n\n\n        \n\n\nNote that even though columns were moved using cols_move_to_start(), the spanner column labels still spanned above the correct column labels. There are a number of methods on GT to move columns, including cols_move(), cols_move_to_end(); there’s even a method to hide columns: cols_hide().\nMultiple columns can be renamed in a single use of cols_label(). Further to this, the helper functions md() and html() can be used to create column labels with additional styling. In the above example, we provided column labels as HTML so that we can insert linebreaks with &lt;br&gt;, insert a superscripted 2 (with &lt;sup&gt;2&lt;/sup&gt;), and insert a degree symbol as an HTML entity (&deg;)."
  },
  {
    "objectID": "get-started/basic-column-labels.html#specifying-column-selection",
    "href": "get-started/basic-column-labels.html#specifying-column-selection",
    "title": "Column labels",
    "section": "Specifying column selection",
    "text": "Specifying column selection\nIn the above examples, we selected columns to span or move using a list of column names (as strings). However, Great Tables supports a wide range of ways to select columns.\nFor example, you can use a lambda function:\n\n(\n    GT(airquality_m)\n    .cols_move_to_start(columns = lambda colname: colname.endswith(\"R\"))\n)\n\n\n\n\n\n\nSolar_R\nOzone\nWind\nTemp\nMonth\nDay\nYear\n\n\n  190.0\n  41.0\n  7.4\n  67\n  5\n  1\n  1973\n\n\n  118.0\n  36.0\n  8.0\n  72\n  5\n  2\n  1973\n\n\n  149.0\n  12.0\n  12.6\n  74\n  5\n  3\n  1973\n\n\n  313.0\n  18.0\n  11.5\n  62\n  5\n  4\n  1973\n\n\n  \n  \n  14.3\n  56\n  5\n  5\n  1973\n\n\n  \n  28.0\n  14.9\n  66\n  5\n  6\n  1973\n\n\n  299.0\n  23.0\n  8.6\n  65\n  5\n  7\n  1973\n\n\n  99.0\n  19.0\n  13.8\n  59\n  5\n  8\n  1973\n\n\n  19.0\n  8.0\n  20.1\n  61\n  5\n  9\n  1973\n\n\n  194.0\n  \n  8.6\n  69\n  5\n  10\n  1973\n\n\n\n\n\n\n\n        \n\n\nInputs like strings, integers, and polars selectors are also supported. For more information, see Column Selection."
  },
  {
    "objectID": "get-started/index.html",
    "href": "get-started/index.html",
    "title": "Intro",
    "section": "",
    "text": "The Great Tables package is all about making it simple to produce nice-looking display tables. Display tables? Well yes, we are trying to distinguish between data tables (i.e., DataFrames) and those tables you’d find in a web page, a journal article, or in a magazine. Such tables can likewise be called presentation tables, summary tables, or just tables really. Here are some examples, ripped straight from the web:\nWe can think of display tables as output only, where we’d not want to use them as input ever again. Other features include annotations, table element styling, and text transformations that serve to communicate the subject matter more clearly."
  },
  {
    "objectID": "get-started/index.html#lets-install",
    "href": "get-started/index.html#lets-install",
    "title": "Intro",
    "section": "Let’s Install",
    "text": "Let’s Install\nThe installation really couldn’t be much easier. Use this:\npip install great_tables"
  },
  {
    "objectID": "get-started/index.html#a-basic-gt-table",
    "href": "get-started/index.html#a-basic-gt-table",
    "title": "Intro",
    "section": "A Basic gt Table",
    "text": "A Basic gt Table\nLet’s use a subset of the islands dataset available within great_tables.data:\n\nfrom great_tables import GT, md, html\nfrom great_tables.data import islands\n\nislands_mini = islands.head(10)\n\nThe islands data is a simple pandas DataFrame with 2 columns and that’ll serve as a great start. Speaking of which, the main entry point into the great_tables API is the GT class. Let’s use that to make a presentable table:\n\n# Create a display table showing ten of the largest islands in the world\ngt_tbl = GT(islands_mini)\n\n# Show the gt table\ngt_tbl\n\n\n\n\n\n\nname\nsize\n\n\n  Africa\n  11506\n\n\n  Antarctica\n  5500\n\n\n  Asia\n  16988\n\n\n  Australia\n  2968\n\n\n  Axel Heiberg\n  16\n\n\n  Baffin\n  184\n\n\n  Banks\n  23\n\n\n  Borneo\n  280\n\n\n  Britain\n  84\n\n\n  Celebes\n  73\n\n\n\n\n\n\n\n        \n\n\nThat doesn’t look too bad. Sure, it’s basic but we really didn’t really ask for much. We did receive a proper table with column labels and the data. Oftentimes however, you’ll want a bit more: a Table header, a Stub, and sometimes footnotes and source notes in the Table Footer part."
  },
  {
    "objectID": "get-started/index.html#some-beautiful-examples",
    "href": "get-started/index.html#some-beautiful-examples",
    "title": "Intro",
    "section": "Some beautiful examples",
    "text": "Some beautiful examples\nIn the following pages we’ll use Great Tables to turn DataFrames into beautiful tables, like the ones below.\n\n\nShow the Code\nfrom great_tables import GT, md, html\nfrom great_tables.data import islands\n\nislands_mini = islands.head(10)\n\n(\n    GT(islands_mini, rowname_col = \"name\")\n    .tab_header(\n        title = \"Large Landmasses of the World\",\n        subtitle = \"The top ten largest are presented\"\n    )\n    .tab_source_note(\n        source_note = \"Source: The World Almanac and Book of Facts, 1975, page 406.\"\n    )\n    .tab_source_note(\n        source_note = md(\"Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.\")\n    )\n    . tab_stubhead(label = \"landmass\")\n)\n\n\n\n\n\n\n  \n    Large Landmasses of the World\n  \n  \n    The top ten largest are presented\n  \nlandmass\nsize\n\n\n  Africa\n  11506\n\n\n  Antarctica\n  5500\n\n\n  Asia\n  16988\n\n\n  Australia\n  2968\n\n\n  Axel Heiberg\n  16\n\n\n  Baffin\n  184\n\n\n  Banks\n  23\n\n\n  Borneo\n  280\n\n\n  Britain\n  84\n\n\n  Celebes\n  73\n\n\n  \n  \n  \n    Source: The World Almanac and Book of Facts, 1975, page 406.\n  \n\n\n  \n    Reference: McNeil, D. R. (1977) Interactive Data Analysis. Wiley.\n  \n\n\n\n\n\n\n        \n\n\n\n\nShow the Code\nfrom great_tables import GT, html\nfrom great_tables.data import airquality\n\nairquality_m = airquality.head(10).assign(Year=1973)\n\ngt_airquality = (\n    GT(airquality_m)\n    .tab_header(\n        title=\"New York Air Quality Measurements\",\n        subtitle=\"Daily measurements in New York City (May 1-10, 1973)\",\n    )\n    .tab_spanner(label=\"Time\", columns=[\"Year\", \"Month\", \"Day\"])\n    .tab_spanner(label=\"Measurement\", columns=[\"Ozone\", \"Solar.R\", \"Wind\", \"Temp\"])\n    .cols_move_to_start(columns=[\"Year\", \"Month\", \"Day\"])\n    .cols_label(\n        Ozone=html(\"Ozone,&lt;br&gt;ppbV\"),\n        Solar_R=html(\"Solar R.,&lt;br&gt;cal/m&lt;sup&gt;2&lt;/sup&gt;\"),\n        Wind=html(\"Wind,&lt;br&gt;mph\"),\n        Temp=html(\"Temp,&lt;br&gt;&deg;F\"),\n    )\n)\n\ngt_airquality\n\n\n\n\n\n\n  \n    New York Air Quality Measurements\n  \n  \n    Daily measurements in New York City (May 1-10, 1973)\n  \n\n  \n    Time\n  \n  \n    Measurement\n  \n  Solar R.,cal/m2\n\n\n  Year\n  Month\n  Day\n  Ozone,ppbV\n  Wind,mph\n  Temp,°F\n\n\n\n  1973\n  5\n  1\n  41.0\n  7.4\n  67\n  190.0\n\n\n  1973\n  5\n  2\n  36.0\n  8.0\n  72\n  118.0\n\n\n  1973\n  5\n  3\n  12.0\n  12.6\n  74\n  149.0\n\n\n  1973\n  5\n  4\n  18.0\n  11.5\n  62\n  313.0\n\n\n  1973\n  5\n  5\n  \n  14.3\n  56\n  \n\n\n  1973\n  5\n  6\n  28.0\n  14.9\n  66\n  \n\n\n  1973\n  5\n  7\n  23.0\n  8.6\n  65\n  299.0\n\n\n  1973\n  5\n  8\n  19.0\n  13.8\n  59\n  99.0\n\n\n  1973\n  5\n  9\n  8.0\n  20.1\n  61\n  19.0\n\n\n  1973\n  5\n  10\n  \n  8.6\n  69\n  194.0"
  },
  {
    "objectID": "examples/index.html",
    "href": "examples/index.html",
    "title": "Examples",
    "section": "",
    "text": "Code\nfrom great_tables import GT, md, html\nfrom great_tables.data import islands\n\nislands_mini = islands.head(10)\n\n(\n    GT(islands_mini, rowname_col = \"name\")\n    .tab_header(\n        title = \"Large Landmasses of the World\",\n        subtitle = \"The top ten largest are presented\"\n    )\n    .tab_source_note(\n        source_note = \"Source: The World Almanac and Book of Facts, 1975, page 406.\"\n    )\n    .tab_source_note(\n        source_note = md(\"Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.\")\n    )\n    . tab_stubhead(label = \"landmass\")\n)\n\n\n\n\n\n\n  \n    Large Landmasses of the World\n  \n  \n    The top ten largest are presented\n  \nlandmass\nsize\n\n\n  Africa\n  11506\n\n\n  Antarctica\n  5500\n\n\n  Asia\n  16988\n\n\n  Australia\n  2968\n\n\n  Axel Heiberg\n  16\n\n\n  Baffin\n  184\n\n\n  Banks\n  23\n\n\n  Borneo\n  280\n\n\n  Britain\n  84\n\n\n  Celebes\n  73\n\n\n  \n  \n  \n    Source: The World Almanac and Book of Facts, 1975, page 406.\n  \n\n\n  \n    Reference: McNeil, D. R. (1977) Interactive Data Analysis. Wiley.\n  \n\n\n\n\n\n\n        \n\n\n\n\n\n\nCode\nfrom great_tables import GT, md, html\nfrom great_tables.data import airquality\n\nairquality_mini = airquality.head(10).assign(Year = 1973)\n\n(\n    GT(airquality_mini)\n    .tab_header(\n        title = \"New York Air Quality Measurements\",\n        subtitle = \"Daily measurements in New York City (May 1-10, 1973)\"\n    )\n    .tab_spanner(\n        label = \"Time\",\n        columns = [\"Year\", \"Month\", \"Day\"]\n    )\n    .tab_spanner(\n        label = \"Measurement\",\n        columns = [\"Ozone\", \"Solar_R\", \"Wind\", \"Temp\"]\n    )\n    .cols_move_to_start(columns = [\"Year\", \"Month\", \"Day\"])\n    .cols_label(\n        Ozone = html(\"Ozone,&lt;br&gt;ppbV\"),\n        Solar_R = html(\"Solar R.,&lt;br&gt;cal/m&lt;sup&gt;2&lt;/sup&gt;\"),\n        Wind = html(\"Wind,&lt;br&gt;mph\"),\n        Temp = html(\"Temp,&lt;br&gt;&deg;F\")\n    )\n)\n\n\n\n\n\n\n  \n    New York Air Quality Measurements\n  \n  \n    Daily measurements in New York City (May 1-10, 1973)\n  \n\n  \n    Time\n  \n  \n    Measurement\n  \n\n\n  Year\n  Month\n  Day\n  Ozone,ppbV\n  Solar R.,cal/m2\n  Wind,mph\n  Temp,°F\n\n\n\n  1973\n  5\n  1\n  41.0\n  190.0\n  7.4\n  67\n\n\n  1973\n  5\n  2\n  36.0\n  118.0\n  8.0\n  72\n\n\n  1973\n  5\n  3\n  12.0\n  149.0\n  12.6\n  74\n\n\n  1973\n  5\n  4\n  18.0\n  313.0\n  11.5\n  62\n\n\n  1973\n  5\n  5\n  \n  \n  14.3\n  56\n\n\n  1973\n  5\n  6\n  28.0\n  \n  14.9\n  66\n\n\n  1973\n  5\n  7\n  23.0\n  299.0\n  8.6\n  65\n\n\n  1973\n  5\n  8\n  19.0\n  99.0\n  13.8\n  59\n\n\n  1973\n  5\n  9\n  8.0\n  19.0\n  20.1\n  61\n\n\n  1973\n  5\n  10\n  \n  194.0\n  8.6\n  69\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\nCode\nfrom great_tables import GT\nfrom great_tables.data import countrypops\n\nimport polars as pl\nimport polars.selectors as cs\n\n# Get vectors of 2-letter country codes for each region of Oceania\ncountries = {\n    \"Australasia\": [\"AU\", \"NZ\"],\n    \"Melanesia\": [\"NC\", \"PG\", \"SB\", \"VU\"],\n    \"Micronesia\": [\"FM\", \"GU\", \"KI\", \"MH\", \"MP\", \"NR\", \"PW\"],\n    \"Polynesia\": [\"PF\", \"WS\", \"TO\", \"TV\"],\n}\n\n# a dictionary mapping region to country (e.g. AU -&gt; Australasia)\nregion_to_country = {\n    region: country for country, regions in countries.items() for region in regions\n}\n\nkeep_rows = countrypops.country_code_2.isin(list(region_to_country)) & countrypops.year.isin(\n    [2000, 2010, 2020]\n)\n\n# Create a gt table based on a preprocessed `countrypops`\nwide_pops = (\n    pl.from_pandas(countrypops)\n    .filter(\n        pl.col(\"country_code_2\").is_in(list(region_to_country))\n        & pl.col(\"year\").is_in([2000, 2010, 2020])\n    )\n    .with_columns(pl.col(\"country_code_2\").replace(region_to_country).alias(\"region\"))\n    .pivot(index=[\"country_name\", \"region\"], columns=\"year\", values=\"population\")\n    .sort(\"2020\", descending=True)\n)\n\n(\n    GT(wide_pops, rowname_col=\"country_name\", groupname_col=\"region\")\n    .tab_header(title=\"Populations of Oceania's Countries in 2000, 2010, and 2020\")\n    .tab_spanner(label=\"Total Population\", columns=cs.all())\n    .fmt_integer()\n)\n\n\n\n\n\n\n  \n    Populations of Oceania's Countries in 2000, 2010, and 2020\n  \n\n  \n  \n    Total Population\n  \n\n\n  2000\n  2010\n  2020\n\n\n\n  Australasia\n  Australia\n  19028802\n  22031750\n  25655289\n\n\n  Melanesia\n  Papua New Guinea\n  5508297\n  7583269\n  9749640\n\n\n  New Zealand\n  3857700\n  4350700\n  5090200\n\n\n  Solomon Islands\n  429978\n  540394\n  691191\n\n\n  Vanuatu\n  192074\n  245453\n  311685\n\n\n  Polynesia\n  French Polynesia\n  250927\n  283788\n  301920\n\n\n  New Caledonia\n  213230\n  249750\n  272460\n\n\n  Samoa\n  184008\n  194672\n  214929\n\n\n  Micronesia\n  Guam\n  160188\n  164905\n  169231\n\n\n  Kiribati\n  88826\n  107995\n  126463\n\n\n  Micronesia (Federated States)\n  111709\n  107588\n  112106\n\n\n  Tonga\n  102603\n  107383\n  105254\n\n\n  Northern Mariana Islands\n  80338\n  54087\n  49587\n\n\n  Marshall Islands\n  54224\n  53416\n  43413\n\n\n  Palau\n  19726\n  18540\n  17972\n\n\n  Nauru\n  10377\n  10241\n  12315\n\n\n  Tuvalu\n  9638\n  10550\n  11069\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\nCode\nfrom great_tables import GT, md, html\nfrom great_tables.data import towny\n\n\ntowny_mini = (towny[[\"name\", \"website\", \"density_2021\", \"land_area_km2\",\n              \"latitude\", \"longitude\"]].sort_values(\"density_2021\",\n              ascending=False).head(10))\n\ntowny_mini[\"url_name\"] = ([\"[\"] + towny_mini[\"name\"] + [\"]\"] +\n                         [\"(\"] + towny_mini[\"website\"] + [\")\"])\n\ntowny_mini[\"location\"] =( [\"[map](http://maps.google.com/?ie=UTF8&hq=&ll=\"] +\n                          towny_mini[\"latitude\"].astype(str) + [\",\"] +\n                          towny_mini[\"longitude\"].astype(str) + [\"&z=13)\"])\n\n\n(\n    GT(towny_mini[[\"url_name\", \"location\", \"land_area_km2\",\"density_2021\"]], rowname_col = \"url_name\")\n    .tab_header(\n        title = \"The Municipalities of Ontario\",\n        subtitle = \"The top 10 highest population density in 2021\"\n    )\n\n    .tab_stubhead(label = \"Municipality\")\n\n    .fmt_markdown(columns = [\"url_name\",\"location\"])\n\n    .fmt_number(columns = [\"land_area_km2\", \"density_2021\"], decimals=1)\n\n    .cols_label(\n        land_area_km2 = html(\"land area, &lt;br&gt;km&lt;sup&gt;2&lt;/sup&gt;\"),\n        density_2021 = html(\"density, &lt;br&gt;people/km&lt;sup&gt;2&lt;/sup&gt;\")\n    )\n)\n\n\n\n\n\n\n  \n    The Municipalities of Ontario\n  \n  \n    The top 10 highest population density in 2021\n  \nMunicipality\nlocation\nland area, km2\ndensity, people/km2\n\n\n  Toronto\n  map\n  631.1\n  4,427.8\n\n\n  Brampton\n  map\n  265.9\n  2,469.0\n\n\n  Mississauga\n  map\n  292.7\n  2,452.6\n\n\n  Newmarket\n  map\n  38.5\n  2,284.2\n\n\n  Richmond Hill\n  map\n  100.8\n  2,004.4\n\n\n  Orangeville\n  map\n  15.2\n  1,989.9\n\n\n  Ajax\n  map\n  66.6\n  1,900.8\n\n\n  Waterloo\n  map\n  64.1\n  1,895.7\n\n\n  Kitchener\n  map\n  136.8\n  1,877.7\n\n\n  Guelph\n  map\n  87.4\n  1,644.1"
  },
  {
    "objectID": "get-started/overview.html",
    "href": "get-started/overview.html",
    "title": "Overview",
    "section": "",
    "text": "The Great Tables package makes it relatively easy to add components so that the resulting output table better conveys the information you want to present. These table components work well together and the possible variations in arrangement can handle even the most demanding table presentation needs. The previous output table we showed had only two components: the Column Labels and the Table Body. The next few examples will show all of the other table parts that are available.\nThis is the way the main parts of a table (and their subparts) fit together:\n\nThe parts (roughly from top to bottom) are:\n\nthe Table Header (optional; with a title and possibly a subtitle)\nthe Stub and the Stub Head (optional; contains row labels, optionally within row groups having row group labels and possibly summary labels when a summary is present)\nthe Column Labels (contains column labels, optionally under spanner column labels)\nthe Table Body (contains columns and rows of cells)\nthe Table Footer (optional; possibly with footnotes and source notes)"
  },
  {
    "objectID": "get-started/overview.html#adding-parts-to-this-simple-table",
    "href": "get-started/overview.html#adding-parts-to-this-simple-table",
    "title": "Overview",
    "section": "",
    "text": "The Great Tables package makes it relatively easy to add components so that the resulting output table better conveys the information you want to present. These table components work well together and the possible variations in arrangement can handle even the most demanding table presentation needs. The previous output table we showed had only two components: the Column Labels and the Table Body. The next few examples will show all of the other table parts that are available.\nThis is the way the main parts of a table (and their subparts) fit together:\n\nThe parts (roughly from top to bottom) are:\n\nthe Table Header (optional; with a title and possibly a subtitle)\nthe Stub and the Stub Head (optional; contains row labels, optionally within row groups having row group labels and possibly summary labels when a summary is present)\nthe Column Labels (contains column labels, optionally under spanner column labels)\nthe Table Body (contains columns and rows of cells)\nthe Table Footer (optional; possibly with footnotes and source notes)"
  },
  {
    "objectID": "get-started/basic-formatting.html",
    "href": "get-started/basic-formatting.html",
    "title": "Formatting values",
    "section": "",
    "text": "The values within the table body, specifically those within the body cells, can be formatted with a large selection of fmt_*() methods like fmt_number(), fmt_scientific(), and more. Let’s use a portion of the exibble dataset and introduce some formatting to the cell values. First, we’ll generate the basic GT object and take a look at the table without any cell formatting applied.\nfrom great_tables import GT\nfrom great_tables.data import exibble\nfrom great_tables import vals\n\ngt_ex = GT(exibble[[\"num\", \"date\", \"time\", \"currency\"]].head(5))\n\ngt_ex\n\n\n\n\n\n\nnum\ndate\ntime\ncurrency\n\n\n  0.1111\n  2015-01-15\n  13:35\n  49.95\n\n\n  2.222\n  2015-02-15\n  14:40\n  17.95\n\n\n  33.33\n  2015-03-15\n  15:45\n  1.39\n\n\n  444.4\n  2015-04-15\n  16:50\n  65100.0\n\n\n  5550.0\n  2015-05-15\n  17:55\n  1325.81\nThe num column contains both small and much larger numbers. We can use the fmt_number() method to obtain formatted values have a fixed level of decimal precision and grouping separators. At the same time, we’ll format the numeric values in currency column to get monetary values.\ngt_ex = gt_ex.fmt_number(columns=\"num\", decimals=2).fmt_currency(columns=\"currency\")\n\ngt_ex\n\n\n\n\n\n\nnum\ndate\ntime\ncurrency\n\n\n  0.11\n  2015-01-15\n  13:35\n  $49.95\n\n\n  2.22\n  2015-02-15\n  14:40\n  $17.95\n\n\n  33.33\n  2015-03-15\n  15:45\n  $1.39\n\n\n  444.40\n  2015-04-15\n  16:50\n  $65,100.00\n\n\n  5,550.00\n  2015-05-15\n  17:55\n  $1,325.81\nDates and times can be formatted as well. As long as they are in ISO 8601 form, the fmt_date() and fmt_time() methods can be used to format such values. These methods have corresponding date_style and time_style arguments that accept a number of keywords that act as preset formatting styles.\ngt_ex = (\n    gt_ex.fmt_date(columns=\"date\", date_style=\"m_day_year\")\n    .fmt_time(columns=\"time\", time_style=\"h_m_p\")\n)\n\ngt_ex\n\n\n\n\n\n\nnum\ndate\ntime\ncurrency\n\n\n  0.11\n  Jan 15, 2015\n  1:35 PM\n  $49.95\n\n\n  2.22\n  Feb 15, 2015\n  2:40 PM\n  $17.95\n\n\n  33.33\n  Mar 15, 2015\n  3:45 PM\n  $1.39\n\n\n  444.40\n  Apr 15, 2015\n  4:50 PM\n  $65,100.00\n\n\n  5,550.00\n  May 15, 2015\n  5:55 PM\n  $1,325.81\nIt’s possible to format cells that have already been formatted. Using a formatting method again on previously formatted cells will always work within the ‘last-formatted-wins’ rule.\ngt_ex = gt_ex.fmt_date(columns=\"date\", date_style=\"wday_day_month_year\")\n\ngt_ex\n\n\n\n\n\n\nnum\ndate\ntime\ncurrency\n\n\n  0.11\n  Thursday 15 January 2015\n  1:35 PM\n  $49.95\n\n\n  2.22\n  Sunday 15 February 2015\n  2:40 PM\n  $17.95\n\n\n  33.33\n  Sunday 15 March 2015\n  3:45 PM\n  $1.39\n\n\n  444.40\n  Wednesday 15 April 2015\n  4:50 PM\n  $65,100.00\n\n\n  5,550.00\n  Friday 15 May 2015\n  5:55 PM\n  $1,325.81\nWithin the selected columns we can choose to target specific cells with the rows argument. Within that, we could pass in a list of row indices.\ngt_ex = gt_ex.fmt_currency(columns=\"currency\", rows=[2, 3, 4], currency=\"GBP\")\n\ngt_ex\n\n\n\n\n\n\nnum\ndate\ntime\ncurrency\n\n\n  0.11\n  Thursday 15 January 2015\n  1:35 PM\n  $49.95\n\n\n  2.22\n  Sunday 15 February 2015\n  2:40 PM\n  $17.95\n\n\n  33.33\n  Sunday 15 March 2015\n  3:45 PM\n  £1.39\n\n\n  444.40\n  Wednesday 15 April 2015\n  4:50 PM\n  £65,100.00\n\n\n  5,550.00\n  Friday 15 May 2015\n  5:55 PM\n  £1,325.81"
  },
  {
    "objectID": "get-started/basic-formatting.html#arguments-common-to-several-formatting-functions",
    "href": "get-started/basic-formatting.html#arguments-common-to-several-formatting-functions",
    "title": "Formatting values",
    "section": "Arguments common to several formatting functions",
    "text": "Arguments common to several formatting functions\nWhile we can use the fmt_*() methods on a table, we can also use the functional versions of these methods on scalar values or lists of values. These variants exist within the vals module. While arguments across these functions and their corresponding method aren’t exactly the same, there are nonetheless many arguments that are shared amongst them. Here are a few examples:\n\ndecimals: set a fixed precision of decimal places\nsep_mark, dec_mark: set digit separators and the decimal symbol (defaults are \",\" and \".\")\nscale_by: we can choose to scale targeted values by a multiplier value\ncompact: larger figures (thousands, millions, etc.) can be autoscaled and decorated with the appropriate suffixes (e.g., \"10000\" becomes \"10K\")\npattern: option to use a text pattern for decoration of the formatted values\nlocale: providing a locale ID (e.g., \"en\", \"fr\", \"de-AT\", etc.) will result in number formatting specific to the chosen locale\n\nHere are a number of examples that use vals.fmt_number().\n\nfmt_number_1 = vals.fmt_number([1.64, 3.26, 3000.63, 236742.37])\nfmt_number_2 = vals.fmt_number([1.64, 3.26, 3000.63, 236742.37], compact=True)\nfmt_number_3 = vals.fmt_number([1.64, 3.26, 3000.63, 236742.37], decimals=3)\nfmt_number_4 = vals.fmt_number([1.64, 3.26, 3000.63, 236742.37], pattern=\"[{x}]\")\nfmt_number_5 = vals.fmt_number([1.64, 3.26, 3000.63, 236742.37], locale=\"es\")\n\nprint(fmt_number_1, fmt_number_2, fmt_number_3, fmt_number_4, fmt_number_5, sep=\"\\n\")\n\n['1.64', '3.26', '3,000.63', '236,742.37']\n['1.64', '3.26', '3.00K', '236.74K']\n['1.640', '3.260', '3,000.630', '236,742.370']\n['[1.64]', '[3.26]', '[3,000.63]', '[236,742.37]']\n['1,64', '3,26', '3.000,63', '236.742,37']\n\n\nScientific notation can be done with vals.fmt_scientific().\n\nfmt_sci_1 = vals.fmt_scientific([0.00064, 7.353, 863454.63])\nfmt_sci_2 = vals.fmt_scientific([1.64, 3.26, 3000.63], decimals=3)\nfmt_sci_3 = vals.fmt_scientific([1.64, 3.26, 3000.63], exp_style=\"E\")\nfmt_sci_4 = vals.fmt_scientific([1.64, 3.26, 3000.63], locale=\"de\")\n\nprint(fmt_sci_1, fmt_sci_2, fmt_sci_3, fmt_sci_4, sep=\"\\n\")\n\n[\"6.40 × 10&lt;sup style='font-size: 65%;'&gt;−4&lt;/sup&gt;\", '7.35', \"8.63 × 10&lt;sup style='font-size: 65%;'&gt;5&lt;/sup&gt;\"]\n['1.640', '3.260', \"3.001 × 10&lt;sup style='font-size: 65%;'&gt;3&lt;/sup&gt;\"]\n['1.64E00', '3.26E00', '3.00E30']\n['1,64', '3,26', \"3,00 × 10&lt;sup style='font-size: 65%;'&gt;3&lt;/sup&gt;\"]\n\n\nDates and times are handled with vals.fmt_date() and vals.fmt_time().\n\nfmt_date_1 = vals.fmt_date(\n    [\"2015-03-15\", \"2017-08-18\", \"2020-04-12\"], date_style=\"wday_month_day_year\"\n)\nfmt_date_2 = vals.fmt_date([\"2015-03-15\", \"2017-08-18\", \"2020-04-12\"], date_style=\"month_day_year\")\nfmt_time_1 = vals.fmt_time([\"23:03\", \"00:55\", \"08:23\"], time_style=\"h_m_p\")\nfmt_time_2 = vals.fmt_time([\"23:03\", \"00:55\", \"08:23\"], time_style=\"h_p\")\n\nprint(fmt_date_1, fmt_date_2, fmt_time_1, fmt_time_2, sep=\"\\n\")\n\n['Sunday, March 15, 2015', 'Friday, August 18, 2017', 'Sunday, April 12, 2020']\n['March 15, 2015', 'August 18, 2017', 'April 12, 2020']\n['11:03 PM', '12:55 AM', '8:23 AM']\n['11 PM', '12 AM', '8 AM']\n\n\nSometimes it’s easier and more convenient to experiment with formatting using the formatting functions in the vals module. There are many options to explore with each type of formatting and so visiting the API Reference is certainly worthwhile."
  },
  {
    "objectID": "get-started/basic-stub.html",
    "href": "get-started/basic-stub.html",
    "title": "Stub (row labels)",
    "section": "",
    "text": "The Stub is the area to the left in a table that contains row labels, and may contain row group labels, and summary labels. Those subparts can be grouped in a sequence of row groups. The Stub Head provides a location for a label that describes the Stub. The Stub is optional since there are cases where a Stub wouldn’t be useful (e.g., the display tables presented above were just fine without a Stub)."
  },
  {
    "objectID": "get-started/basic-stub.html#row-names",
    "href": "get-started/basic-stub.html#row-names",
    "title": "Stub (row labels)",
    "section": "Row names",
    "text": "Row names\nAn easy way to generate a Stub part is by specifying a stub column in the gt() method with the rowname_col argument. This will signal to gt that the named column should be used as the stub, making row labels. Let’s add a stub with our islands_tbl dataset by modifying the call to gt():\n\nfrom great_tables import GT, md, html\nfrom great_tables.data import islands\n\nislands_mini = islands.head(10)\n\nGT(islands_mini, rowname_col = \"name\")\n\n\n\n\n\n\n\nsize\n\n\n  Africa\n  11506\n\n\n  Antarctica\n  5500\n\n\n  Asia\n  16988\n\n\n  Australia\n  2968\n\n\n  Axel Heiberg\n  16\n\n\n  Baffin\n  184\n\n\n  Banks\n  23\n\n\n  Borneo\n  280\n\n\n  Britain\n  84\n\n\n  Celebes\n  73\n\n\n\n\n\n\n\n        \n\n\nNotice that the landmass names are off the the left in an unstriped area? That’s the stub. We can apply what’s known as a stubhead label. This label can be added with the tab_stubhead() method:\n\n(\n    GT(islands_mini, rowname_col = \"name\")\n    .tab_stubhead(label = \"landmass\")\n)\n\n\n\n\n\n\nlandmass\nsize\n\n\n  Africa\n  11506\n\n\n  Antarctica\n  5500\n\n\n  Asia\n  16988\n\n\n  Australia\n  2968\n\n\n  Axel Heiberg\n  16\n\n\n  Baffin\n  184\n\n\n  Banks\n  23\n\n\n  Borneo\n  280\n\n\n  Britain\n  84\n\n\n  Celebes\n  73\n\n\n\n\n\n\n\n        \n\n\nA very important thing to note here is that the table now has one column. Before, when there was no stub, two columns were present (with column labels name and size) but now column number 1 (the only column) is size."
  },
  {
    "objectID": "get-started/basic-stub.html#row-groups",
    "href": "get-started/basic-stub.html#row-groups",
    "title": "Stub (row labels)",
    "section": "Row groups",
    "text": "Row groups\nLet’s incorporate row groups into the display table. This divides rows into groups, creating row groups, and results in a display of a row group labels right above the each group. This can be easily done with a table containing row labels. We can make a new row group with each call of the tab_row_group() method. The inputs are row group names in the label argument, and row references in the rows argument. We can use any of the strategies to reference rows as we did we footnotes (e.g., vectors of names/indices, select helpers, etc.).\nHere we will create three row groups (with row group labels continent, country, and subregion) to have a grouping of rows.\n\nisland_groups = islands.head(10).assign(group = [\"subregion\"] * 2 + [\"country\"] * 2 + [\"continent\"] * 6)\n\n# TODO: should also apply all above methods\nGT(island_groups, rowname_col=\"name\", groupname_col=\"group\").tab_stubhead(label=\"landmass\")\n\n\n\n\n\n\nlandmass\nsize\n\n\n  subregion\n  Africa\n  11506\n\n\n  Antarctica\n  5500\n\n\n  country\n  Asia\n  16988\n\n\n  Australia\n  2968\n\n\n  continent\n  Axel Heiberg\n  16\n\n\n  Baffin\n  184\n\n\n  Banks\n  23\n\n\n  Borneo\n  280\n\n\n  Britain\n  84\n\n\n  Celebes\n  73"
  },
  {
    "objectID": "reference/data.pizzaplace.html",
    "href": "reference/data.pizzaplace.html",
    "title": "data.pizzaplace",
    "section": "",
    "text": "data.pizzaplace\nA year of pizza sales from a pizza place.\nA synthetic dataset that describes pizza sales for a pizza place somewhere in the US. While the contents are artificial, the ingredients used to make the pizzas are far from it. There are 32 different pizzas that fall into 4 different categories: classic (classic pizzas: ‘You probably had one like it before, but never like this!’), chicken (pizzas with chicken as a major ingredient: ‘Try the Southwest Chicken Pizza! You’ll love it!’), supreme (pizzas that try a little harder: ‘My Soppressata pizza uses only the finest salami from my personal salumist!’), and, veggie (pizzas without any meats whatsoever: ‘My Five Cheese pizza has so many cheeses, I can only offer it in Large Size!’).\nEach pizza in the dataset is identified by a short name. The following listings provide the full names of each pizza and their main ingredients.\nClassic Pizzas\n\n\"classic_dlx\": The Classic Deluxe Pizza (Pepperoni, Mushrooms, Red Onions, Red Peppers, Bacon)\n\"big_meat\": The Big Meat Pizza (Bacon, Pepperoni, Italian Sausage, Chorizo Sausage)\n\"pepperoni\": The Pepperoni Pizza (Mozzarella Cheese, Pepperoni)\n\"hawaiian\": The Hawaiian Pizza (Sliced Ham, Pineapple, Mozzarella Cheese)\n\"pep_msh_pep\": The Pepperoni, Mushroom, and Peppers Pizza (Pepperoni, Mushrooms, and Green Peppers)\n\"ital_cpcllo\": The Italian Capocollo Pizza (Capocollo, Red Peppers, Tomatoes, Goat Cheese, Garlic, Oregano)\n\"napolitana\": The Napolitana Pizza (Tomatoes, Anchovies, Green Olives, Red Onions, Garlic)\n\"the_greek\": The Greek Pizza (Kalamata Olives, Feta Cheese, Tomatoes, Garlic, Beef Chuck Roast, Red Onions)\n\nChicken Pizzas\n\n\"thai_ckn\": The Thai Chicken Pizza (Chicken, Pineapple, Tomatoes, Red Peppers, Thai Sweet Chilli Sauce)\n\"bbq_ckn\": The Barbecue Chicken Pizza (Barbecued Chicken, Red Peppers, Green Peppers, Tomatoes, Red Onions, Barbecue Sauce)\n\"southw_ckn\": The Southwest Chicken Pizza (Chicken, Tomatoes, Red Peppers, Red Onions, Jalapeno Peppers, Corn, Cilantro, Chipotle Sauce)\n\"cali_ckn\": The California Chicken Pizza (Chicken, Artichoke, Spinach, Garlic, Jalapeno Peppers, Fontina Cheese, Gouda Cheese)\n\"ckn_pesto\": The Chicken Pesto Pizza (Chicken, Tomatoes, Red Peppers, Spinach, Garlic, Pesto Sauce)\n\"ckn_alfredo\": The Chicken Alfredo Pizza (Chicken, Red Onions, Red Peppers, Mushrooms, Asiago Cheese, Alfredo Sauce)\n\nSupreme Pizzas\n\n\"brie_carre\": The Brie Carre Pizza (Brie Carre Cheese, Prosciutto, Caramelized Onions, Pears, Thyme, Garlic)\n\"calabrese\": The Calabrese Pizza (’Nduja Salami, Pancetta, Tomatoes, Red Onions, Friggitello Peppers, Garlic)\n\"soppressata\": The Soppressata Pizza (Soppressata Salami, Fontina Cheese, Mozzarella Cheese, Mushrooms, Garlic)\n\"sicilian\": The Sicilian Pizza (Coarse Sicilian Salami, Tomatoes, Green Olives, Luganega Sausage, Onions, Garlic)\n\"ital_supr\": The Italian Supreme Pizza (Calabrese Salami, Capocollo, Tomatoes, Red Onions, Green Olives, Garlic)\n\"peppr_salami\": The Pepper Salami Pizza (Genoa Salami, Capocollo, Pepperoni, Tomatoes, Asiago Cheese, Garlic)\n\"prsc_argla\": The Prosciutto and Arugula Pizza (Prosciutto di San Daniele, Arugula, Mozzarella Cheese)\n\"spinach_supr\": The Spinach Supreme Pizza (Spinach, Red Onions, Pepperoni, Tomatoes, Artichokes, Kalamata Olives, Garlic, Asiago Cheese)\n\"spicy_ital\": The Spicy Italian Pizza (Capocollo, Tomatoes, Goat Cheese, Artichokes, Peperoncini verdi, Garlic)\n\nVegetable Pizzas\n\n\"mexicana\": The Mexicana Pizza (Tomatoes, Red Peppers, Jalapeno Peppers, Red Onions, Cilantro, Corn, Chipotle Sauce, Garlic)\n\"four_cheese\": The Four Cheese Pizza (Ricotta Cheese, Gorgonzola Piccante Cheese, Mozzarella Cheese, Parmigiano Reggiano Cheese, Garlic)\n\"five_cheese\": The Five Cheese Pizza (Mozzarella Cheese, Provolone Cheese, Smoked Gouda Cheese, Romano Cheese, Blue Cheese, Garlic)\n\"spin_pesto\": The Spinach Pesto Pizza (Spinach, Artichokes, Tomatoes, Sun-dried Tomatoes, Garlic, Pesto Sauce)\n\"veggie_veg\": The Vegetables + Vegetables Pizza (Mushrooms, Tomatoes, Red Peppers, Green Peppers, Red Onions, Zucchini, Spinach, Garlic)\n\"green_garden\": The Green Garden Pizza (Spinach, Mushrooms, Tomatoes, Green Olives, Feta Cheese)\n\"mediterraneo\": The Mediterranean Pizza (Spinach, Artichokes, Kalamata Olives, Sun-dried Tomatoes, Feta Cheese, Plum Tomatoes, Red Onions)\n\"spinach_fet\": The Spinach and Feta Pizza (Spinach, Mushrooms, Red Onions, Feta Cheese, Garlic)\n\"ital_veggie\": The Italian Vegetables Pizza (Eggplant, Artichokes, Tomatoes, Zucchini, Red Peppers, Garlic, Pesto Sauce)\n\n\n\nThis is a dataset with 49,574 rows and 7 columns.\n\nid: The ID for the order, which consists of one or more pizzas at a given date and time. date: A character representation of the order date, expressed in the ISO 8601 date format (‘YYYY-MM-DD’).\ntime: A character representation of the order time, expressed as a 24-hour time the ISO 8601 extended time format (‘hh:mm:ss’).\nname: The short name for the pizza.\nsize: The size of the pizza, which can either be \"S\", \"M\", \"L\", \"XL\" (rare!), or \"XXL\" (even rarer!); most pizzas are available in the \"S\", \"M\", and \"L\" sizes but exceptions apply.\ntype: The category or type of pizza, which can either be \"classic\", \"chicken\", \"supreme\", or \"veggie\".\nprice: The price of the pizza and the amount that it sold for (in USD)."
  },
  {
    "objectID": "reference/data.pizzaplace.html#details",
    "href": "reference/data.pizzaplace.html#details",
    "title": "data.pizzaplace",
    "section": "",
    "text": "This is a dataset with 49,574 rows and 7 columns.\n\nid: The ID for the order, which consists of one or more pizzas at a given date and time. date: A character representation of the order date, expressed in the ISO 8601 date format (‘YYYY-MM-DD’).\ntime: A character representation of the order time, expressed as a 24-hour time the ISO 8601 extended time format (‘hh:mm:ss’).\nname: The short name for the pizza.\nsize: The size of the pizza, which can either be \"S\", \"M\", \"L\", \"XL\" (rare!), or \"XXL\" (even rarer!); most pizzas are available in the \"S\", \"M\", and \"L\" sizes but exceptions apply.\ntype: The category or type of pizza, which can either be \"classic\", \"chicken\", \"supreme\", or \"veggie\".\nprice: The price of the pizza and the amount that it sold for (in USD)."
  },
  {
    "objectID": "reference/GT.fmt_markdown.html",
    "href": "reference/GT.fmt_markdown.html",
    "title": "GT.fmt_markdown",
    "section": "",
    "text": "GT.fmt_markdown(self, columns=None, rows=None)\nFormat Markdown text.\nAny Markdown-formatted text in the incoming cells will be transformed during render when using the fmt_markdown() method.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned.\n\n\n\n\n\n\nThe functional version of this method, val_fmt_markdown(), allows you to format a single string value (or a list of them)."
  },
  {
    "objectID": "reference/GT.fmt_markdown.html#parameters",
    "href": "reference/GT.fmt_markdown.html#parameters",
    "title": "GT.fmt_markdown",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone"
  },
  {
    "objectID": "reference/GT.fmt_markdown.html#returns",
    "href": "reference/GT.fmt_markdown.html#returns",
    "title": "GT.fmt_markdown",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.fmt_markdown.html#see-also",
    "href": "reference/GT.fmt_markdown.html#see-also",
    "title": "GT.fmt_markdown",
    "section": "",
    "text": "The functional version of this method, val_fmt_markdown(), allows you to format a single string value (or a list of them)."
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "All tables created in Great Tables begin by using GT(). Here we supply the input data table and some basic options for creating a stub (rowname_col) and row groups (groupname_col).\n\n\n\nGT\nCreate a Great Tables object.\n\n\n\n\n\n\nA table can contain a few useful components for conveying additional information. These include a header (with a titles and subtitle), a footer (with footnotes and source notes), and additional areas for labels (row group labels, column spanner labels, the stubhead label). We can modify the look of table parts more generally with tab_options() and perform styling on targeted table locations with tab_style().\n\n\n\nGT.tab_header\nAdd a table header.\n\n\nGT.tab_spanner\nInsert a spanner in the column labels part of a gt table.\n\n\nGT.tab_stubhead\nAdd label text to the stubhead.\n\n\nGT.tab_source_note\nAdd a source note citation.\n\n\nGT.tab_style\nAdd custom style to one or more cells\n\n\n\n\n\n\nColumns of data can be formatted with the fmt_*() methods. We can specify the rows of these columns quite precisely with the rows argument. We get to apply these methods exactly once to each data cell (last call wins). Need to do custom formatting? Use the fmt() method and define your own formatter within.\n\n\n\nGT.fmt_number\nFormat numeric values.\n\n\nGT.fmt_integer\nFormat values as integers.\n\n\nGT.fmt_percent\nFormat values as a percentage.\n\n\nGT.fmt_scientific\nFormat values to scientific notation.\n\n\nGT.fmt_currency\nFormat values as currencies.\n\n\nGT.fmt_bytes\nFormat values as bytes.\n\n\nGT.fmt_roman\nFormat values as Roman numerals.\n\n\nGT.fmt_date\nFormat values as dates.\n\n\nGT.fmt_time\nFormat values as times.\n\n\nGT.fmt_markdown\nFormat Markdown text.\n\n\nGT.fmt\nSet a column format with a formatter function.\n\n\n\n\n\n\nThe cols_*() methods allow for modifications that act on entire columns. This includes alignment of the data in columns (cols_align()), hiding columns from view (cols_hide()), re-labeling the column labels (cols_label()), and moving columns around (the cols_move*() methods).\n\n\n\nGT.cols_align\nSet the alignment of one or more columns.\n\n\nGT.cols_label\nRelabel one or more columns.\n\n\nGT.cols_move\nMove one or more columns.\n\n\nGT.cols_move_to_start\nMove one or more columns to the start.\n\n\nGT.cols_move_to_end\nMove one or more columns to the end.\n\n\n\n\n\n\nLocation targeting is a powerful feature of Great Tables. It allows for the precise selection of table locations for styling (using the tab_style() method). The styling classes allow for the specification of the styling properties to be applied to the targeted locations.\n\n\n\nloc.body\nA location specification for targeting data cells in the table body.\n\n\nstyle.fill\nA style specification for the background fill of targeted cells.\n\n\nstyle.text\nA style specification for cell text.\n\n\nstyle.borders\nA style specification for cell borders.\n\n\n\n\n\n\nAn assortment of helper functions is available in the Great Tables package. The md() and html() helpers can used be during label creation with the tab_header(), tab_footnote(), tab_spanner(), tab_stubhead_label(), and tab_source_note() methods.\n\n\n\nmd\nInterpret input text as Markdown-formatted text.\n\n\nhtml\nInterpret input text as HTML-formatted text.\n\n\n\n\n\n\nIf you have single values (or lists of them) in need of formatting, we have a set of val_fmt_*() functions that have been adapted from the corresponding fmt_*() methods.\n\n\n\nvals.fmt_number\nFormat numeric values.\n\n\nvals.fmt_integer\nFormat values as integers.\n\n\nvals.fmt_scientific\nFormat values to scientific notation.\n\n\nvals.fmt_percent\nFormat values as a percentage.\n\n\nvals.fmt_currency\nFormat values as currencies.\n\n\nvals.fmt_roman\nFormat values as Roman numerals.\n\n\nvals.fmt_bytes\nFormat values as bytes.\n\n\nvals.fmt_date\nFormat values as dates.\n\n\nvals.fmt_time\nFormat values as times.\n\n\nvals.fmt_markdown\nFormat Markdown text.\n\n\n\n\n\n\nThe Great Tables package is equipped with ten datasets that come in all shapes and sizes. Many examples thoughout the help docs use these datasets to quickly demonstrate the awesome features of the package!\n\n\n\ndata.countrypops\nYearly populations of countries from 1960 to 2022.\n\n\ndata.sza\nTwice hourly solar zenith angles by month & latitude.\n\n\ndata.gtcars\nDeluxe automobiles from the 2014-2017 period.\n\n\ndata.sp500\nDaily S&P 500 Index data from 1950 to 2015.\n\n\ndata.pizzaplace\nA year of pizza sales from a pizza place.\n\n\ndata.exibble\nA toy example table for testing with great_tables: exibble.\n\n\ndata.towny\nPopulations of all municipalities in Ontario from 1996 to 2021.\n\n\ndata.metro\nThe stations of the Paris Metro.\n\n\ndata.constants\nThe fundamental physical constants.\n\n\ndata.illness\nLab tests for one suffering from an illness."
  },
  {
    "objectID": "reference/index.html#table-creation",
    "href": "reference/index.html#table-creation",
    "title": "Function reference",
    "section": "",
    "text": "All tables created in Great Tables begin by using GT(). Here we supply the input data table and some basic options for creating a stub (rowname_col) and row groups (groupname_col).\n\n\n\nGT\nCreate a Great Tables object."
  },
  {
    "objectID": "reference/index.html#creating-or-modifying-parts-of-a-table",
    "href": "reference/index.html#creating-or-modifying-parts-of-a-table",
    "title": "Function reference",
    "section": "",
    "text": "A table can contain a few useful components for conveying additional information. These include a header (with a titles and subtitle), a footer (with footnotes and source notes), and additional areas for labels (row group labels, column spanner labels, the stubhead label). We can modify the look of table parts more generally with tab_options() and perform styling on targeted table locations with tab_style().\n\n\n\nGT.tab_header\nAdd a table header.\n\n\nGT.tab_spanner\nInsert a spanner in the column labels part of a gt table.\n\n\nGT.tab_stubhead\nAdd label text to the stubhead.\n\n\nGT.tab_source_note\nAdd a source note citation.\n\n\nGT.tab_style\nAdd custom style to one or more cells"
  },
  {
    "objectID": "reference/index.html#formatting-column-data",
    "href": "reference/index.html#formatting-column-data",
    "title": "Function reference",
    "section": "",
    "text": "Columns of data can be formatted with the fmt_*() methods. We can specify the rows of these columns quite precisely with the rows argument. We get to apply these methods exactly once to each data cell (last call wins). Need to do custom formatting? Use the fmt() method and define your own formatter within.\n\n\n\nGT.fmt_number\nFormat numeric values.\n\n\nGT.fmt_integer\nFormat values as integers.\n\n\nGT.fmt_percent\nFormat values as a percentage.\n\n\nGT.fmt_scientific\nFormat values to scientific notation.\n\n\nGT.fmt_currency\nFormat values as currencies.\n\n\nGT.fmt_bytes\nFormat values as bytes.\n\n\nGT.fmt_roman\nFormat values as Roman numerals.\n\n\nGT.fmt_date\nFormat values as dates.\n\n\nGT.fmt_time\nFormat values as times.\n\n\nGT.fmt_markdown\nFormat Markdown text.\n\n\nGT.fmt\nSet a column format with a formatter function."
  },
  {
    "objectID": "reference/index.html#modifying-columns",
    "href": "reference/index.html#modifying-columns",
    "title": "Function reference",
    "section": "",
    "text": "The cols_*() methods allow for modifications that act on entire columns. This includes alignment of the data in columns (cols_align()), hiding columns from view (cols_hide()), re-labeling the column labels (cols_label()), and moving columns around (the cols_move*() methods).\n\n\n\nGT.cols_align\nSet the alignment of one or more columns.\n\n\nGT.cols_label\nRelabel one or more columns.\n\n\nGT.cols_move\nMove one or more columns.\n\n\nGT.cols_move_to_start\nMove one or more columns to the start.\n\n\nGT.cols_move_to_end\nMove one or more columns to the end."
  },
  {
    "objectID": "reference/index.html#location-targeting-and-styling-classes",
    "href": "reference/index.html#location-targeting-and-styling-classes",
    "title": "Function reference",
    "section": "",
    "text": "Location targeting is a powerful feature of Great Tables. It allows for the precise selection of table locations for styling (using the tab_style() method). The styling classes allow for the specification of the styling properties to be applied to the targeted locations.\n\n\n\nloc.body\nA location specification for targeting data cells in the table body.\n\n\nstyle.fill\nA style specification for the background fill of targeted cells.\n\n\nstyle.text\nA style specification for cell text.\n\n\nstyle.borders\nA style specification for cell borders."
  },
  {
    "objectID": "reference/index.html#helper-functions",
    "href": "reference/index.html#helper-functions",
    "title": "Function reference",
    "section": "",
    "text": "An assortment of helper functions is available in the Great Tables package. The md() and html() helpers can used be during label creation with the tab_header(), tab_footnote(), tab_spanner(), tab_stubhead_label(), and tab_source_note() methods.\n\n\n\nmd\nInterpret input text as Markdown-formatted text.\n\n\nhtml\nInterpret input text as HTML-formatted text."
  },
  {
    "objectID": "reference/index.html#value-formatting-functions",
    "href": "reference/index.html#value-formatting-functions",
    "title": "Function reference",
    "section": "",
    "text": "If you have single values (or lists of them) in need of formatting, we have a set of val_fmt_*() functions that have been adapted from the corresponding fmt_*() methods.\n\n\n\nvals.fmt_number\nFormat numeric values.\n\n\nvals.fmt_integer\nFormat values as integers.\n\n\nvals.fmt_scientific\nFormat values to scientific notation.\n\n\nvals.fmt_percent\nFormat values as a percentage.\n\n\nvals.fmt_currency\nFormat values as currencies.\n\n\nvals.fmt_roman\nFormat values as Roman numerals.\n\n\nvals.fmt_bytes\nFormat values as bytes.\n\n\nvals.fmt_date\nFormat values as dates.\n\n\nvals.fmt_time\nFormat values as times.\n\n\nvals.fmt_markdown\nFormat Markdown text."
  },
  {
    "objectID": "reference/index.html#built-in-datasets",
    "href": "reference/index.html#built-in-datasets",
    "title": "Function reference",
    "section": "",
    "text": "The Great Tables package is equipped with ten datasets that come in all shapes and sizes. Many examples thoughout the help docs use these datasets to quickly demonstrate the awesome features of the package!\n\n\n\ndata.countrypops\nYearly populations of countries from 1960 to 2022.\n\n\ndata.sza\nTwice hourly solar zenith angles by month & latitude.\n\n\ndata.gtcars\nDeluxe automobiles from the 2014-2017 period.\n\n\ndata.sp500\nDaily S&P 500 Index data from 1950 to 2015.\n\n\ndata.pizzaplace\nA year of pizza sales from a pizza place.\n\n\ndata.exibble\nA toy example table for testing with great_tables: exibble.\n\n\ndata.towny\nPopulations of all municipalities in Ontario from 1996 to 2021.\n\n\ndata.metro\nThe stations of the Paris Metro.\n\n\ndata.constants\nThe fundamental physical constants.\n\n\ndata.illness\nLab tests for one suffering from an illness."
  },
  {
    "objectID": "reference/GT.cols_label.html",
    "href": "reference/GT.cols_label.html",
    "title": "GT.cols_label",
    "section": "",
    "text": "GT.cols_label(self, **kwargs)\nRelabel one or more columns.\nColumn labels can be modified from their default values (the names of the columns from the input table data). When you create a table object using gt.GT(), column names effectively become the column labels. While this serves as a good first approximation, column names aren’t often appealing as column labels in an output table. The cols_label() method provides the flexibility to relabel one or more columns and we even have the option to use the md() or html() helpers for rendering column labels from Markdown or using HTML.\nIt’s important to note that while columns can be freely relabeled, we continue to refer to columns by their names for targeting purposes. Column names in the input data table must be unique whereas column labels in great_tables have no requirement for uniqueness (which is useful for labeling columns as, say, measurement units that may be repeated several times—usually under different spanner labels). Thus, we can still easily distinguish between columns in other method calls (e.g., in all of the fmt*() methods) even though we may lose distinguishability in column labels once they have been relabeled."
  },
  {
    "objectID": "reference/GT.cols_label.html#parameters",
    "href": "reference/GT.cols_label.html#parameters",
    "title": "GT.cols_label",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n**kwargs\nstr\nThe column names and new labels. The column names are provided as keyword arguments and the new labels are provided as the values for those keyword arguments. For example, cols_label(col1=\"Column 1\", col2=\"Column 2\") would relabel columns col1 and col2 with the labels \"Column 1\" and \"Column 2\", respectively.\n{}"
  },
  {
    "objectID": "reference/GT.cols_label.html#returns",
    "href": "reference/GT.cols_label.html#returns",
    "title": "GT.cols_label",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.cols_label.html#examples",
    "href": "reference/GT.cols_label.html#examples",
    "title": "GT.cols_label",
    "section": "Examples",
    "text": "Examples\nLet’s use a portion of the countrypops dataset to create a table. We can relabel all the table’s columns with the cols_label() method to improve its presentation. In this simple case we are supplying the name of the column as the key, and the label text as the value.\n\nimport great_tables as gt\nfrom great_tables.data import countrypops\n\ncountrypops_mini = countrypops.loc[countrypops[\"country_name\"] == \"Uganda\"][\n    [\"country_name\", \"year\", \"population\"]\n].tail(5)\n\n(\n    gt.GT(countrypops_mini)\n    .cols_label(\n        country_name=\"Name\",\n        year=\"Year\",\n        population=\"Population\"\n    )\n)\n\n\n\n\n\n\nName\nYear\nPopulation\n\n\n  Uganda\n  2018\n  41515395\n\n\n  Uganda\n  2019\n  42949080\n\n\n  Uganda\n  2020\n  44404611\n\n\n  Uganda\n  2021\n  45853778\n\n\n  Uganda\n  2022\n  47249585\n\n\n\n\n\n\n\n        \n\n\nWe can also use Markdown formatting for the column labels. In this example, we’ll use gt.md(\"*Population*\") to make the label italicized.\n\n(\n    gt.GT(countrypops_mini)\n    .cols_label(\n        country_name=\"Name\",\n        year=\"Year\",\n        population=gt.md(\"*Population*\")\n    )\n)\n\n\n\n\n\n\nName\nYear\nPopulation\n\n\n  Uganda\n  2018\n  41515395\n\n\n  Uganda\n  2019\n  42949080\n\n\n  Uganda\n  2020\n  44404611\n\n\n  Uganda\n  2021\n  45853778\n\n\n  Uganda\n  2022\n  47249585"
  },
  {
    "objectID": "reference/style.text.html",
    "href": "reference/style.text.html",
    "title": "style.text",
    "section": "",
    "text": "style.text(color=None, font=None, size=None, align=None, v_align=None, style=None, weight=None, stretch=None, decorate=None, transform=None, whitespace=None)\nA style specification for cell text.\nThe style.text() class is to be used with the tab_style() method, which itself allows for the setting of custom styles to one or more cells. With it, you can specify the color of the text, the font family, the font size, and the horizontal and vertical alignment of the text and more.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolor\nstr | None\nThe text color can be modified through the color argument.\nNone\n\n\nfont\nstr | None\nThe font or collection of fonts (subsequent font names are) used as fallbacks.\nNone\n\n\nsize\nstr | None\nThe size of the font. Can be provided as a number that is assumed to represent px values (or could be wrapped in the px() helper function). We can also use one of the following absolute size keywords: \"xx-small\", \"x-small\", \"small\", \"medium\", \"large\", \"x-large\", or \"xx-large\".\nNone\n\n\nalign\ntyping.Literal[‘center’, ‘left’, ‘right’, ‘justify’] | None\nThe text in a cell can be horizontally aligned though one of the following options: \"center\", \"left\", \"right\", or \"justify\".\nNone\n\n\nv_align\ntyping.Literal[‘middle’, ‘top’, ‘bottom’] | None\nThe vertical alignment of the text in the cell can be modified through the options \"middle\", \"top\", or \"bottom\".\nNone\n\n\nstyle\ntyping.Literal[‘normal’, ‘italic’, ‘oblique’] | None\nCan be one of either \"normal\", \"italic\", or \"oblique\".\nNone\n\n\nweight\nLiteral[“normal”, “bold”, “bolder”, “lighter”] | None)\nThe weight of the font can be modified thorough a text-based option such as \"normal\", \"bold\", \"lighter\", \"bolder\", or, a numeric value between 1 and 1000, inclusive. Note that only variable fonts may support the numeric mapping of weight.\nNone\n\n\nstretch\ntyping.Literal[‘normal’, ‘condensed’, ‘ultra-condensed’, ‘extra-condensed’, ‘semi-condensed’, ‘semi-expanded’, ‘expanded’, ‘extra-expanded’, ‘ultra-expanded’] | None\nAllows for text to either be condensed or expanded. We can use one of the following text-based keywords to describe the degree of condensation/expansion: \"ultra-condensed\", \"extra-condensed\", \"condensed\", \"semi-condensed\", \"normal\", \"semi-expanded\", \"expanded\", \"extra-expanded\", or \"ultra-expanded\". Alternatively, we can supply percentage values from 0% to 200%, inclusive. Negative percentage values are not allowed.\nNone\n\n\ndecorate\ntyping.Literal[‘overline’, ‘line-through’, ‘underline’, ‘underline overline’] | None\nAllows for text decoration effect to be applied. Here, we can use \"overline\", \"line-through\", or \"underline\".\nNone\n\n\ntransform\ntyping.Literal[‘uppercase’, ‘lowercase’, ‘capitalize’] | None\nAllows for the transformation of text. Options are \"uppercase\", \"lowercase\", or \"capitalize\".\nNone\n\n\nwhitespace\ntyping.Literal[‘normal’, ‘nowrap’, ‘pre’, ‘pre-wrap’, ‘pre-line’, ‘break-spaces’] | None\nA white-space preservation option. By default, runs of white-space will be collapsed into single spaces but several options exist to govern how white-space is collapsed and how lines might wrap at soft-wrap opportunities. The options are \"normal\", \"nowrap\", \"pre\", \"pre-wrap\", \"pre-line\", and \"break-spaces\".\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables._styles.CellStyleText\nA CellStyleText object, which is used for a styles argument if specifying any cell text properties."
  },
  {
    "objectID": "reference/style.text.html#parameters",
    "href": "reference/style.text.html#parameters",
    "title": "style.text",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ncolor\nstr | None\nThe text color can be modified through the color argument.\nNone\n\n\nfont\nstr | None\nThe font or collection of fonts (subsequent font names are) used as fallbacks.\nNone\n\n\nsize\nstr | None\nThe size of the font. Can be provided as a number that is assumed to represent px values (or could be wrapped in the px() helper function). We can also use one of the following absolute size keywords: \"xx-small\", \"x-small\", \"small\", \"medium\", \"large\", \"x-large\", or \"xx-large\".\nNone\n\n\nalign\ntyping.Literal[‘center’, ‘left’, ‘right’, ‘justify’] | None\nThe text in a cell can be horizontally aligned though one of the following options: \"center\", \"left\", \"right\", or \"justify\".\nNone\n\n\nv_align\ntyping.Literal[‘middle’, ‘top’, ‘bottom’] | None\nThe vertical alignment of the text in the cell can be modified through the options \"middle\", \"top\", or \"bottom\".\nNone\n\n\nstyle\ntyping.Literal[‘normal’, ‘italic’, ‘oblique’] | None\nCan be one of either \"normal\", \"italic\", or \"oblique\".\nNone\n\n\nweight\nLiteral[“normal”, “bold”, “bolder”, “lighter”] | None)\nThe weight of the font can be modified thorough a text-based option such as \"normal\", \"bold\", \"lighter\", \"bolder\", or, a numeric value between 1 and 1000, inclusive. Note that only variable fonts may support the numeric mapping of weight.\nNone\n\n\nstretch\ntyping.Literal[‘normal’, ‘condensed’, ‘ultra-condensed’, ‘extra-condensed’, ‘semi-condensed’, ‘semi-expanded’, ‘expanded’, ‘extra-expanded’, ‘ultra-expanded’] | None\nAllows for text to either be condensed or expanded. We can use one of the following text-based keywords to describe the degree of condensation/expansion: \"ultra-condensed\", \"extra-condensed\", \"condensed\", \"semi-condensed\", \"normal\", \"semi-expanded\", \"expanded\", \"extra-expanded\", or \"ultra-expanded\". Alternatively, we can supply percentage values from 0% to 200%, inclusive. Negative percentage values are not allowed.\nNone\n\n\ndecorate\ntyping.Literal[‘overline’, ‘line-through’, ‘underline’, ‘underline overline’] | None\nAllows for text decoration effect to be applied. Here, we can use \"overline\", \"line-through\", or \"underline\".\nNone\n\n\ntransform\ntyping.Literal[‘uppercase’, ‘lowercase’, ‘capitalize’] | None\nAllows for the transformation of text. Options are \"uppercase\", \"lowercase\", or \"capitalize\".\nNone\n\n\nwhitespace\ntyping.Literal[‘normal’, ‘nowrap’, ‘pre’, ‘pre-wrap’, ‘pre-line’, ‘break-spaces’] | None\nA white-space preservation option. By default, runs of white-space will be collapsed into single spaces but several options exist to govern how white-space is collapsed and how lines might wrap at soft-wrap opportunities. The options are \"normal\", \"nowrap\", \"pre\", \"pre-wrap\", \"pre-line\", and \"break-spaces\".\nNone"
  },
  {
    "objectID": "reference/style.text.html#returns",
    "href": "reference/style.text.html#returns",
    "title": "style.text",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ngreat_tables._styles.CellStyleText\nA CellStyleText object, which is used for a styles argument if specifying any cell text properties."
  },
  {
    "objectID": "reference/vals.fmt_scientific.html",
    "href": "reference/vals.fmt_scientific.html",
    "title": "vals.fmt_scientific",
    "section": "",
    "text": "vals.fmt_scientific(x, decimals=2, n_sigfig=None, drop_trailing_zeros=False, drop_trailing_dec_mark=True, scale_by=1, exp_style='x10n', pattern='{x}', sep_mark=',', dec_mark='.', force_sign_m=False, force_sign_n=False, locale=None)\nFormat values to scientific notation.\nWith numeric values in a list, we can perform formatting so that the input values are rendered in scientific notation, where extremely large or very small numbers can be expressed in a more practical fashion. Here, numbers are written in the form of a mantissa (m) and an exponent (n) with the construction m x 10^n or mEn. The mantissa component is a number between 1 and 10. For instance, 2.5 x 10^9 can be used to represent the value 2,500,000,000 in scientific notation. In a similar way, 0.00000012 can be expressed as 1.2 x 10^-7. Due to its ability to describe numbers more succinctly and its ease of calculation, scientific notation is widely employed in scientific and technical domains.\nWe have fine control over the formatting task, with the following options:\n\ndecimals: choice of the number of decimal places, option to drop trailing zeros, and a choice of the decimal symbol\nscaling: we can choose to scale targeted values by a multiplier value\npattern: option to use a text pattern for decoration of the formatted values\nlocale-based formatting: providing a locale ID will result in formatting specific to the chosen locale\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ndecimals\nint\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True. If you always need decimals = 0, the fmt_integer() method should be considered.\n2\n\n\nn_sigfig\ntyping.Optional[int]\nA option to format numbers to n significant figures. By default, this is None and thus number values will be formatted according to the number of decimal places set via decimals. If opting to format according to the rules of significant figures, n_sigfig must be a number greater than or equal to 1. Any values passed to the decimals and drop_trailing_zeros arguments will be ignored.\nNone\n\n\ndrop_trailing_zeros\nbool\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\nFalse\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nscale_by\nfloat\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n1\n\n\nexp_style\nstr\nStyle of formatting to use for the scientific notation formatting. By default this is \"x10n\" but other options include using a single letter (e.g., \"e\", \"E\", etc.), a letter followed by a \"1\" to signal a minimum digit width of one, or \"low-ten\" for using a stylized \"10\" marker.\n'x10n'\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign_m\nbool\nShould the plus sign be shown for positive values of the mantissa (first component)? This would effectively show a sign for all values except zero on the first numeric component of the notation. If so, use True (the default for this is False), where only negative numbers will display a sign.\nFalse\n\n\nforce_sign_n\nbool\nShould the plus sign be shown for positive values of the exponent (second component)? This would effectively show a sign for all values except zero on the second numeric component of the notation. If so, use True (the default for this is False), where only negative numbers will display a sign.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_scientific.html#parameters",
    "href": "reference/vals.fmt_scientific.html#parameters",
    "title": "vals.fmt_scientific",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ndecimals\nint\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True. If you always need decimals = 0, the fmt_integer() method should be considered.\n2\n\n\nn_sigfig\ntyping.Optional[int]\nA option to format numbers to n significant figures. By default, this is None and thus number values will be formatted according to the number of decimal places set via decimals. If opting to format according to the rules of significant figures, n_sigfig must be a number greater than or equal to 1. Any values passed to the decimals and drop_trailing_zeros arguments will be ignored.\nNone\n\n\ndrop_trailing_zeros\nbool\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\nFalse\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nscale_by\nfloat\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n1\n\n\nexp_style\nstr\nStyle of formatting to use for the scientific notation formatting. By default this is \"x10n\" but other options include using a single letter (e.g., \"e\", \"E\", etc.), a letter followed by a \"1\" to signal a minimum digit width of one, or \"low-ten\" for using a stylized \"10\" marker.\n'x10n'\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign_m\nbool\nShould the plus sign be shown for positive values of the mantissa (first component)? This would effectively show a sign for all values except zero on the first numeric component of the notation. If so, use True (the default for this is False), where only negative numbers will display a sign.\nFalse\n\n\nforce_sign_n\nbool\nShould the plus sign be shown for positive values of the exponent (second component)? This would effectively show a sign for all values except zero on the second numeric component of the notation. If so, use True (the default for this is False), where only negative numbers will display a sign.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/vals.fmt_scientific.html#returns",
    "href": "reference/vals.fmt_scientific.html#returns",
    "title": "vals.fmt_scientific",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_integer.html",
    "href": "reference/vals.fmt_integer.html",
    "title": "vals.fmt_integer",
    "section": "",
    "text": "vals.fmt_integer(x, use_seps=True, scale_by=1, compact=False, pattern='{x}', sep_mark=',', force_sign=False, locale=None)\nFormat values as integers.\nWith numeric values in a list, we can perform number-based formatting so that the input values are always rendered as integer values. The following major options are available:\nWe can have fine control over integer formatting with the following options:\n\ndigit grouping separators: options to enable/disable digit separators and provide a choice of separator symbol\nscaling: we can choose to scale targeted values by a multiplier value\nlarge-number suffixing: larger figures (thousands, millions, etc.) can be autoscaled and decorated with the appropriate suffixes\npattern: option to use a text pattern for decoration of the formatted values\nlocale-based formatting: providing a locale ID will result in number formatting specific to the chosen locale\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\nscale_by\nfloat\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n1\n\n\ncompact\nbool\nA boolean value that allows for compact formatting of numeric values. Values will be scaled and decorated with the appropriate suffixes (e.g., 1230 becomes 1K, and 1230000 becomes 1M). The compact option is False by default.\nFalse\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_integer.html#parameters",
    "href": "reference/vals.fmt_integer.html#parameters",
    "title": "vals.fmt_integer",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\nscale_by\nfloat\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n1\n\n\ncompact\nbool\nA boolean value that allows for compact formatting of numeric values. Values will be scaled and decorated with the appropriate suffixes (e.g., 1230 becomes 1K, and 1230000 becomes 1M). The compact option is False by default.\nFalse\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/vals.fmt_integer.html#returns",
    "href": "reference/vals.fmt_integer.html#returns",
    "title": "vals.fmt_integer",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/GT.fmt_percent.html",
    "href": "reference/GT.fmt_percent.html",
    "title": "GT.fmt_percent",
    "section": "",
    "text": "GT.fmt_percent(self, columns=None, rows=None, decimals=2, drop_trailing_zeros=False, drop_trailing_dec_mark=True, scale_values=True, use_seps=True, pattern='{x}', sep_mark=',', dec_mark='.', force_sign=False, placement='right', incl_space=False, locale=None)\nFormat values as a percentage.\nWith numeric values in a gt table, we can perform percentage-based formatting. It is assumed the input numeric values are proportional values and, in this case, the values will be automatically multiplied by 100 before decorating with a percent sign (the other case is accommodated though setting scale_values to False). For more control over percentage formatting, we can use the following options:\n\npercent sign placement: the percent sign can be placed after or before the values and a space can be inserted between the symbol and the value.\ndecimals: choice of the number of decimal places, option to drop trailing zeros, and a choice of the decimal symbol\ndigit grouping separators: options to enable/disable digit separators and provide a choice of separator symbol\nvalue scaling toggle: choose to disable automatic value scaling in the situation that values are already scaled coming in (and just require the percent symbol)\npattern: option to use a text pattern for decoration of the formatted values\nlocale-based formatting: providing a locale ID will result in number formatting specific to the chosen locale\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone\n\n\ndecimals\nint\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True. If you always need decimals = 0, the fmt_integer() method should be considered.\n2\n\n\ndrop_trailing_zeros\nbool\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\nFalse\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nscale_values\nbool\nShould the values be scaled through multiplication by 100? By default this scaling is performed since the expectation is that incoming values are usually proportional. Setting to False signifies that the values are already scaled and require only the percent sign when formatted.\nTrue\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nplacement\nstr\nThis option governs the placement of the percent sign. This can be either be \"right\" (the default) or \"left\".\n'right'\n\n\nincl_space\nbool\nAn option for whether to include a space between the value and the percent sign. The default is to not introduce a space character.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned.\n\n\n\n\n\n\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). The use of a valid locale ID here means separator and decimal marks will be correct for the given locale. Should any values be provided in sep_mark or dec_mark, they will be overridden by the locale’s preferred values.\nNote that a locale value provided here will override any global locale setting performed in GT()’s own locale argument (it is settable there as a value received by all other methods that have a locale argument).\n\n\n\nThe functional version of this method, val_fmt_percent(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/GT.fmt_percent.html#parameters",
    "href": "reference/GT.fmt_percent.html#parameters",
    "title": "GT.fmt_percent",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone\n\n\ndecimals\nint\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True. If you always need decimals = 0, the fmt_integer() method should be considered.\n2\n\n\ndrop_trailing_zeros\nbool\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\nFalse\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nscale_values\nbool\nShould the values be scaled through multiplication by 100? By default this scaling is performed since the expectation is that incoming values are usually proportional. Setting to False signifies that the values are already scaled and require only the percent sign when formatted.\nTrue\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nplacement\nstr\nThis option governs the placement of the percent sign. This can be either be \"right\" (the default) or \"left\".\n'right'\n\n\nincl_space\nbool\nAn option for whether to include a space between the value and the percent sign. The default is to not introduce a space character.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/GT.fmt_percent.html#returns",
    "href": "reference/GT.fmt_percent.html#returns",
    "title": "GT.fmt_percent",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.fmt_percent.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_percent.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_percent",
    "section": "",
    "text": "This formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). The use of a valid locale ID here means separator and decimal marks will be correct for the given locale. Should any values be provided in sep_mark or dec_mark, they will be overridden by the locale’s preferred values.\nNote that a locale value provided here will override any global locale setting performed in GT()’s own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_percent.html#see-also",
    "href": "reference/GT.fmt_percent.html#see-also",
    "title": "GT.fmt_percent",
    "section": "",
    "text": "The functional version of this method, val_fmt_percent(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/html.html",
    "href": "reference/html.html",
    "title": "html",
    "section": "",
    "text": "html(text)\nInterpret input text as HTML-formatted text.\nFor certain pieces of text (like in column labels or table headings) we may want to express them as raw HTML. In fact, with HTML, anything goes so it can be much more than just text. The html() function will guard the input HTML against escaping, so, your HTML tags will come through as HTML when rendered… to HTML.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntext\nstr\nThe text that is understood to contain HTML formatting.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables._text.Text\nAn instance of the Text class is returned, where the text type is \"html\"."
  },
  {
    "objectID": "reference/html.html#parameters",
    "href": "reference/html.html#parameters",
    "title": "html",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ntext\nstr\nThe text that is understood to contain HTML formatting.\nrequired"
  },
  {
    "objectID": "reference/html.html#returns",
    "href": "reference/html.html#returns",
    "title": "html",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ngreat_tables._text.Text\nAn instance of the Text class is returned, where the text type is \"html\"."
  },
  {
    "objectID": "reference/vals.fmt_time.html",
    "href": "reference/vals.fmt_time.html",
    "title": "vals.fmt_time",
    "section": "",
    "text": "vals.fmt_time(x, time_style='iso', pattern='{x}', locale=None)\nFormat values as times.\nFormat input values to time values using one of 5 preset time styles. Input can be in the form of time values, or strings in the ISO 8601 forms of HH:MM:SS or YYYY-MM-DD HH:MM:SS.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ntime_style\ngreat_tables._formats.TimeStyle\nThe time style to use. By default this is the short name \"iso\" which corresponds to how times are formatted within ISO 8601 datetime values. There are 5 time styles in total and their short names can be viewed using info_time_style().\n'iso'\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone\n\n\n\n\n\n\nWe need to supply a preset time style to the time_style argument. The time styles are numerous and can handle localization to any supported locale. The following table provides a listing of all time styles and their output values (corresponding to an input time of 14:35:00).\n\n\n\n\nTime Style\nOutput\nNotes\n\n\n\n\n1\n\"iso\"\n\"14:35:00\"\nISO 8601, 24h\n\n\n2\n\"iso-short\"\n\"14:35\"\nISO 8601, 24h\n\n\n3\n\"h_m_s_p\"\n\"2:35:00 PM\"\n12h\n\n\n4\n\"h_m_p\"\n\"2:35 PM\"\n12h\n\n\n5\n\"h_p\"\n\"2 PM\"\n12h\n\n\n\nWe can use the info_time_style() function within the console to view a similar table of time styles with example output.\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_time.html#parameters",
    "href": "reference/vals.fmt_time.html#parameters",
    "title": "vals.fmt_time",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ntime_style\ngreat_tables._formats.TimeStyle\nThe time style to use. By default this is the short name \"iso\" which corresponds to how times are formatted within ISO 8601 datetime values. There are 5 time styles in total and their short names can be viewed using info_time_style().\n'iso'\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/vals.fmt_time.html#formatting-with-the-time_style-argument",
    "href": "reference/vals.fmt_time.html#formatting-with-the-time_style-argument",
    "title": "vals.fmt_time",
    "section": "",
    "text": "We need to supply a preset time style to the time_style argument. The time styles are numerous and can handle localization to any supported locale. The following table provides a listing of all time styles and their output values (corresponding to an input time of 14:35:00).\n\n\n\n\nTime Style\nOutput\nNotes\n\n\n\n\n1\n\"iso\"\n\"14:35:00\"\nISO 8601, 24h\n\n\n2\n\"iso-short\"\n\"14:35\"\nISO 8601, 24h\n\n\n3\n\"h_m_s_p\"\n\"2:35:00 PM\"\n12h\n\n\n4\n\"h_m_p\"\n\"2:35 PM\"\n12h\n\n\n5\n\"h_p\"\n\"2 PM\"\n12h\n\n\n\nWe can use the info_time_style() function within the console to view a similar table of time styles with example output."
  },
  {
    "objectID": "reference/vals.fmt_time.html#returns",
    "href": "reference/vals.fmt_time.html#returns",
    "title": "vals.fmt_time",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/data.exibble.html",
    "href": "reference/data.exibble.html",
    "title": "data.exibble",
    "section": "",
    "text": "data.exibble\nA toy example table for testing with great_tables: exibble.\nThis table contains data of a few different classes, which makes it well-suited for quick experimentation with the functions in this package. It contains only eight rows with numeric and character columns. The last 4 rows contain missing values in the majority of this table’s columns (1 missing value per column). The date, time, and datetime columns are character-based dates/times in the familiar ISO 8601 format. The row and group columns provide for unique rownames and two groups (grp_a and grp_b) for experimenting with the rowname_col and groupname_col arguments.\n\n\nThis is a dataset with 8 rows and 9 columns.\n\nnum: A numeric column ordered with increasingly larger values.\nchar: A character column composed of names of fruits from a to h.\nfctr: A factor column with numbers from 1 to 8, written out.\ndate, time, datetime: Character columns with dates, times, and datetimes.\ncurrency: A numeric column that is useful for testing currency-based formatting.\nrow: A character column in the format row_X which can be useful for testing with row labels in a table stub.\ngroup: A character column with four grp_a values and four grp_b values which can be useful for testing tables that contain row groups."
  },
  {
    "objectID": "reference/data.exibble.html#details",
    "href": "reference/data.exibble.html#details",
    "title": "data.exibble",
    "section": "",
    "text": "This is a dataset with 8 rows and 9 columns.\n\nnum: A numeric column ordered with increasingly larger values.\nchar: A character column composed of names of fruits from a to h.\nfctr: A factor column with numbers from 1 to 8, written out.\ndate, time, datetime: Character columns with dates, times, and datetimes.\ncurrency: A numeric column that is useful for testing currency-based formatting.\nrow: A character column in the format row_X which can be useful for testing with row labels in a table stub.\ngroup: A character column with four grp_a values and four grp_b values which can be useful for testing tables that contain row groups."
  },
  {
    "objectID": "reference/GT.tab_source_note.html",
    "href": "reference/GT.tab_source_note.html",
    "title": "GT.tab_source_note",
    "section": "",
    "text": "GT.tab_source_note(data, source_note)\nAdd a source note citation.\nAdd a source note to the footer part of the gt table. A source note is useful for citing the data included in the table. Several can be added to the footer, simply use the tab_source_note() method multiple times and they will be inserted in the order provided. We can use Markdown formatting for the note, or, if the table is intended for HTML output, we can include HTML formatting."
  },
  {
    "objectID": "reference/GT.tab_source_note.html#parameters",
    "href": "reference/GT.tab_source_note.html#parameters",
    "title": "GT.tab_source_note",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsource_note\nstr\nText to be used in the source note. We can optionally use the md() or html() helpers to style the text as Markdown or to retain HTML elements in the text.\nrequired"
  },
  {
    "objectID": "reference/GT.tab_source_note.html#returns",
    "href": "reference/GT.tab_source_note.html#returns",
    "title": "GT.tab_source_note",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.tab_source_note.html#examples",
    "href": "reference/GT.tab_source_note.html#examples",
    "title": "GT.tab_source_note",
    "section": "Examples",
    "text": "Examples\nWith three columns from the gtcars dataset, let’s create a new table. We can use the tab_source_note() method to add a source note to the table footer. Here we are citing the data source but this method can be used for any text you’d prefer to display in the footer component of the table.\n\nimport great_tables as gt\n\ngtcars_mini = gt.data.gtcars[[\"mfr\", \"model\", \"msrp\"]].head(5)\n\n(\n    gt.GT(gtcars_mini, rowname_col=\"model\")\n    .tab_source_note(source_note=\"From edmunds.com\")\n)\n\n\n\n\n\n\n\nmfr\nmsrp\n\n\n  GT\n  Ford\n  447000.0\n\n\n  458 Speciale\n  Ferrari\n  291744.0\n\n\n  458 Spider\n  Ferrari\n  263553.0\n\n\n  458 Italia\n  Ferrari\n  233509.0\n\n\n  488 GTB\n  Ferrari\n  245400.0\n\n\n  \n  \n  \n    From edmunds.com"
  },
  {
    "objectID": "reference/GT.cols_move_to_start.html",
    "href": "reference/GT.cols_move_to_start.html",
    "title": "GT.cols_move_to_start",
    "section": "",
    "text": "GT.cols_move_to_start(data, columns)\nMove one or more columns to the start.\nWe can easily move set of columns to the beginning of the column series and we only need to specify which columns. It’s possible to do this upstream of gt_tables, however, it is easier with this function and it presents less possibility for error. The ordering of the columns that are moved to the start is preserved (same with the ordering of all other columns in the table).\nThe columns supplied in columns must all exist in the table. If you need to place one or columns at the end of the column series, the cols_move_to_end() method should be used. More control is offered with the cols_move() method, where columns could be placed after a specific column."
  },
  {
    "objectID": "reference/GT.cols_move_to_start.html#parameters",
    "href": "reference/GT.cols_move_to_start.html#parameters",
    "title": "GT.cols_move_to_start",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[typing.List[str]]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nrequired"
  },
  {
    "objectID": "reference/GT.cols_move_to_start.html#returns",
    "href": "reference/GT.cols_move_to_start.html#returns",
    "title": "GT.cols_move_to_start",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.cols_move_to_start.html#examples",
    "href": "reference/GT.cols_move_to_start.html#examples",
    "title": "GT.cols_move_to_start",
    "section": "Examples",
    "text": "Examples\nFor this example, we’ll use a portion of the countrypops dataset to create a simple table. Let’s move the year column, which is the middle column, to the start of the column series with the cols_move_to_start() method.\n\nimport great_tables as gt\nfrom great_tables.data import countrypops\n\ncountrypops_mini = countrypops.loc[countrypops[\"country_name\"] == \"Fiji\"][\n    [\"country_name\", \"year\", \"population\"]\n].tail(5)\n\ngt.GT(countrypops_mini).cols_move_to_start(columns=\"year\")\n\n\n\n\n\n\nyear\ncountry_name\npopulation\n\n\n  2018\n  Fiji\n  918996\n\n\n  2019\n  Fiji\n  918465\n\n\n  2020\n  Fiji\n  920422\n\n\n  2021\n  Fiji\n  924610\n\n\n  2022\n  Fiji\n  929766\n\n\n\n\n\n\n\n        \n\n\nWe can also move multiple columns at a time. With the same countrypops-based table, let’s move both the year and population columns to the start of the column series.\n\ngt.GT(countrypops_mini).cols_move_to_start(columns=[\"year\", \"population\"])\n\n\n\n\n\n\nyear\npopulation\ncountry_name\n\n\n  2018\n  918996\n  Fiji\n\n\n  2019\n  918465\n  Fiji\n\n\n  2020\n  920422\n  Fiji\n\n\n  2021\n  924610\n  Fiji\n\n\n  2022\n  929766\n  Fiji"
  },
  {
    "objectID": "reference/GT.fmt_currency.html",
    "href": "reference/GT.fmt_currency.html",
    "title": "GT.fmt_currency",
    "section": "",
    "text": "GT.fmt_currency(self, columns=None, rows=None, currency=None, use_subunits=True, decimals=None, drop_trailing_dec_mark=True, use_seps=True, scale_by=1, pattern='{x}', sep_mark=',', dec_mark='.', force_sign=False, placement='left', incl_space=False, locale=None)\nFormat values as currencies.\nWith numeric values in a gt table, we can perform currency-based formatting with the fmt_currency() method. This supports both automatic formatting with a three-letter currency code. We have fine control over the conversion from numeric values to currency values, where we could take advantage of the following options:"
  },
  {
    "objectID": "reference/GT.fmt_currency.html#parameters",
    "href": "reference/GT.fmt_currency.html#parameters",
    "title": "GT.fmt_currency",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone\n\n\ncurrency\ntyping.Union[str, None]\nThe currency to use for the numeric value. This input can be supplied as a 3-letter currency code (e.g., \"USD\" for U.S. Dollars, \"EUR\" for the Euro currency).\nNone\n\n\nuse_subunits\nbool\nAn option for whether the subunits portion of a currency value should be displayed. For example, with an input value of 273.81, the default formatting will produce \"$273.81\". Removing the subunits (with use_subunits = False) will give us \"$273\".\nTrue\n\n\ndecimals\nint\nThe decimals values corresponds to the exact number of decimal places to use. This value is optional as a currency has an intrinsic number of decimal places (i.e., the subunits). A value such as 2.34 can, for example, be formatted with 0 decimal places and if the currency used is \"USD\" it would result in \"$2\". With 4 decimal places, the formatted value becomes \"$2.3400\".\nNone\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\nscale_by\nfloat\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n1\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nplacement\nstr\nThe placement of the currency symbol. This can be either be \"left\" (as in \"$450\") or \"right\" (which yields \"450$\").\n'left'\n\n\nincl_space\nbool\nAn option for whether to include a space between the value and the currency symbol. The default is to not introduce a space character.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/GT.fmt_currency.html#returns",
    "href": "reference/GT.fmt_currency.html#returns",
    "title": "GT.fmt_currency",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.fmt_currency.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_currency.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_currency",
    "section": "Adapting Output To A Specific Locale",
    "text": "Adapting Output To A Specific Locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). The use of a valid locale ID here means separator and decimal marks will be correct for the given locale. Should any values be provided in sep_mark or dec_mark, they will be overridden by the locale’s preferred values. In addition to number formatting, providing a locale value and not providing a currency allows great_tables to obtain the currency code from the locale’s territory.\nNote that a locale value provided here will override any global locale setting performed in GT()’s own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_currency.html#examples",
    "href": "reference/GT.fmt_currency.html#examples",
    "title": "GT.fmt_currency",
    "section": "Examples",
    "text": "Examples\nLet’s use the exibble dataset to create a table. With the fmt_currency() method, we’ll format the currency column to display monetary values.\n\nimport great_tables as gt\n\ngt.GT(gt.data.exibble).fmt_currency(columns=\"currency\", decimals=3, use_seps=False)\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\nrow\ngroup\n\n\n  0.1111\n  apricot\n  one\n  2015-01-15\n  13:35\n  2018-01-01 02:22\n  $49.950\n  row_1\n  grp_a\n\n\n  2.222\n  banana\n  two\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  $17.950\n  row_2\n  grp_a\n\n\n  33.33\n  coconut\n  three\n  2015-03-15\n  15:45\n  2018-03-03 03:44\n  $1.390\n  row_3\n  grp_a\n\n\n  444.4\n  durian\n  four\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  $65100.000\n  row_4\n  grp_a\n\n\n  5550.0\n  \n  five\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  $1325.810\n  row_5\n  grp_b\n\n\n  \n  fig\n  six\n  2015-06-15\n  \n  2018-06-06 16:11\n  $13.255\n  row_6\n  grp_b\n\n\n  777000.0\n  grapefruit\n  seven\n  \n  19:10\n  2018-07-07 05:22\n  \n  row_7\n  grp_b\n\n\n  8880000.0\n  honeydew\n  eight\n  2015-08-15\n  20:20\n  \n  $0.440\n  row_8\n  grp_b"
  },
  {
    "objectID": "reference/GT.fmt_currency.html#see-also",
    "href": "reference/GT.fmt_currency.html#see-also",
    "title": "GT.fmt_currency",
    "section": "See Also",
    "text": "See Also\nThe functional version of this method, val_fmt_currency(), allows you to format a single numerical value (or a list of them)."
  },
  {
    "objectID": "reference/GT.fmt_integer.html",
    "href": "reference/GT.fmt_integer.html",
    "title": "GT.fmt_integer",
    "section": "",
    "text": "GT.fmt_integer(self, columns=None, rows=None, use_seps=True, scale_by=1, compact=False, pattern='{x}', sep_mark=',', force_sign=False, locale=None)\nFormat values as integers.\nWith numeric values in a gt table, we can perform number-based formatting so that the targeted values are always rendered as integer values.\nWe can have fine control over integer formatting with the following options:"
  },
  {
    "objectID": "reference/GT.fmt_integer.html#parameters",
    "href": "reference/GT.fmt_integer.html#parameters",
    "title": "GT.fmt_integer",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ntyping.Union[str, typing.List[str], None]\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\ntyping.Union[int, typing.List[int], None]\nIn conjunction with columns, we can specify which of their rows should undergo formatting. The default is all rows, resulting in all rows in columns being formatted. Alternatively, we can supply a list of row indices.\nNone\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\nscale_by\nfloat\nAll numeric values will be multiplied by the scale_by value before undergoing formatting. Since the default value is 1, no values will be changed unless a different multiplier value is supplied.\n1\n\n\ncompact\nbool\nA boolean value that allows for compact formatting of numeric values. Values will be scaled and decorated with the appropriate suffixes (e.g., 1230 becomes 1K, and 1230000 becomes 1M). The compact option is False by default.\nFalse\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/GT.fmt_integer.html#returns",
    "href": "reference/GT.fmt_integer.html#returns",
    "title": "GT.fmt_integer",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.fmt_integer.html#adapting-output-to-a-specific-locale",
    "href": "reference/GT.fmt_integer.html#adapting-output-to-a-specific-locale",
    "title": "GT.fmt_integer",
    "section": "Adapting Output To A Specific Locale",
    "text": "Adapting Output To A Specific Locale\nThis formatting method can adapt outputs according to a provided locale value. Examples include \"en\" for English (United States) and \"fr\" for French (France). The use of a valid locale ID here means separator marks will be correct for the given locale. Should any value be provided in sep_mark, it will be overridden by the locale’s preferred value.\nNote that a locale value provided here will override any global locale setting performed in GT()’s own locale argument (it is settable there as a value received by all other methods that have a locale argument)."
  },
  {
    "objectID": "reference/GT.fmt_integer.html#examples",
    "href": "reference/GT.fmt_integer.html#examples",
    "title": "GT.fmt_integer",
    "section": "Examples",
    "text": "Examples\nFor this example, we’ll use the exibble dataset as the input table. With the fmt_integer() method, we’ll format the num column as integer values having no digit separators (with the use_seps=False option).\n\nimport great_tables as gt\n\ngt.GT(gt.data.exibble).fmt_integer(columns=\"num\", use_seps=False)\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\nrow\ngroup\n\n\n  0\n  apricot\n  one\n  2015-01-15\n  13:35\n  2018-01-01 02:22\n  49.95\n  row_1\n  grp_a\n\n\n  2\n  banana\n  two\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  17.95\n  row_2\n  grp_a\n\n\n  33\n  coconut\n  three\n  2015-03-15\n  15:45\n  2018-03-03 03:44\n  1.39\n  row_3\n  grp_a\n\n\n  444\n  durian\n  four\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  65100.0\n  row_4\n  grp_a\n\n\n  5550\n  \n  five\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  1325.81\n  row_5\n  grp_b\n\n\n  \n  fig\n  six\n  2015-06-15\n  \n  2018-06-06 16:11\n  13.255\n  row_6\n  grp_b\n\n\n  777000\n  grapefruit\n  seven\n  \n  19:10\n  2018-07-07 05:22\n  \n  row_7\n  grp_b\n\n\n  8880000\n  honeydew\n  eight\n  2015-08-15\n  20:20\n  \n  0.44\n  row_8\n  grp_b"
  },
  {
    "objectID": "reference/GT.fmt_integer.html#see-also",
    "href": "reference/GT.fmt_integer.html#see-also",
    "title": "GT.fmt_integer",
    "section": "See Also",
    "text": "See Also\nThe fmt_number() method might be more of what you need if you’d like decimal values in your outputs. Need to do integer-based formatting on a value or list of values? Take a look at the functional version of this method: val_fmt_integer()."
  },
  {
    "objectID": "reference/GT.tab_style.html",
    "href": "reference/GT.tab_style.html",
    "title": "GT.tab_style",
    "section": "",
    "text": "GT.tab_style(self, style, locations)\nAdd custom style to one or more cells\nWith the tab_style() method we can target specific cells and apply styles to them. We do this with the combination of the style and location arguments. The style argument requires use of styling classes (e.g., style.fill(color=\"red\")) and the location argument needs to be an expression of the cells we want to target using location targeting classes (e.g., loc.body(columns=&lt;column_name&gt;)). With the available suite of styling classes, here are some of the styles we can apply:"
  },
  {
    "objectID": "reference/GT.tab_style.html#parameters",
    "href": "reference/GT.tab_style.html#parameters",
    "title": "GT.tab_style",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstyle\ngreat_tables._styles.CellStyle | list[great_tables._styles.CellStyle]\nThe styles to use for the cells at the targeted locations. The style.text(), style.fill(), and style.borders() classes can be used here to more easily generate valid styles.\nrequired\n\n\nlocation\ngreat_tables._locations.Loc | list[great_tables._locations.Loc]\nThe cell or set of cells to be associated with the style. The loc.body() class can be used here to easily target body cell locations.\nrequired"
  },
  {
    "objectID": "reference/GT.tab_style.html#examples",
    "href": "reference/GT.tab_style.html#examples",
    "title": "GT.tab_style",
    "section": "Examples",
    "text": "Examples\nLet’s use a small subset of the exibble dataset to demonstrate how to use tab_style() to target specific cells and apply styles to them. We’ll start by creating the exibble_sm table (a subset of the exibble table) and then use tab_style() to apply a light cyan background color to the cells in the num column for the first two rows of the table. We’ll then apply a larger font size to the cells in the fctr column for the last four rows of the table.\n\nimport great_tables as gt\nfrom great_tables import style, loc\nfrom great_tables import exibble\n\nexibble_sm = exibble[[\"num\", \"fctr\", \"row\", \"group\"]]\n\n(\n    gt.GT(exibble_sm, rowname_col=\"row\", groupname_col=\"group\")\n    .tab_style(\n        style=style.fill(color=\"lightcyan\"),\n        locations=loc.body(columns=\"num\", rows=[\"row_1\", \"row_2\"]),\n    )\n    .tab_style(\n        style=style.text(size=\"22px\"),\n        locations=loc.body(columns=[\"fctr\"], rows=[4, 5, 6, 7]),\n    )\n)\n\n\n\n\n\n\n\nnum\nfctr\n\n\n  grp_a\n  row_1\n  0.1111\n  one\n\n\n  row_2\n  2.222\n  two\n\n\n  row_3\n  33.33\n  three\n\n\n  row_4\n  444.4\n  four\n\n\n  grp_b\n  row_5\n  5550.0\n  five\n\n\n  row_6\n  \n  six\n\n\n  row_7\n  777000.0\n  seven\n\n\n  row_8\n  8880000.0\n  eight"
  },
  {
    "objectID": "reference/GT.tab_style.html#returns",
    "href": "reference/GT.tab_style.html#returns",
    "title": "GT.tab_style",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/vals.fmt_percent.html",
    "href": "reference/vals.fmt_percent.html",
    "title": "vals.fmt_percent",
    "section": "",
    "text": "vals.fmt_percent(x, decimals=2, drop_trailing_zeros=False, drop_trailing_dec_mark=True, scale_values=True, use_seps=True, pattern='{x}', sep_mark=',', dec_mark='.', force_sign=False, placement='right', incl_space=False, locale=None)\nFormat values as a percentage.\nWith numeric values in a list, we can perform percentage-based formatting. It is assumed the input numeric values are proportional values and, in this case, the values will be automatically multiplied by 100 before decorating with a percent sign (the other case is accommodated though setting scale_values to False). For more control over percentage formatting, we can use the following options:\n\npercent sign placement: the percent sign can be placed after or before the values and a space can be inserted between the symbol and the value.\ndecimals: choice of the number of decimal places, option to drop trailing zeros, and a choice of the decimal symbol\ndigit grouping separators: options to enable/disable digit separators and provide a choice of separator symbol\nvalue scaling toggle: choose to disable automatic value scaling in the situation that values are already scaled coming in (and just require the percent symbol)\npattern: option to use a text pattern for decoration of the formatted values\nlocale-based formatting: providing a locale ID will result in number formatting specific to the chosen locale\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ndecimals\nint\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True. If you always need decimals = 0, the fmt_integer() method should be considered.\n2\n\n\ndrop_trailing_zeros\nbool\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\nFalse\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nscale_values\nbool\nShould the values be scaled through multiplication by 100? By default this scaling is performed since the expectation is that incoming values are usually proportional. Setting to False signifies that the values are already scaled and require only the percent sign when formatted.\nTrue\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nplacement\nstr\nThis option governs the placement of the percent sign. This can be either be \"right\" (the default) or \"left\".\n'right'\n\n\nincl_space\nbool\nAn option for whether to include a space between the value and the percent sign. The default is to not introduce a space character.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_percent.html#parameters",
    "href": "reference/vals.fmt_percent.html#parameters",
    "title": "vals.fmt_percent",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ndecimals\nint\nThe decimals values corresponds to the exact number of decimal places to use. A value such as 2.34 can, for example, be formatted with 0 decimal places and it would result in \"2\". With 4 decimal places, the formatted value becomes \"2.3400\". The trailing zeros can be removed with drop_trailing_zeros=True. If you always need decimals = 0, the fmt_integer() method should be considered.\n2\n\n\ndrop_trailing_zeros\nbool\nA boolean value that allows for removal of trailing zeros (those redundant zeros after the decimal mark).\nFalse\n\n\ndrop_trailing_dec_mark\nbool\nA boolean value that determines whether decimal marks should always appear even if there are no decimal digits to display after formatting (e.g., 23 becomes 23. if False). By default trailing decimal marks are not shown.\nTrue\n\n\nscale_values\nbool\nShould the values be scaled through multiplication by 100? By default this scaling is performed since the expectation is that incoming values are usually proportional. Setting to False signifies that the values are already scaled and require only the percent sign when formatted.\nTrue\n\n\nuse_seps\nbool\nThe use_seps option allows for the use of digit group separators. The type of digit group separator is set by sep_mark and overridden if a locale ID is provided to locale. This setting is True by default.\nTrue\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nsep_mark\nstr\nThe string to use as a separator between groups of digits. For example, using sep_mark=\",\" with a value of 1000 would result in a formatted value of \"1,000\". This argument is ignored if a locale is supplied (i.e., is not None).\n','\n\n\ndec_mark\nstr\nThe string to be used as the decimal mark. For example, using dec_mark=\",\" with the value 0.152 would result in a formatted value of \"0,152\"). This argument is ignored if a locale is supplied (i.e., is not None).\n'.'\n\n\nforce_sign\nbool\nShould the positive sign be shown for positive values (effectively showing a sign for all values except zero)? If so, use True for this option. The default is False, where only negative numbers will display a minus sign. This option is disregarded when using accounting notation with accounting = True.\nFalse\n\n\nplacement\nstr\nThis option governs the placement of the percent sign. This can be either be \"right\" (the default) or \"left\".\n'right'\n\n\nincl_space\nbool\nAn option for whether to include a space between the value and the percent sign. The default is to not introduce a space character.\nFalse\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/vals.fmt_percent.html#returns",
    "href": "reference/vals.fmt_percent.html#returns",
    "title": "vals.fmt_percent",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/loc.body.html",
    "href": "reference/loc.body.html",
    "title": "loc.body",
    "section": "",
    "text": "loc.body(columns=None, rows=None)\nA location specification for targeting data cells in the table body.\nThe loc.body() class is used to target the data cells in the table body. The class can be used to apply custom styling with the tab_style() method. That method has a locations argument and this class should be used there to perform the targeting.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolumns\ngreat_tables._locations.SelectExpr\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\nlist[str | int]\nThe rows to target. Can either be a single row name or a series of row names provided in a list.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables._locations.LocBody\nA LocBody object, which is used for a locations argument if specifying the table body."
  },
  {
    "objectID": "reference/loc.body.html#parameters",
    "href": "reference/loc.body.html#parameters",
    "title": "loc.body",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ncolumns\ngreat_tables._locations.SelectExpr\nThe columns to target. Can either be a single column name or a series of column names provided in a list.\nNone\n\n\nrows\nlist[str | int]\nThe rows to target. Can either be a single row name or a series of row names provided in a list.\nNone"
  },
  {
    "objectID": "reference/loc.body.html#returns",
    "href": "reference/loc.body.html#returns",
    "title": "loc.body",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ngreat_tables._locations.LocBody\nA LocBody object, which is used for a locations argument if specifying the table body."
  },
  {
    "objectID": "reference/md.html",
    "href": "reference/md.html",
    "title": "md",
    "section": "",
    "text": "md(text)\nInterpret input text as Markdown-formatted text.\nMarkdown! It’s a wonderful thing. We can use it in certain places (e.g., footnotes, source notes, the table title, etc.) and expect it to render to HTML as Markdown does. There is the html() helper that allows you to ferry in HTML but this function md()… it’s almost like a two-for-one deal (you get to use Markdown plus any HTML fragments at the same time).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntext\nstr\nThe text that is understood to contain Markdown formatting.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables._text.Text\nAn instance of the Text class is returned, where the text type is \"from_markdown\"."
  },
  {
    "objectID": "reference/md.html#parameters",
    "href": "reference/md.html#parameters",
    "title": "md",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ntext\nstr\nThe text that is understood to contain Markdown formatting.\nrequired"
  },
  {
    "objectID": "reference/md.html#returns",
    "href": "reference/md.html#returns",
    "title": "md",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ngreat_tables._text.Text\nAn instance of the Text class is returned, where the text type is \"from_markdown\"."
  },
  {
    "objectID": "reference/style.borders.html",
    "href": "reference/style.borders.html",
    "title": "style.borders",
    "section": "",
    "text": "style.borders(sides, color='#000000', style='solid', weight='1px')\nA style specification for cell borders.\nThe styles.borders() class is to be used with the tab_style() method, which itself allows for the setting of custom styles to one or more cells. The sides argument is where we define which borders should be modified (e.g., \"left\", \"right\", etc.). With that selection, the color, style, and weight of the selected borders can then be modified.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsides\ntyping.Literal[‘all’, ‘top’, ‘bottom’, ‘left’, ‘right’]\nThe border sides to be modified. Options include \"left\", \"right\", \"top\", and \"bottom\". For all borders surrounding the selected cells, we can use the \"all\" option.\nrequired\n\n\ncolor\nstr\nThe border color can be defined with any valid CSS color value, such as a hex code, a named color, or an RGB value. The default color value is \"#000000\" (black).\n'#000000'\n\n\nstyle\nstr\nThe border style can be one of either \"solid\" (the default), \"dashed\", \"dotted\", \"hidden\", or \"double\".\n'solid'\n\n\nweight\nstr\nThe default value for weight is \"1px\" and higher values will become more visually prominent.\n'1px'\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables._styles.CellStyleBorders\nA CellStyleBorders object, which is used for a styles argument if specifying cell borders."
  },
  {
    "objectID": "reference/style.borders.html#parameters",
    "href": "reference/style.borders.html#parameters",
    "title": "style.borders",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsides\ntyping.Literal[‘all’, ‘top’, ‘bottom’, ‘left’, ‘right’]\nThe border sides to be modified. Options include \"left\", \"right\", \"top\", and \"bottom\". For all borders surrounding the selected cells, we can use the \"all\" option.\nrequired\n\n\ncolor\nstr\nThe border color can be defined with any valid CSS color value, such as a hex code, a named color, or an RGB value. The default color value is \"#000000\" (black).\n'#000000'\n\n\nstyle\nstr\nThe border style can be one of either \"solid\" (the default), \"dashed\", \"dotted\", \"hidden\", or \"double\".\n'solid'\n\n\nweight\nstr\nThe default value for weight is \"1px\" and higher values will become more visually prominent.\n'1px'"
  },
  {
    "objectID": "reference/style.borders.html#returns",
    "href": "reference/style.borders.html#returns",
    "title": "style.borders",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ngreat_tables._styles.CellStyleBorders\nA CellStyleBorders object, which is used for a styles argument if specifying cell borders."
  },
  {
    "objectID": "reference/GT.tab_stubhead.html",
    "href": "reference/GT.tab_stubhead.html",
    "title": "GT.tab_stubhead",
    "section": "",
    "text": "GT.tab_stubhead(self, label)\nAdd label text to the stubhead.\nAdd a label to the stubhead of a table. The stubhead is the lone element that is positioned left of the column labels, and above the stub. If a stub does not exist, then there is no stubhead (so no change will be made when using this method in that case). We have the flexibility to use Markdown formatting for the stubhead label (through use of the md() helper function). Furthermore, we can use HTML for the stubhead label so long as we also use the html() helper function."
  },
  {
    "objectID": "reference/GT.tab_stubhead.html#parameters",
    "href": "reference/GT.tab_stubhead.html#parameters",
    "title": "GT.tab_stubhead",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlabel\nstr\nThe text to be used as the stubhead label. We can optionally use the md() and html() functions to style the text as Markdown or to retain HTML elements in the text.\nrequired"
  },
  {
    "objectID": "reference/GT.tab_stubhead.html#returns",
    "href": "reference/GT.tab_stubhead.html#returns",
    "title": "GT.tab_stubhead",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.tab_stubhead.html#examples",
    "href": "reference/GT.tab_stubhead.html#examples",
    "title": "GT.tab_stubhead",
    "section": "Examples",
    "text": "Examples\nUsing a small subset of the gtcars dataset, we can create a table with row labels. Since we have row labels in the stub (via use of rowname_col=\"model\" in the GT() call) we have a stubhead, so, let’s add a stubhead label (\"car\") with the tab_stubhead() method to describe what’s in the stub.\n\nimport great_tables as gt\n\ngtcars_mini = gt.data.gtcars[[\"model\", \"year\", \"hp\", \"trq\"]].head(5)\n\ngt.GT(gtcars_mini, rowname_col=\"model\").tab_stubhead(label=\"car\")\n\n\n\n\n\n\ncar\nyear\nhp\ntrq\n\n\n  GT\n  2017.0\n  647.0\n  550.0\n\n\n  458 Speciale\n  2015.0\n  597.0\n  398.0\n\n\n  458 Spider\n  2015.0\n  562.0\n  398.0\n\n\n  458 Italia\n  2014.0\n  562.0\n  398.0\n\n\n  488 GTB\n  2016.0\n  661.0\n  561.0\n\n\n\n\n\n\n\n        \n\n\nWe can also use Markdown formatting for the stubhead label. In this example, we’ll use md(\"*Car*\") to make the label italicized.\n\ngt.GT(gtcars_mini, rowname_col=\"model\").tab_stubhead(label=gt.md(\"*Car*\"))\n\n\n\n\n\n\nCar\nyear\nhp\ntrq\n\n\n  GT\n  2017.0\n  647.0\n  550.0\n\n\n  458 Speciale\n  2015.0\n  597.0\n  398.0\n\n\n  458 Spider\n  2015.0\n  562.0\n  398.0\n\n\n  458 Italia\n  2014.0\n  562.0\n  398.0\n\n\n  488 GTB\n  2016.0\n  661.0\n  561.0"
  },
  {
    "objectID": "reference/data.constants.html",
    "href": "reference/data.constants.html",
    "title": "data.constants",
    "section": "",
    "text": "data.constants\nThe fundamental physical constants.\nThis dataset contains values for over 300 basic fundamental constants in nature. The values originate from the 2018 adjustment which is based on the latest relevant precision measurements and improvements of theoretical calculations. Such work has been carried out under the authority of the Task Group on Fundamental Constants (TGFC) of the Committee on Data of the International Science Council (CODATA). These updated values became available on May 20, 2019. They are published at http://physics.nist.gov/constants, a website of the Fundamental Constants Data Center of the National Institute of Standards and Technology (NIST), Gaithersburg, Maryland, USA.\n\n\nThis is a dataset with 354 rows and 4 columns.\n\nname: The name of the constant.\nvalue: The value of the constant.\nuncert: The uncertainty associated with the value. If missing then the value is seen as an ‘exact’ value (e.g., an electron volt has the exact value of 1.602 176 634 e-19 J).\nsf_value, sf_uncert: The number of significant figures associated with the value and any uncertainty value.\nunits: The units associated with the constant."
  },
  {
    "objectID": "reference/data.constants.html#details",
    "href": "reference/data.constants.html#details",
    "title": "data.constants",
    "section": "",
    "text": "This is a dataset with 354 rows and 4 columns.\n\nname: The name of the constant.\nvalue: The value of the constant.\nuncert: The uncertainty associated with the value. If missing then the value is seen as an ‘exact’ value (e.g., an electron volt has the exact value of 1.602 176 634 e-19 J).\nsf_value, sf_uncert: The number of significant figures associated with the value and any uncertainty value.\nunits: The units associated with the constant."
  },
  {
    "objectID": "reference/data.towny.html",
    "href": "reference/data.towny.html",
    "title": "data.towny",
    "section": "",
    "text": "data.towny\nPopulations of all municipalities in Ontario from 1996 to 2021.\nA dataset containing census population data from six census years (1996 to 2021) for all 414 of Ontario’s local municipalities. The Municipal Act of Ontario (2001) defines a local municipality as “a single-tier municipality or a lower-tier municipality”. There are 173 single-tier municipalities and 241 lower-tier municipalities representing 99 percent of Ontario’s population and 17 percent of its land use.\nIn the towny dataset we include information specific to each municipality such as location (in the latitude and longitude columns), their website URLs, their classifications, and land area sizes according to 2021 boundaries. Additionally, there are computed columns containing population density values for each census year and population change values from adjacent census years.\n\n\nThis is a dataset with 414 rows and 25 columns.\n\nname: The name of the municipality.\nwebsite: The website for the municipality. This is missing if there isn’t an official site.\nstatus: The status of the municipality. This is either \"lower-tier\" or \"single-tier\". A single-tier municipality, which takes on all municipal duties outlined in the Municipal Act and other Provincial laws, is independent of an upper-tier municipality. Part of an upper-tier municipality is a lower-tier municipality. The upper-tier and lower-tier municipalities are responsible for carrying out the duties laid out in the Municipal Act and other provincial laws.\ncsd_type: The Census Subdivision Type. This can be one of \"village\", \"town\", \"township\", \"municipality\", or \"city\".\ncensus_div: The Census division, of which there are 49. This is made up of single-tier municipalities, regional municipalities, counties, and districts.\nlatitude, longitude: The location of the municipality, given as latitude and longitude values in decimal degrees.\nland_area_km2: The total area of the local municipality in square kilometers.\npopulation_1996, population_2001, population_2006, population_2011, population_2016, population_2021: Population values for each municipality from the 1996 to 2021 census years.\ndensity_1996, density_2001, density_2006, density_2011, density_2016, density_2021: Population density values, calculated as persons per square kilometer, for each municipality from the 1996 to 2021 census years.\npop_change_1996_2001_pct, pop_change_2001_2006_pct, pop_change_2006_2011_pct, pop_change_2011_2016_pct, pop_change_2016_2021_pct: Population changes between adjacent pairs of census years, from 1996 to 2021."
  },
  {
    "objectID": "reference/data.towny.html#details",
    "href": "reference/data.towny.html#details",
    "title": "data.towny",
    "section": "",
    "text": "This is a dataset with 414 rows and 25 columns.\n\nname: The name of the municipality.\nwebsite: The website for the municipality. This is missing if there isn’t an official site.\nstatus: The status of the municipality. This is either \"lower-tier\" or \"single-tier\". A single-tier municipality, which takes on all municipal duties outlined in the Municipal Act and other Provincial laws, is independent of an upper-tier municipality. Part of an upper-tier municipality is a lower-tier municipality. The upper-tier and lower-tier municipalities are responsible for carrying out the duties laid out in the Municipal Act and other provincial laws.\ncsd_type: The Census Subdivision Type. This can be one of \"village\", \"town\", \"township\", \"municipality\", or \"city\".\ncensus_div: The Census division, of which there are 49. This is made up of single-tier municipalities, regional municipalities, counties, and districts.\nlatitude, longitude: The location of the municipality, given as latitude and longitude values in decimal degrees.\nland_area_km2: The total area of the local municipality in square kilometers.\npopulation_1996, population_2001, population_2006, population_2011, population_2016, population_2021: Population values for each municipality from the 1996 to 2021 census years.\ndensity_1996, density_2001, density_2006, density_2011, density_2016, density_2021: Population density values, calculated as persons per square kilometer, for each municipality from the 1996 to 2021 census years.\npop_change_1996_2001_pct, pop_change_2001_2006_pct, pop_change_2006_2011_pct, pop_change_2011_2016_pct, pop_change_2016_2021_pct: Population changes between adjacent pairs of census years, from 1996 to 2021."
  },
  {
    "objectID": "reference/GT.tab_header.html",
    "href": "reference/GT.tab_header.html",
    "title": "GT.tab_header",
    "section": "",
    "text": "GT.tab_header(self, title, subtitle=None, preheader=None)\nAdd a table header.\nWe can add a table header to the gt table with a title and even a subtitle using the tab_header() method. A table header is an optional table component that is positioned above above the column labels. We have the flexibility to use Markdown or HTML formatting for the header’s title and subtitle with the md() and html() helper functions."
  },
  {
    "objectID": "reference/GT.tab_header.html#parameters",
    "href": "reference/GT.tab_header.html#parameters",
    "title": "GT.tab_header",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntitle\nstr\nText to be used in the table title. We can elect to use the md() and html() helper functions to style the text as Markdown or to retain HTML elements in the text.\nrequired\n\n\nsubtitle\nstr\nText to be used in the table subtitle. We can elect to use the md() and html() helper functions to style the text as Markdown or to retain HTML elements in the text.\nNone\n\n\npreheader\ntyping.Optional[typing.Union[str, typing.List[str]]]\nOptional preheader content that is rendered above the table. Can be supplied as a list of strings.\nNone"
  },
  {
    "objectID": "reference/GT.tab_header.html#returns",
    "href": "reference/GT.tab_header.html#returns",
    "title": "GT.tab_header",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.gt.GT\nThe GT object is returned."
  },
  {
    "objectID": "reference/GT.tab_header.html#examples",
    "href": "reference/GT.tab_header.html#examples",
    "title": "GT.tab_header",
    "section": "Examples",
    "text": "Examples\nLet’s use a small portion of the gtcars dataset to create a table. A header part can be added to the table with the tab_header() method. We’ll add a title and the optional subtitle as well. With the md() helper function, we can make sure the Markdown formatting is interpreted and transformed.\n\nimport great_tables as gt\n\ngtcars_mini = gt.data.gtcars[[\"mfr\", \"model\", \"msrp\"]].head(5)\n\n(\n    gt.GT(gtcars_mini)\n    .tab_header(\n        title=gt.md(\"Data listing from **gtcars**\"),\n        subtitle=gt.md(\"`gtcars` is an R dataset\")\n    )\n)\n\n\n\n\n\n  \n    Data listing from gtcars\n  \n  \n    gtcars is an R dataset\n  \nmfr\nmodel\nmsrp\n\n\n  Ford\n  GT\n  447000.0\n\n\n  Ferrari\n  458 Speciale\n  291744.0\n\n\n  Ferrari\n  458 Spider\n  263553.0\n\n\n  Ferrari\n  458 Italia\n  233509.0\n\n\n  Ferrari\n  488 GTB\n  245400.0\n\n\n\n\n\n\n\n        \n\n\nWe can alternatively use the html() helper function to retain HTML elements in the text.\n\n(\n    gt.GT(gtcars_mini)\n    .tab_header(\n        title=gt.md(\"Data listing &lt;strong&gt;gtcars&lt;/strong&gt;\"),\n        subtitle=gt.html(\"From &lt;span style='color:red;'&gt;gtcars&lt;/span&gt;\")\n    )\n)\n\n\n\n\n\n  \n    Data listing gtcars\n  \n  \n    From gtcars\n  \nmfr\nmodel\nmsrp\n\n\n  Ford\n  GT\n  447000.0\n\n\n  Ferrari\n  458 Speciale\n  291744.0\n\n\n  Ferrari\n  458 Spider\n  263553.0\n\n\n  Ferrari\n  458 Italia\n  233509.0\n\n\n  Ferrari\n  488 GTB\n  245400.0"
  },
  {
    "objectID": "reference/vals.fmt_date.html",
    "href": "reference/vals.fmt_date.html",
    "title": "vals.fmt_date",
    "section": "",
    "text": "vals.fmt_date(x, date_style='iso', pattern='{x}', locale=None)\nFormat values as dates.\nFormat input values to time values using one of 17 preset date styles. Input can be in the form of date type or as a ISO-8601 string (in the form of YYYY-MM-DD HH:MM:SS or YYYY-MM-DD).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ndate_style\ngreat_tables._formats.DateStyle\nThe date style to use. By default this is the short name \"iso\" which corresponds to ISO 8601 date formatting. There are 41 date styles in total and their short names can be viewed using info_date_style().\n'iso'\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone\n\n\n\n\n\n\nWe need to supply a preset date style to the date_style argument. The date styles are numerous and can handle localization to any supported locale. The following table provides a listing of all date styles and their output values (corresponding to an input date of 2000-02-29).\n\n\n\n\nDate Style\nOutput\n\n\n\n\n1\n\"iso\"\n\"2000-02-29\"\n\n\n2\n\"wday_month_day_year\"\n\"Tuesday, February 29, 2000\"\n\n\n3\n\"wd_m_day_year\"\n\"Tue, Feb 29, 2000\"\n\n\n4\n\"wday_day_month_year\"\n\"Tuesday 29 February 2000\"\n\n\n5\n\"month_day_year\"\n\"February 29, 2000\"\n\n\n6\n\"m_day_year\"\n\"Feb 29, 2000\"\n\n\n7\n\"day_m_year\"\n\"29 Feb 2000\"\n\n\n8\n\"day_month_year\"\n\"29 February 2000\"\n\n\n9\n\"day_month\"\n\"29 February\"\n\n\n10\n\"day_m\"\n\"29 Feb\"\n\n\n11\n\"year\"\n\"2000\"\n\n\n12\n\"month\"\n\"February\"\n\n\n13\n\"day\"\n\"29\"\n\n\n14\n\"year.mn.day\"\n\"2000/02/29\"\n\n\n15\n\"y.mn.day\"\n\"00/02/29\"\n\n\n16\n\"year_week\"\n\"2000-W09\"\n\n\n17\n\"year_quarter\"\n\"2000-Q1\"\n\n\n\nWe can use the info_date_style() function within the console to view a similar table of date styles with example output.\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "reference/vals.fmt_date.html#parameters",
    "href": "reference/vals.fmt_date.html#parameters",
    "title": "vals.fmt_date",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nx\ntyping.Union[typing.Any, typing.List[typing.Any]]\nA list of values to be formatted.\nrequired\n\n\ndate_style\ngreat_tables._formats.DateStyle\nThe date style to use. By default this is the short name \"iso\" which corresponds to ISO 8601 date formatting. There are 41 date styles in total and their short names can be viewed using info_date_style().\n'iso'\n\n\npattern\nstr\nA formatting pattern that allows for decoration of the formatted value. The formatted value is represented by the {x} (which can be used multiple times, if needed) and all other characters will be interpreted as string literals.\n'{x}'\n\n\nlocale\nstr\nAn optional locale identifier that can be used for formatting values according the locale’s rules. Examples include \"en\" for English (United States) and \"fr\" for French (France).\nNone"
  },
  {
    "objectID": "reference/vals.fmt_date.html#formatting-with-the-date_style-argument",
    "href": "reference/vals.fmt_date.html#formatting-with-the-date_style-argument",
    "title": "vals.fmt_date",
    "section": "",
    "text": "We need to supply a preset date style to the date_style argument. The date styles are numerous and can handle localization to any supported locale. The following table provides a listing of all date styles and their output values (corresponding to an input date of 2000-02-29).\n\n\n\n\nDate Style\nOutput\n\n\n\n\n1\n\"iso\"\n\"2000-02-29\"\n\n\n2\n\"wday_month_day_year\"\n\"Tuesday, February 29, 2000\"\n\n\n3\n\"wd_m_day_year\"\n\"Tue, Feb 29, 2000\"\n\n\n4\n\"wday_day_month_year\"\n\"Tuesday 29 February 2000\"\n\n\n5\n\"month_day_year\"\n\"February 29, 2000\"\n\n\n6\n\"m_day_year\"\n\"Feb 29, 2000\"\n\n\n7\n\"day_m_year\"\n\"29 Feb 2000\"\n\n\n8\n\"day_month_year\"\n\"29 February 2000\"\n\n\n9\n\"day_month\"\n\"29 February\"\n\n\n10\n\"day_m\"\n\"29 Feb\"\n\n\n11\n\"year\"\n\"2000\"\n\n\n12\n\"month\"\n\"February\"\n\n\n13\n\"day\"\n\"29\"\n\n\n14\n\"year.mn.day\"\n\"2000/02/29\"\n\n\n15\n\"y.mn.day\"\n\"00/02/29\"\n\n\n16\n\"year_week\"\n\"2000-W09\"\n\n\n17\n\"year_quarter\"\n\"2000-Q1\"\n\n\n\nWe can use the info_date_style() function within the console to view a similar table of date styles with example output."
  },
  {
    "objectID": "reference/vals.fmt_date.html#returns",
    "href": "reference/vals.fmt_date.html#returns",
    "title": "vals.fmt_date",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ntyping.List[str]\nA list of formatted values is returned."
  },
  {
    "objectID": "examples-qmd/GT.html",
    "href": "examples-qmd/GT.html",
    "title": "GT",
    "section": "",
    "text": "import great_tables as gt\nfrom great_tables.data import exibble\n\nLet’s use the exibble dataset for the next few examples, we’ll learn how to make simple gt tables with the GT() class. The most basic thing to do is to just use GT() with the dataset as the input.\n\ngt.GT(exibble)\n\n\n\n\n\n\nnum\nchar\nfctr\ndate\ntime\ndatetime\ncurrency\nrow\ngroup\n\n\n  0.1111\n  apricot\n  one\n  2015-01-15\n  13:35\n  2018-01-01 02:22\n  49.95\n  row_1\n  grp_a\n\n\n  2.222\n  banana\n  two\n  2015-02-15\n  14:40\n  2018-02-02 14:33\n  17.95\n  row_2\n  grp_a\n\n\n  33.33\n  coconut\n  three\n  2015-03-15\n  15:45\n  2018-03-03 03:44\n  1.39\n  row_3\n  grp_a\n\n\n  444.4\n  durian\n  four\n  2015-04-15\n  16:50\n  2018-04-04 15:55\n  65100.0\n  row_4\n  grp_a\n\n\n  5550.0\n  \n  five\n  2015-05-15\n  17:55\n  2018-05-05 04:00\n  1325.81\n  row_5\n  grp_b\n\n\n  \n  fig\n  six\n  2015-06-15\n  \n  2018-06-06 16:11\n  13.255\n  row_6\n  grp_b\n\n\n  777000.0\n  grapefruit\n  seven\n  \n  19:10\n  2018-07-07 05:22\n  \n  row_7\n  grp_b\n\n\n  8880000.0\n  honeydew\n  eight\n  2015-08-15\n  20:20\n  \n  0.44\n  row_8\n  grp_b\n\n\n\n\n\n\n\n        \n\n\nThis dataset has the row and group columns. The former contains unique values that are ideal for labeling rows, and this often happens in what is called the ‘stub’ (a reserved area that serves to label rows). With the GT() class, we can immediately place the contents of the row column into the stub column. To do this, we use the rowname_col argument with the name of the column to use.\n\ngt.GT(exibble, rowname_col=\"row\")\n\nThis sets up a table with a stub, the row labels are placed within the stub column, and a vertical dividing line has been placed on the right-hand side.\nThe group column can be used to divide the rows into discrete groups. Within that column, we see repetitions of the values 'grp_a' and 'grp_b'. These serve both as ID values and the initial label for the groups. With the groupname_col argument in GT(), we can set up the row groups immediately upon creation of the table.\n\ngt.GT(exibble, rowname_col=\"row\", groupname_col=\"group\")\n\nIf you’d rather perform the set up of row groups later (i.e., not in the GT() call), this is possible with use of the tab_row_group() method (and row_group_order() can help with the arrangement of row groups).\nOne more thing to consider with row groups is their layout. By default, row group labels reside in separate rows the appear above the group. However, we can use the row_group_as_column=True option to put the row group labels within a secondary column within the table stub.\n\ngt.GT(exibble, rowname_col=\"row\", groupname_col=\"group\", row_group_as_column=True)\n\nThis could be done later if need be, and using tab_options(row_group.as_column=True) would be the way to do it outside of the GT() call.\nSome datasets have rownames built in; mtcars has the car model names as the rownames. To use those rownames as row labels in the stub, the rownames_to_stub=TRUE option will prove to be useful.\n\ngt.GT(head(mtcars, 10), rownames_to_stub=True)\n\nBy default, values in the body of a gt table (and their column labels) are automatically aligned. The alignment is governed by the types of values in a column. If you’d like to disable this form of auto-alignment, the auto_align=False option can be taken.\n\ngt.GT(exibble, rowname_col=\"row\", auto_align=False)\n\nWhat you’ll get from that is center-alignment of all table body values and all column labels. Note that row labels in the the stub are still left-aligned; and auto_align has no effect on alignment within the table stub.\nHowever which way you generate the initial gt table object, you can use it with a huge variety of methods in the package to further customize the presentation. Formatting body cells is commonly done with the family of formatting methods (e.g., fmt_number(), fmt_date(), etc.). The package supports formatting with internationalization (‘i18n’ features) and so locale-aware methods come with a locale argument. To avoid having to use that argument repeatedly, the GT() class has its own locale argument. Setting a locale in that will make it available globally. Here’s an example of how that works in practice when setting locale='fr' in GT() and using formatting methods:\n\ngt.GT(exibble, rowname_col=\"row\", groupname_col=\"group\", locale=\"fr\").fmt_number().fmt_date(\n    columns=\"date\", date_style=\"yMEd\"\n).fmt_datetime(columns=\"datetime\", format=\"EEEE, MMMM d, y\", locale=\"en\")"
  },
  {
    "objectID": "articles/intro.html",
    "href": "articles/intro.html",
    "title": "Great Tables",
    "section": "",
    "text": "Absolutely Delightful Table-making in Python\nWith Great Tables anyone can make wonderful-looking tables in Python. The philosophy here is that we can construct a wide variety of useful tables by working with a cohesive set of table components. You can mix and match things like a header and footer, attach a stub (which contains row labels), arrange spanner labels over top of the column labels, and much more. Not only that, but you can format the cell values in a variety of awesome ways.\nIt all begins with table data in the form of a Pandas or Polars DataFrame. You then decide how to compose your output table with the elements and formatting you need for the task at hand. Finally, the table is rendered by printing it at the console, including it in an notebook environment, or rendering it inside a Quarto document.\nThe Great Tables package is designed to be both straightforward yet powerful. The emphasis is on simple methods for the everyday display table needs (but power when you need it). Here is a brief example of how to use Great Tables to create a table from the included sp500 dataset:\nThere are ten datasets provided by Great Tables: countrypops, sza, gtcars, sp500, pizzaplace, exibble, towny, metro, constants, and illness.\nAll of this tabular data is great for experimenting with the functionality available inside Great Tables and we make extensive use of these datasets in our documentation.\nBeyond the functions shown in the simple sp500-based example, there are many possible ways to create super-customized tables. Check out the documentation website to get started via introductory articles for making Great Tables. There’s a handy Function Reference section that has detailed help for every method and function in the package.\nLet’s talk about how to make Great Tables! There are a few locations where there is much potential for discussion.\nOne such place is in GitHub Discussions. This discussion board is especially great for Q&A, and many people have had their problems solved in there.\nAnother fine venue for discussion is in the gt_package Discord server. This is a good option for asking about the development of Great Tables, pitching ideas that may become features, and sharing your table creations!\nFinally, there is the gt_package X account. There you’ll find tweets about Great Tables (including sneak previews about in-development features) and other table-generation packages.\nThese are all great places to ask questions about how to use the package, discuss some ideas, engage with others, and much more!"
  },
  {
    "objectID": "articles/intro.html#installation",
    "href": "articles/intro.html#installation",
    "title": "Great Tables",
    "section": "INSTALLATION",
    "text": "INSTALLATION\nThe Great Tables package can be installed from PyPI with:\n$ pip install great_tables\nIf you encounter a bug, have usage questions, or want to share ideas to make this package better, please feel free to file an issue."
  },
  {
    "objectID": "articles/intro.html#code-of-conduct",
    "href": "articles/intro.html#code-of-conduct",
    "title": "Great Tables",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nPlease note that the Great Tables project is released with a contributor code of conduct.By participating in this project you agree to abide by its terms."
  },
  {
    "objectID": "articles/intro.html#license",
    "href": "articles/intro.html#license",
    "title": "Great Tables",
    "section": "📄 License",
    "text": "📄 License\nGreat Tables is licensed under the MIT license.\n© Posit Software, PBC."
  },
  {
    "objectID": "articles/intro.html#governance",
    "href": "articles/intro.html#governance",
    "title": "Great Tables",
    "section": "🏛️ Governance",
    "text": "🏛️ Governance\nThis project is primarily maintained by Rich Iannone and Michael Chow. Other authors may occasionally assist with some of these duties."
  }
]